//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPItemText : public QCPItemText, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemText*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemText*)this)->QCPItemText::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemText*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemText*>(this))) {
            void* xret = this->QCPItemText::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemText::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemText::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemText::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemText::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemText*>(this))) {
            int xret = this->QCPItemText::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemText* QCPItemText(QCustomPlot*)
        x_QCPItemText* xret = new x_QCPItemText((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemText(QCustomPlot* x1) : QCPItemText(x1) {}
    void x_9(Smoke::Stack x) {
        // QColor color() const
        QColor xret = ((const x_QCPItemText*)this)->QCPItemText::color();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_10(Smoke::Stack x) {
        // QColor selectedColor() const
        QColor xret = ((const x_QCPItemText*)this)->QCPItemText::selectedColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_11(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemText*)this)->QCPItemText::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_12(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemText*)this)->QCPItemText::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_13(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QCPItemText*)this)->QCPItemText::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_14(Smoke::Stack x) {
        // QBrush selectedBrush() const
        QBrush xret = ((const x_QCPItemText*)this)->QCPItemText::selectedBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_15(Smoke::Stack x) {
        // QFont font() const
        QFont xret = ((const x_QCPItemText*)this)->QCPItemText::font();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_16(Smoke::Stack x) {
        // QFont selectedFont() const
        QFont xret = ((const x_QCPItemText*)this)->QCPItemText::selectedFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_17(Smoke::Stack x) {
        // QString text() const
        QString xret = ((const x_QCPItemText*)this)->QCPItemText::text();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_18(Smoke::Stack x) {
        // QFlags<Qt::AlignmentFlag> textAlignment() const
        QFlags<Qt::AlignmentFlag> xret = ((const x_QCPItemText*)this)->QCPItemText::textAlignment();
        x[0].s_uint = (uint)xret;
    }
    void x_19(Smoke::Stack x) {
        // double rotation() const
        double xret = ((const x_QCPItemText*)this)->QCPItemText::rotation();
        x[0].s_double = xret;
    }
    void x_20(Smoke::Stack x) {
        // QMargins padding() const
        QMargins xret = ((const x_QCPItemText*)this)->QCPItemText::padding();
        x[0].s_class = (void*)new QMargins(xret);
    }
    void x_21(Smoke::Stack x) {
        // void setColor(const QColor&)
        this->QCPItemText::setColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setSelectedColor(const QColor&)
        this->QCPItemText::setSelectedColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemText::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemText::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QCPItemText::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setSelectedBrush(const QBrush&)
        this->QCPItemText::setSelectedBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setFont(const QFont&)
        this->QCPItemText::setFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void setSelectedFont(const QFont&)
        this->QCPItemText::setSelectedFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void setText(const QString&)
        this->QCPItemText::setText(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void setPositionAlignment(QFlags<Qt::AlignmentFlag>)
        this->QCPItemText::setPositionAlignment((QFlags<Qt::AlignmentFlag>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void setTextAlignment(QFlags<Qt::AlignmentFlag>)
        this->QCPItemText::setTextAlignment((QFlags<Qt::AlignmentFlag>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void setRotation(double)
        this->QCPItemText::setRotation((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // void setPadding(const QMargins&)
        this->QCPItemText::setPadding(*(const QMargins*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemText*>(this))) {
            double xret = ((const x_QCPItemText*)this)->QCPItemText::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemText*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_35(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemText*>(this))) {
            this->QCPItemText::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_36(Smoke::Stack x) {
        // virtual QPointF anchorPixelPoint(int) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemText*>(this))) {
            QPointF xret = ((const x_QCPItemText*)this)->QCPItemText::anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        } else {
            QPointF xret = ((const x_QCPItemText*)this)->anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        }
    }
    void x_37(Smoke::Stack x) {
        // QPointF getTextDrawPoint(const QPointF&, const QRectF&, QFlags<Qt::AlignmentFlag>) const
        QPointF xret = ((const x_QCPItemText*)this)->QCPItemText::getTextDrawPoint(*(const QPointF*)x[1].s_class,*(const QRectF*)x[2].s_class,(QFlags<Qt::AlignmentFlag>)x[3].s_uint);
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_38(Smoke::Stack x) {
        // QFont mainFont() const
        QFont xret = ((const x_QCPItemText*)this)->QCPItemText::mainFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_39(Smoke::Stack x) {
        // QColor mainColor() const
        QColor xret = ((const x_QCPItemText*)this)->QCPItemText::mainColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_40(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemText*)this)->QCPItemText::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_41(Smoke::Stack x) {
        // QBrush mainBrush() const
        QBrush xret = ((const x_QCPItemText*)this)->QCPItemText::mainBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    static void x_42(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemText::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_43(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemText::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_44(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemText*)this)->QCPItemText::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_45(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemText::staticMetaObject;
    }
    void x_46(Smoke::Stack x) {
        // QColor mColor
        x[0].s_class = (void*)&this->QCPItemText::mColor;
    }
    void x_47(Smoke::Stack x) {
        // QColor mColor=
        this->QCPItemText::mColor = *(const QColor*)x[1].s_class;
    }
    void x_48(Smoke::Stack x) {
        // QColor mSelectedColor
        x[0].s_class = (void*)&this->QCPItemText::mSelectedColor;
    }
    void x_49(Smoke::Stack x) {
        // QColor mSelectedColor=
        this->QCPItemText::mSelectedColor = *(const QColor*)x[1].s_class;
    }
    void x_50(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemText::mPen;
    }
    void x_51(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemText::mPen = *(const QPen*)x[1].s_class;
    }
    void x_52(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemText::mSelectedPen;
    }
    void x_53(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemText::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    void x_54(Smoke::Stack x) {
        // QBrush mBrush
        x[0].s_class = (void*)&this->QCPItemText::mBrush;
    }
    void x_55(Smoke::Stack x) {
        // QBrush mBrush=
        this->QCPItemText::mBrush = *(const QBrush*)x[1].s_class;
    }
    void x_56(Smoke::Stack x) {
        // QBrush mSelectedBrush
        x[0].s_class = (void*)&this->QCPItemText::mSelectedBrush;
    }
    void x_57(Smoke::Stack x) {
        // QBrush mSelectedBrush=
        this->QCPItemText::mSelectedBrush = *(const QBrush*)x[1].s_class;
    }
    void x_58(Smoke::Stack x) {
        // QFont mFont
        x[0].s_class = (void*)&this->QCPItemText::mFont;
    }
    void x_59(Smoke::Stack x) {
        // QFont mFont=
        this->QCPItemText::mFont = *(const QFont*)x[1].s_class;
    }
    void x_60(Smoke::Stack x) {
        // QFont mSelectedFont
        x[0].s_class = (void*)&this->QCPItemText::mSelectedFont;
    }
    void x_61(Smoke::Stack x) {
        // QFont mSelectedFont=
        this->QCPItemText::mSelectedFont = *(const QFont*)x[1].s_class;
    }
    void x_62(Smoke::Stack x) {
        // QString mText
        x[0].s_class = (void*)&this->QCPItemText::mText;
    }
    void x_63(Smoke::Stack x) {
        // QString mText=
        this->QCPItemText::mText = *(const QString*)x[1].s_class;
    }
    void x_64(Smoke::Stack x) {
        // QFlags<Qt::AlignmentFlag> mPositionAlignment
        x[0].s_uint = (uint)this->QCPItemText::mPositionAlignment;
    }
    void x_65(Smoke::Stack x) {
        // QFlags<Qt::AlignmentFlag> mPositionAlignment=
        this->QCPItemText::mPositionAlignment = (QFlags<Qt::AlignmentFlag>)x[1].s_uint;
    }
    void x_66(Smoke::Stack x) {
        // QFlags<Qt::AlignmentFlag> mTextAlignment
        x[0].s_uint = (uint)this->QCPItemText::mTextAlignment;
    }
    void x_67(Smoke::Stack x) {
        // QFlags<Qt::AlignmentFlag> mTextAlignment=
        this->QCPItemText::mTextAlignment = (QFlags<Qt::AlignmentFlag>)x[1].s_uint;
    }
    void x_68(Smoke::Stack x) {
        // double mRotation
        x[0].s_double = this->QCPItemText::mRotation;
    }
    void x_69(Smoke::Stack x) {
        // double mRotation=
        this->QCPItemText::mRotation = (double)x[1].s_double;
    }
    void x_70(Smoke::Stack x) {
        // QMargins mPadding
        x[0].s_class = (void*)&this->QCPItemText::mPadding;
    }
    void x_71(Smoke::Stack x) {
        // QMargins mPadding=
        this->QCPItemText::mPadding = *(const QMargins*)x[1].s_class;
    }
    static void x_72(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemText::aiTopLeft;
    }
    static void x_73(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemText::aiTop;
    }
    static void x_74(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemText::aiTopRight;
    }
    static void x_75(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemText::aiRight;
    }
    static void x_76(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemText::aiBottomRight;
    }
    static void x_77(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemText::aiBottom;
    }
    static void x_78(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemText::aiBottomLeft;
    }
    static void x_79(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemText::aiLeft;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1587, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemText::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1588, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemText::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1593, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemText::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1620, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemText::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1621, (void*)this, x)) return;
        this->QCPItemText::draw(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1622, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPItemText::anchorPixelPoint(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 76: //QCPItemText::AnchorIndex
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPItemText::AnchorIndex;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPItemText::AnchorIndex*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPItemText::AnchorIndex*)xdata = (QCPItemText::AnchorIndex)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPItemText::AnchorIndex*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPItemText() { this->_binding->deleted(34, (void*)this); }
};
void xenum_QCPItemText(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPItemText::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPItemText(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemText *xself = (x_QCPItemText*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemText::x_3(args);	break;
        case 4: x_QCPItemText::x_4(args);	break;
        case 5: x_QCPItemText::x_5(args);	break;
        case 6: x_QCPItemText::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemText::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: x_QCPItemText::x_42(args);	break;
        case 43: x_QCPItemText::x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: x_QCPItemText::x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: x_QCPItemText::x_72(args);	break;
        case 73: x_QCPItemText::x_73(args);	break;
        case 74: x_QCPItemText::x_74(args);	break;
        case 75: x_QCPItemText::x_75(args);	break;
        case 76: x_QCPItemText::x_76(args);	break;
        case 77: x_QCPItemText::x_77(args);	break;
        case 78: x_QCPItemText::x_78(args);	break;
        case 79: x_QCPItemText::x_79(args);	break;
        case 80: delete (QCPItemText*)xself;	break;
    }
}
class x_QCPItemTracer : public QCPItemTracer, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemTracer*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemTracer*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemTracer*>(this))) {
            void* xret = this->QCPItemTracer::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemTracer::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemTracer::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemTracer::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemTracer::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemTracer*>(this))) {
            int xret = this->QCPItemTracer::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemTracer* QCPItemTracer(QCustomPlot*)
        x_QCPItemTracer* xret = new x_QCPItemTracer((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemTracer(QCustomPlot* x1) : QCPItemTracer(x1) {}
    void x_9(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_10(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_11(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_12(Smoke::Stack x) {
        // QBrush selectedBrush() const
        QBrush xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::selectedBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_13(Smoke::Stack x) {
        // double size() const
        double xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::size();
        x[0].s_double = xret;
    }
    void x_14(Smoke::Stack x) {
        // QCPItemTracer::TracerStyle style() const
        QCPItemTracer::TracerStyle xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::style();
        x[0].s_enum = xret;
    }
    void x_15(Smoke::Stack x) {
        // QCPGraph* graph() const
        QCPGraph* xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::graph();
        x[0].s_class = (void*)xret;
    }
    void x_16(Smoke::Stack x) {
        // double graphKey() const
        double xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::graphKey();
        x[0].s_double = xret;
    }
    void x_17(Smoke::Stack x) {
        // bool interpolating() const
        bool xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::interpolating();
        x[0].s_bool = xret;
    }
    void x_18(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemTracer::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemTracer::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QCPItemTracer::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setSelectedBrush(const QBrush&)
        this->QCPItemTracer::setSelectedBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setSize(double)
        this->QCPItemTracer::setSize((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setStyle(QCPItemTracer::TracerStyle)
        this->QCPItemTracer::setStyle((QCPItemTracer::TracerStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setGraph(QCPGraph*)
        this->QCPItemTracer::setGraph((QCPGraph*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setGraphKey(double)
        this->QCPItemTracer::setGraphKey((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setInterpolating(bool)
        this->QCPItemTracer::setInterpolating((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemTracer*>(this))) {
            double xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemTracer*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_28(Smoke::Stack x) {
        // void updatePosition()
        this->QCPItemTracer::updatePosition();
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemTracer*>(this))) {
            this->QCPItemTracer::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_30(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_31(Smoke::Stack x) {
        // QBrush mainBrush() const
        QBrush xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::mainBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    static void x_32(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemTracer::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_33(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemTracer::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_34(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemTracer*)this)->QCPItemTracer::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_35(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemTracer::staticMetaObject;
    }
    void x_36(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemTracer::mPen;
    }
    void x_37(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemTracer::mPen = *(const QPen*)x[1].s_class;
    }
    void x_38(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemTracer::mSelectedPen;
    }
    void x_39(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemTracer::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    void x_40(Smoke::Stack x) {
        // QBrush mBrush
        x[0].s_class = (void*)&this->QCPItemTracer::mBrush;
    }
    void x_41(Smoke::Stack x) {
        // QBrush mBrush=
        this->QCPItemTracer::mBrush = *(const QBrush*)x[1].s_class;
    }
    void x_42(Smoke::Stack x) {
        // QBrush mSelectedBrush
        x[0].s_class = (void*)&this->QCPItemTracer::mSelectedBrush;
    }
    void x_43(Smoke::Stack x) {
        // QBrush mSelectedBrush=
        this->QCPItemTracer::mSelectedBrush = *(const QBrush*)x[1].s_class;
    }
    void x_44(Smoke::Stack x) {
        // double mSize
        x[0].s_double = this->QCPItemTracer::mSize;
    }
    void x_45(Smoke::Stack x) {
        // double mSize=
        this->QCPItemTracer::mSize = (double)x[1].s_double;
    }
    void x_46(Smoke::Stack x) {
        // QCPItemTracer::TracerStyle mStyle
        x[0].s_enum = this->QCPItemTracer::mStyle;
    }
    void x_47(Smoke::Stack x) {
        // QCPItemTracer::TracerStyle mStyle=
        this->QCPItemTracer::mStyle = (QCPItemTracer::TracerStyle)x[1].s_enum;
    }
    void x_48(Smoke::Stack x) {
        // QCPGraph* mGraph
        x[0].s_class = (void*)this->QCPItemTracer::mGraph;
    }
    void x_49(Smoke::Stack x) {
        // QCPGraph* mGraph=
        this->QCPItemTracer::mGraph = (QCPGraph*)x[1].s_class;
    }
    void x_50(Smoke::Stack x) {
        // double mGraphKey
        x[0].s_double = this->QCPItemTracer::mGraphKey;
    }
    void x_51(Smoke::Stack x) {
        // double mGraphKey=
        this->QCPItemTracer::mGraphKey = (double)x[1].s_double;
    }
    void x_52(Smoke::Stack x) {
        // bool mInterpolating
        x[0].s_bool = this->QCPItemTracer::mInterpolating;
    }
    void x_53(Smoke::Stack x) {
        // bool mInterpolating=
        this->QCPItemTracer::mInterpolating = (bool)x[1].s_bool;
    }
    static void x_54(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemTracer::tsNone;
    }
    static void x_55(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemTracer::tsPlus;
    }
    static void x_56(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemTracer::tsCrosshair;
    }
    static void x_57(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemTracer::tsCircle;
    }
    static void x_58(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemTracer::tsSquare;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1667, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemTracer::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1668, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemTracer::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1673, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemTracer::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1693, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemTracer::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1695, (void*)this, x)) return;
        this->QCPItemTracer::draw(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(31, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::anchorPixelPoint(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 78: //QCPItemTracer::TracerStyle
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPItemTracer::TracerStyle;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPItemTracer::TracerStyle*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPItemTracer::TracerStyle*)xdata = (QCPItemTracer::TracerStyle)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPItemTracer::TracerStyle*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPItemTracer() { this->_binding->deleted(35, (void*)this); }
};
void xenum_QCPItemTracer(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPItemTracer::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPItemTracer(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemTracer *xself = (x_QCPItemTracer*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemTracer::x_3(args);	break;
        case 4: x_QCPItemTracer::x_4(args);	break;
        case 5: x_QCPItemTracer::x_5(args);	break;
        case 6: x_QCPItemTracer::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemTracer::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: x_QCPItemTracer::x_32(args);	break;
        case 33: x_QCPItemTracer::x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: x_QCPItemTracer::x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: x_QCPItemTracer::x_54(args);	break;
        case 55: x_QCPItemTracer::x_55(args);	break;
        case 56: x_QCPItemTracer::x_56(args);	break;
        case 57: x_QCPItemTracer::x_57(args);	break;
        case 58: x_QCPItemTracer::x_58(args);	break;
        case 59: delete (QCPItemTracer*)xself;	break;
    }
}
class x_QCPLayer : public QCPLayer, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayer*>(this))) {
            const QMetaObject* xret = ((const x_QCPLayer*)this)->QCPLayer::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPLayer*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayer*>(this))) {
            void* xret = this->QCPLayer::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPLayer::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPLayer::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPLayer::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPLayer::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayer*>(this))) {
            int xret = this->QCPLayer::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPLayer* QCPLayer(QCustomPlot*, const QString&)
        x_QCPLayer* xret = new x_QCPLayer((QCustomPlot*)x[1].s_class,*(const QString*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLayer(QCustomPlot* x1, const QString& x2) : QCPLayer(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QCustomPlot* parentPlot() const
        QCustomPlot* xret = ((const x_QCPLayer*)this)->QCPLayer::parentPlot();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QString name() const
        QString xret = ((const x_QCPLayer*)this)->QCPLayer::name();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_11(Smoke::Stack x) {
        // int index() const
        int xret = ((const x_QCPLayer*)this)->QCPLayer::index();
        x[0].s_int = xret;
    }
    void x_12(Smoke::Stack x) {
        // QList<QCPLayerable*> children() const
        QList<QCPLayerable*> xret = ((const x_QCPLayer*)this)->QCPLayer::children();
        x[0].s_class = (void*)new QList<QCPLayerable*>(xret);
    }
    void x_13(Smoke::Stack x) {
        // bool visible() const
        bool xret = ((const x_QCPLayer*)this)->QCPLayer::visible();
        x[0].s_bool = xret;
    }
    void x_14(Smoke::Stack x) {
        // void setVisible(bool)
        this->QCPLayer::setVisible((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void addChild(QCPLayerable*, bool)
        this->QCPLayer::addChild((QCPLayerable*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void removeChild(QCPLayerable*)
        this->QCPLayer::removeChild((QCPLayerable*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_17(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPLayer::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_18(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPLayer::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_19(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPLayer::staticMetaObject;
    }
    void x_20(Smoke::Stack x) {
        // QCustomPlot* mParentPlot
        x[0].s_class = (void*)this->QCPLayer::mParentPlot;
    }
    void x_21(Smoke::Stack x) {
        // QCustomPlot* mParentPlot=
        this->QCPLayer::mParentPlot = (QCustomPlot*)x[1].s_class;
    }
    void x_22(Smoke::Stack x) {
        // QString mName
        x[0].s_class = (void*)&this->QCPLayer::mName;
    }
    void x_23(Smoke::Stack x) {
        // QString mName=
        this->QCPLayer::mName = *(const QString*)x[1].s_class;
    }
    void x_24(Smoke::Stack x) {
        // int mIndex
        x[0].s_int = this->QCPLayer::mIndex;
    }
    void x_25(Smoke::Stack x) {
        // int mIndex=
        this->QCPLayer::mIndex = (int)x[1].s_int;
    }
    void x_26(Smoke::Stack x) {
        // QList<QCPLayerable*> mChildren
        x[0].s_class = (void*)&this->QCPLayer::mChildren;
    }
    void x_27(Smoke::Stack x) {
        // QList<QCPLayerable*> mChildren=
        this->QCPLayer::mChildren = *(const QList<QCPLayerable*>*)x[1].s_class;
    }
    void x_28(Smoke::Stack x) {
        // bool mVisible
        x[0].s_bool = this->QCPLayer::mVisible;
    }
    void x_29(Smoke::Stack x) {
        // bool mVisible=
        this->QCPLayer::mVisible = (bool)x[1].s_bool;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1726, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPLayer::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1727, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPLayer::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1732, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayer::qt_metacall(x1, x2, x3);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPLayer() { this->_binding->deleted(36, (void*)this); }
};
void xcall_QCPLayer(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPLayer *xself = (x_QCPLayer*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPLayer::x_3(args);	break;
        case 4: x_QCPLayer::x_4(args);	break;
        case 5: x_QCPLayer::x_5(args);	break;
        case 6: x_QCPLayer::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPLayer::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: x_QCPLayer::x_17(args);	break;
        case 18: x_QCPLayer::x_18(args);	break;
        case 19: x_QCPLayer::x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: delete (QCPLayer*)xself;	break;
    }
}
class x_QCPLayerable : public QCPLayerable, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            const QMetaObject* xret = ((const x_QCPLayerable*)this)->QCPLayerable::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPLayerable*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            void* xret = this->QCPLayerable::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPLayerable::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPLayerable::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPLayerable::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPLayerable::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            int xret = this->QCPLayerable::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPLayerable* QCPLayerable(QCustomPlot*, QString, QCPLayerable*)
        x_QCPLayerable* xret = new x_QCPLayerable((QCustomPlot*)x[1].s_class,*(QString*)x[2].s_class,(QCPLayerable*)x[3].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLayerable(QCustomPlot* x1, QString x2, QCPLayerable* x3) : QCPLayerable(x1, x2, x3) {}
    void x_9(Smoke::Stack x) {
        // bool visible() const
        bool xret = ((const x_QCPLayerable*)this)->QCPLayerable::visible();
        x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
        // QCustomPlot* parentPlot() const
        QCustomPlot* xret = ((const x_QCPLayerable*)this)->QCPLayerable::parentPlot();
        x[0].s_class = (void*)xret;
    }
    void x_11(Smoke::Stack x) {
        // QCPLayerable* parentLayerable() const
        QCPLayerable* xret = ((const x_QCPLayerable*)this)->QCPLayerable::parentLayerable();
        x[0].s_class = (void*)xret;
    }
    void x_12(Smoke::Stack x) {
        // QCPLayer* layer() const
        QCPLayer* xret = ((const x_QCPLayerable*)this)->QCPLayerable::layer();
        x[0].s_class = (void*)xret;
    }
    void x_13(Smoke::Stack x) {
        // bool antialiased() const
        bool xret = ((const x_QCPLayerable*)this)->QCPLayerable::antialiased();
        x[0].s_bool = xret;
    }
    void x_14(Smoke::Stack x) {
        // void setVisible(bool)
        this->QCPLayerable::setVisible((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // bool setLayer(QCPLayer*)
        bool xret = this->QCPLayerable::setLayer((QCPLayer*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) {
        // bool setLayer(const QString&)
        bool xret = this->QCPLayerable::setLayer(*(const QString*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
        // void setAntialiased(bool)
        this->QCPLayerable::setAntialiased((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            double xret = ((const x_QCPLayerable*)this)->QCPLayerable::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPLayerable*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_19(Smoke::Stack x) {
        // bool realVisibility() const
        bool xret = ((const x_QCPLayerable*)this)->QCPLayerable::realVisibility();
        x[0].s_bool = xret;
    }
    void x_20(Smoke::Stack x) {
        // void layerChanged(QCPLayer*)
        this->QCPLayerable::layerChanged((QCPLayer*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // virtual void parentPlotInitialized(QCustomPlot*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            this->QCPLayerable::parentPlotInitialized((QCustomPlot*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->parentPlotInitialized((QCustomPlot*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_22(Smoke::Stack x) {
        // virtual QCP::Interaction selectionCategory() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            QCP::Interaction xret = ((const x_QCPLayerable*)this)->QCPLayerable::selectionCategory();
            x[0].s_enum = xret;
        } else {
            QCP::Interaction xret = ((const x_QCPLayerable*)this)->selectionCategory();
            x[0].s_enum = xret;
        }
    }
    void x_23(Smoke::Stack x) {
        // virtual QRect clipRect() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            QRect xret = ((const x_QCPLayerable*)this)->QCPLayerable::clipRect();
            x[0].s_class = (void*)new QRect(xret);
        } else {
            QRect xret = ((const x_QCPLayerable*)this)->clipRect();
            x[0].s_class = (void*)new QRect(xret);
        }
    }
    void x_24(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const = 0
        ((const x_QCPLayerable*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // virtual void draw(QCPPainter*) = 0
        this->draw((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // virtual void selectEvent(QMouseEvent*, bool, const QVariant&, bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            this->QCPLayerable::selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_27(Smoke::Stack x) {
        // virtual void deselectEvent(bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayerable*>(this))) {
            this->QCPLayerable::deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_28(Smoke::Stack x) {
        // void initializeParentPlot(QCustomPlot*)
        this->QCPLayerable::initializeParentPlot((QCustomPlot*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void setParentLayerable(QCPLayerable*)
        this->QCPLayerable::setParentLayerable((QCPLayerable*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // bool moveToLayer(QCPLayer*, bool)
        bool xret = this->QCPLayerable::moveToLayer((QCPLayer*)x[1].s_class,(bool)x[2].s_bool);
        x[0].s_bool = xret;
    }
    void x_31(Smoke::Stack x) {
        // void applyAntialiasingHint(QCPPainter*, bool, QCP::AntialiasedElement) const
        ((const x_QCPLayerable*)this)->QCPLayerable::applyAntialiasingHint((QCPPainter*)x[1].s_class,(bool)x[2].s_bool,(QCP::AntialiasedElement)x[3].s_enum);
        (void)x; // noop (for compiler warning)
    }
    static void x_32(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPLayerable::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_33(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPLayerable::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_34(Smoke::Stack x) {
        // QCPLayerable* QCPLayerable(QCustomPlot*)
        x_QCPLayerable* xret = new x_QCPLayerable((QCustomPlot*)x[1].s_class,(QString)QString(),(QCPLayerable*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_35(Smoke::Stack x) {
        // QCPLayerable* QCPLayerable(QCustomPlot*, QString)
        x_QCPLayerable* xret = new x_QCPLayerable((QCustomPlot*)x[1].s_class,*(QString*)x[2].s_class,(QCPLayerable*)0);
        x[0].s_class = (void*)xret;
    }
    void x_36(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPLayerable*)this)->QCPLayerable::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_37(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPLayerable::staticMetaObject;
    }
    void x_38(Smoke::Stack x) {
        // bool mVisible
        x[0].s_bool = this->QCPLayerable::mVisible;
    }
    void x_39(Smoke::Stack x) {
        // bool mVisible=
        this->QCPLayerable::mVisible = (bool)x[1].s_bool;
    }
    void x_40(Smoke::Stack x) {
        // QCustomPlot* mParentPlot
        x[0].s_class = (void*)this->QCPLayerable::mParentPlot;
    }
    void x_41(Smoke::Stack x) {
        // QCustomPlot* mParentPlot=
        this->QCPLayerable::mParentPlot = (QCustomPlot*)x[1].s_class;
    }
    void x_42(Smoke::Stack x) {
        // QPointer<QCPLayerable> mParentLayerable
        x[0].s_class = (void*)&this->QCPLayerable::mParentLayerable;
    }
    void x_43(Smoke::Stack x) {
        // QPointer<QCPLayerable> mParentLayerable=
        this->QCPLayerable::mParentLayerable = *(const QPointer<QCPLayerable>*)x[1].s_class;
    }
    void x_44(Smoke::Stack x) {
        // QCPLayer* mLayer
        x[0].s_class = (void*)this->QCPLayerable::mLayer;
    }
    void x_45(Smoke::Stack x) {
        // QCPLayer* mLayer=
        this->QCPLayerable::mLayer = (QCPLayer*)x[1].s_class;
    }
    void x_46(Smoke::Stack x) {
        // bool mAntialiased
        x[0].s_bool = this->QCPLayerable::mAntialiased;
    }
    void x_47(Smoke::Stack x) {
        // bool mAntialiased=
        this->QCPLayerable::mAntialiased = (bool)x[1].s_bool;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1756, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPLayerable::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1757, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPLayerable::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1762, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayerable::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1773, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLayerable::selectTest(x1, x2, x3);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        this->_binding->callMethod(1779, (void*)this, x, true /*pure virtual*/);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        this->_binding->callMethod(1780, (void*)this, x, true /*pure virtual*/);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(1781, (void*)this, x)) return;
        this->QCPLayerable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1782, (void*)this, x)) return;
        this->QCPLayerable::deselectEvent(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPLayerable() { this->_binding->deleted(37, (void*)this); }
};
void xcall_QCPLayerable(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPLayerable *xself = (x_QCPLayerable*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPLayerable::x_3(args);	break;
        case 4: x_QCPLayerable::x_4(args);	break;
        case 5: x_QCPLayerable::x_5(args);	break;
        case 6: x_QCPLayerable::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPLayerable::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: x_QCPLayerable::x_32(args);	break;
        case 33: x_QCPLayerable::x_33(args);	break;
        case 34: x_QCPLayerable::x_34(args);	break;
        case 35: x_QCPLayerable::x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: x_QCPLayerable::x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: delete (QCPLayerable*)xself;	break;
    }
}

}
