//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPAbstractItem : public QCPAbstractItem, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            const QMetaObject* xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPAbstractItem*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            void* xret = this->QCPAbstractItem::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPAbstractItem::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPAbstractItem::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPAbstractItem::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPAbstractItem::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            int xret = this->QCPAbstractItem::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPAbstractItem* QCPAbstractItem(QCustomPlot*)
        x_QCPAbstractItem* xret = new x_QCPAbstractItem((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPAbstractItem(QCustomPlot* x1) : QCPAbstractItem(x1) {}
    void x_9(Smoke::Stack x) {
        // bool clipToAxisRect() const
        bool xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::clipToAxisRect();
        x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
        // QCPAxisRect* clipAxisRect() const
        QCPAxisRect* xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::clipAxisRect();
        x[0].s_class = (void*)xret;
    }
    void x_11(Smoke::Stack x) {
        // bool selectable() const
        bool xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::selectable();
        x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
        // bool selected() const
        bool xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::selected();
        x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) {
        // void setClipToAxisRect(bool)
        this->QCPAbstractItem::setClipToAxisRect((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setClipAxisRect(QCPAxisRect*)
        this->QCPAbstractItem::setClipAxisRect((QCPAxisRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setSelectable(bool)
        this->QCPAbstractItem::setSelectable((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setSelected(bool)
        this->QCPAbstractItem::setSelected((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const = 0
        double xret = ((const x_QCPAbstractItem*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
        x[0].s_double = xret;
    }
    void x_18(Smoke::Stack x) {
        // QList<QCPItemPosition*> positions() const
        QList<QCPItemPosition*> xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::positions();
        x[0].s_class = (void*)new QList<QCPItemPosition*>(xret);
    }
    void x_19(Smoke::Stack x) {
        // QList<QCPItemAnchor*> anchors() const
        QList<QCPItemAnchor*> xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::anchors();
        x[0].s_class = (void*)new QList<QCPItemAnchor*>(xret);
    }
    void x_20(Smoke::Stack x) {
        // QCPItemPosition* position(const QString&) const
        QCPItemPosition* xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::position(*(const QString*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_21(Smoke::Stack x) {
        // QCPItemAnchor* anchor(const QString&) const
        QCPItemAnchor* xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::anchor(*(const QString*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_22(Smoke::Stack x) {
        // bool hasAnchor(const QString&) const
        bool xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::hasAnchor(*(const QString*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_23(Smoke::Stack x) {
        // void selectionChanged(bool)
        this->QCPAbstractItem::selectionChanged((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void selectableChanged(bool)
        this->QCPAbstractItem::selectableChanged((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // virtual QCP::Interaction selectionCategory() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            QCP::Interaction xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::selectionCategory();
            x[0].s_enum = xret;
        } else {
            QCP::Interaction xret = ((const x_QCPAbstractItem*)this)->selectionCategory();
            x[0].s_enum = xret;
        }
    }
    void x_26(Smoke::Stack x) {
        // virtual QRect clipRect() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            QRect xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::clipRect();
            x[0].s_class = (void*)new QRect(xret);
        } else {
            QRect xret = ((const x_QCPAbstractItem*)this)->clipRect();
            x[0].s_class = (void*)new QRect(xret);
        }
    }
    void x_27(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            ((const x_QCPAbstractItem*)this)->QCPAbstractItem::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPAbstractItem*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_28(Smoke::Stack x) {
        // virtual void draw(QCPPainter*) = 0
        this->draw((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // virtual void selectEvent(QMouseEvent*, bool, const QVariant&, bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            this->QCPAbstractItem::selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_30(Smoke::Stack x) {
        // virtual void deselectEvent(bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            this->QCPAbstractItem::deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_31(Smoke::Stack x) {
        // virtual QPointF anchorPixelPoint(int) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractItem*>(this))) {
            QPointF xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        } else {
            QPointF xret = ((const x_QCPAbstractItem*)this)->anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        }
    }
    void x_32(Smoke::Stack x) {
        // double distSqrToLine(const QPointF&, const QPointF&, const QPointF&) const
        double xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::distSqrToLine(*(const QPointF*)x[1].s_class,*(const QPointF*)x[2].s_class,*(const QPointF*)x[3].s_class);
        x[0].s_double = xret;
    }
    void x_33(Smoke::Stack x) {
        // double rectSelectTest(const QRectF&, const QPointF&, bool) const
        double xret = ((const x_QCPAbstractItem*)this)->QCPAbstractItem::rectSelectTest(*(const QRectF*)x[1].s_class,*(const QPointF*)x[2].s_class,(bool)x[3].s_bool);
        x[0].s_double = xret;
    }
    void x_34(Smoke::Stack x) {
        // QCPItemPosition* createPosition(const QString&)
        QCPItemPosition* xret = this->QCPAbstractItem::createPosition(*(const QString*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_35(Smoke::Stack x) {
        // QCPItemAnchor* createAnchor(const QString&, int)
        QCPItemAnchor* xret = this->QCPAbstractItem::createAnchor(*(const QString*)x[1].s_class,(int)x[2].s_int);
        x[0].s_class = (void*)xret;
    }
    static void x_36(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPAbstractItem::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_37(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPAbstractItem::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_38(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPAbstractItem*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_39(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPAbstractItem::staticMetaObject;
    }
    void x_40(Smoke::Stack x) {
        // bool mClipToAxisRect
        x[0].s_bool = this->QCPAbstractItem::mClipToAxisRect;
    }
    void x_41(Smoke::Stack x) {
        // bool mClipToAxisRect=
        this->QCPAbstractItem::mClipToAxisRect = (bool)x[1].s_bool;
    }
    void x_42(Smoke::Stack x) {
        // QPointer<QCPAxisRect> mClipAxisRect
        x[0].s_class = (void*)&this->QCPAbstractItem::mClipAxisRect;
    }
    void x_43(Smoke::Stack x) {
        // QPointer<QCPAxisRect> mClipAxisRect=
        this->QCPAbstractItem::mClipAxisRect = *(const QPointer<QCPAxisRect>*)x[1].s_class;
    }
    void x_44(Smoke::Stack x) {
        // QList<QCPItemPosition*> mPositions
        x[0].s_class = (void*)&this->QCPAbstractItem::mPositions;
    }
    void x_45(Smoke::Stack x) {
        // QList<QCPItemPosition*> mPositions=
        this->QCPAbstractItem::mPositions = *(const QList<QCPItemPosition*>*)x[1].s_class;
    }
    void x_46(Smoke::Stack x) {
        // QList<QCPItemAnchor*> mAnchors
        x[0].s_class = (void*)&this->QCPAbstractItem::mAnchors;
    }
    void x_47(Smoke::Stack x) {
        // QList<QCPItemAnchor*> mAnchors=
        this->QCPAbstractItem::mAnchors = *(const QList<QCPItemAnchor*>*)x[1].s_class;
    }
    void x_48(Smoke::Stack x) {
        // bool mSelectable
        x[0].s_bool = this->QCPAbstractItem::mSelectable;
    }
    void x_49(Smoke::Stack x) {
        // bool mSelectable=
        this->QCPAbstractItem::mSelectable = (bool)x[1].s_bool;
    }
    void x_50(Smoke::Stack x) {
        // bool mSelected
        x[0].s_bool = this->QCPAbstractItem::mSelected;
    }
    void x_51(Smoke::Stack x) {
        // bool mSelected=
        this->QCPAbstractItem::mSelected = (bool)x[1].s_bool;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPAbstractItem::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPAbstractItem::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(7, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPAbstractItem::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        this->_binding->callMethod(17, (void*)this, x, true /*pure virtual*/);
        return (double)x[0].s_double;
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        this->_binding->callMethod(28, (void*)this, x, true /*pure virtual*/);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(31, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::anchorPixelPoint(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPAbstractItem() { this->_binding->deleted(4, (void*)this); }
};
void xcall_QCPAbstractItem(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPAbstractItem *xself = (x_QCPAbstractItem*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPAbstractItem::x_3(args);	break;
        case 4: x_QCPAbstractItem::x_4(args);	break;
        case 5: x_QCPAbstractItem::x_5(args);	break;
        case 6: x_QCPAbstractItem::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPAbstractItem::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: x_QCPAbstractItem::x_36(args);	break;
        case 37: x_QCPAbstractItem::x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: x_QCPAbstractItem::x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: delete (QCPAbstractItem*)xself;	break;
    }
}
class x_QCPAbstractLegendItem : public QCPAbstractLegendItem, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            const QMetaObject* xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPAbstractLegendItem*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            void* xret = this->QCPAbstractLegendItem::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPAbstractLegendItem::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPAbstractLegendItem::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPAbstractLegendItem::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPAbstractLegendItem::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            int xret = this->QCPAbstractLegendItem::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPAbstractLegendItem* QCPAbstractLegendItem(QCPLegend*)
        x_QCPAbstractLegendItem* xret = new x_QCPAbstractLegendItem((QCPLegend*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPAbstractLegendItem(QCPLegend* x1) : QCPAbstractLegendItem(x1) {}
    void x_9(Smoke::Stack x) {
        // QCPLegend* parentLegend() const
        QCPLegend* xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::parentLegend();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QFont font() const
        QFont xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::font();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_11(Smoke::Stack x) {
        // QColor textColor() const
        QColor xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::textColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_12(Smoke::Stack x) {
        // QFont selectedFont() const
        QFont xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::selectedFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_13(Smoke::Stack x) {
        // QColor selectedTextColor() const
        QColor xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::selectedTextColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_14(Smoke::Stack x) {
        // bool selectable() const
        bool xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::selectable();
        x[0].s_bool = xret;
    }
    void x_15(Smoke::Stack x) {
        // bool selected() const
        bool xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::selected();
        x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) {
        // void setFont(const QFont&)
        this->QCPAbstractLegendItem::setFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setTextColor(const QColor&)
        this->QCPAbstractLegendItem::setTextColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setSelectedFont(const QFont&)
        this->QCPAbstractLegendItem::setSelectedFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setSelectedTextColor(const QColor&)
        this->QCPAbstractLegendItem::setSelectedTextColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setSelectable(bool)
        this->QCPAbstractLegendItem::setSelectable((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setSelected(bool)
        this->QCPAbstractLegendItem::setSelected((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            double xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPAbstractLegendItem*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_23(Smoke::Stack x) {
        // void selectionChanged(bool)
        this->QCPAbstractLegendItem::selectionChanged((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void selectableChanged(bool)
        this->QCPAbstractLegendItem::selectableChanged((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // virtual QCP::Interaction selectionCategory() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            QCP::Interaction xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::selectionCategory();
            x[0].s_enum = xret;
        } else {
            QCP::Interaction xret = ((const x_QCPAbstractLegendItem*)this)->selectionCategory();
            x[0].s_enum = xret;
        }
    }
    void x_26(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPAbstractLegendItem*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_27(Smoke::Stack x) {
        // virtual QRect clipRect() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            QRect xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::clipRect();
            x[0].s_class = (void*)new QRect(xret);
        } else {
            QRect xret = ((const x_QCPAbstractLegendItem*)this)->clipRect();
            x[0].s_class = (void*)new QRect(xret);
        }
    }
    void x_28(Smoke::Stack x) {
        // virtual void draw(QCPPainter*) = 0
        this->draw((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // virtual void selectEvent(QMouseEvent*, bool, const QVariant&, bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            this->QCPAbstractLegendItem::selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_30(Smoke::Stack x) {
        // virtual void deselectEvent(bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractLegendItem*>(this))) {
            this->QCPAbstractLegendItem::deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    static void x_31(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPAbstractLegendItem::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_32(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPAbstractLegendItem::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_33(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPAbstractLegendItem*)this)->QCPAbstractLegendItem::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_34(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPAbstractLegendItem::staticMetaObject;
    }
    void x_35(Smoke::Stack x) {
        // QCPLegend* mParentLegend
        x[0].s_class = (void*)this->QCPAbstractLegendItem::mParentLegend;
    }
    void x_36(Smoke::Stack x) {
        // QCPLegend* mParentLegend=
        this->QCPAbstractLegendItem::mParentLegend = (QCPLegend*)x[1].s_class;
    }
    void x_37(Smoke::Stack x) {
        // QFont mFont
        x[0].s_class = (void*)&this->QCPAbstractLegendItem::mFont;
    }
    void x_38(Smoke::Stack x) {
        // QFont mFont=
        this->QCPAbstractLegendItem::mFont = *(const QFont*)x[1].s_class;
    }
    void x_39(Smoke::Stack x) {
        // QColor mTextColor
        x[0].s_class = (void*)&this->QCPAbstractLegendItem::mTextColor;
    }
    void x_40(Smoke::Stack x) {
        // QColor mTextColor=
        this->QCPAbstractLegendItem::mTextColor = *(const QColor*)x[1].s_class;
    }
    void x_41(Smoke::Stack x) {
        // QFont mSelectedFont
        x[0].s_class = (void*)&this->QCPAbstractLegendItem::mSelectedFont;
    }
    void x_42(Smoke::Stack x) {
        // QFont mSelectedFont=
        this->QCPAbstractLegendItem::mSelectedFont = *(const QFont*)x[1].s_class;
    }
    void x_43(Smoke::Stack x) {
        // QColor mSelectedTextColor
        x[0].s_class = (void*)&this->QCPAbstractLegendItem::mSelectedTextColor;
    }
    void x_44(Smoke::Stack x) {
        // QColor mSelectedTextColor=
        this->QCPAbstractLegendItem::mSelectedTextColor = *(const QColor*)x[1].s_class;
    }
    void x_45(Smoke::Stack x) {
        // bool mSelectable
        x[0].s_bool = this->QCPAbstractLegendItem::mSelectable;
    }
    void x_46(Smoke::Stack x) {
        // bool mSelectable=
        this->QCPAbstractLegendItem::mSelectable = (bool)x[1].s_bool;
    }
    void x_47(Smoke::Stack x) {
        // bool mSelected
        x[0].s_bool = this->QCPAbstractLegendItem::mSelected;
    }
    void x_48(Smoke::Stack x) {
        // bool mSelected=
        this->QCPAbstractLegendItem::mSelected = (bool)x[1].s_bool;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(53, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPAbstractLegendItem::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(54, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPAbstractLegendItem::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(59, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPAbstractLegendItem::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(74, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPAbstractLegendItem::selectTest(x1, x2, x3);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(77, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractLegendItem::selectionCategory();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(78, (void*)this, x)) return;
        this->QCPAbstractLegendItem::applyDefaultAntialiasingHint(x1);
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(79, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractLegendItem::clipRect();
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        this->_binding->callMethod(80, (void*)this, x, true /*pure virtual*/);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(81, (void*)this, x)) return;
        this->QCPAbstractLegendItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(82, (void*)this, x)) return;
        this->QCPAbstractLegendItem::deselectEvent(x1);
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1858, (void*)this, x)) return;
        this->QCPLayoutElement::update(x1);
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1859, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1860, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::maximumSizeHint();
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1861, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::elements(x1);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1864, (void*)this, x)) return;
        this->QCPLayoutElement::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1865, (void*)this, x)) return;
        this->QCPLayoutElement::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1866, (void*)this, x)) return;
        this->QCPLayoutElement::mouseReleaseEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1868, (void*)this, x)) return;
        this->QCPLayoutElement::wheelEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPAbstractLegendItem() { this->_binding->deleted(5, (void*)this); }
};
void xcall_QCPAbstractLegendItem(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPAbstractLegendItem *xself = (x_QCPAbstractLegendItem*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPAbstractLegendItem::x_3(args);	break;
        case 4: x_QCPAbstractLegendItem::x_4(args);	break;
        case 5: x_QCPAbstractLegendItem::x_5(args);	break;
        case 6: x_QCPAbstractLegendItem::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPAbstractLegendItem::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: x_QCPAbstractLegendItem::x_31(args);	break;
        case 32: x_QCPAbstractLegendItem::x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: x_QCPAbstractLegendItem::x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: delete (QCPAbstractLegendItem*)xself;	break;
    }
}
class x_QCPAbstractPlottable : public QCPAbstractPlottable, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            const QMetaObject* xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPAbstractPlottable*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            void* xret = this->QCPAbstractPlottable::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPAbstractPlottable::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPAbstractPlottable::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPAbstractPlottable::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPAbstractPlottable::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            int xret = this->QCPAbstractPlottable::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPAbstractPlottable* QCPAbstractPlottable(QCPAxis*, QCPAxis*)
        x_QCPAbstractPlottable* xret = new x_QCPAbstractPlottable((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPAbstractPlottable(QCPAxis* x1, QCPAxis* x2) : QCPAbstractPlottable(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QString name() const
        QString xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::name();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_10(Smoke::Stack x) {
        // bool antialiasedFill() const
        bool xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::antialiasedFill();
        x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) {
        // bool antialiasedScatters() const
        bool xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::antialiasedScatters();
        x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
        // bool antialiasedErrorBars() const
        bool xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::antialiasedErrorBars();
        x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_14(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_15(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_16(Smoke::Stack x) {
        // QBrush selectedBrush() const
        QBrush xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::selectedBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_17(Smoke::Stack x) {
        // QCPAxis* keyAxis() const
        QCPAxis* xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::keyAxis();
        x[0].s_class = (void*)xret;
    }
    void x_18(Smoke::Stack x) {
        // QCPAxis* valueAxis() const
        QCPAxis* xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::valueAxis();
        x[0].s_class = (void*)xret;
    }
    void x_19(Smoke::Stack x) {
        // bool selectable() const
        bool xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::selectable();
        x[0].s_bool = xret;
    }
    void x_20(Smoke::Stack x) {
        // bool selected() const
        bool xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::selected();
        x[0].s_bool = xret;
    }
    void x_21(Smoke::Stack x) {
        // void setName(const QString&)
        this->QCPAbstractPlottable::setName(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setAntialiasedFill(bool)
        this->QCPAbstractPlottable::setAntialiasedFill((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setAntialiasedScatters(bool)
        this->QCPAbstractPlottable::setAntialiasedScatters((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setAntialiasedErrorBars(bool)
        this->QCPAbstractPlottable::setAntialiasedErrorBars((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPAbstractPlottable::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPAbstractPlottable::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QCPAbstractPlottable::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void setSelectedBrush(const QBrush&)
        this->QCPAbstractPlottable::setSelectedBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void setKeyAxis(QCPAxis*)
        this->QCPAbstractPlottable::setKeyAxis((QCPAxis*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void setValueAxis(QCPAxis*)
        this->QCPAbstractPlottable::setValueAxis((QCPAxis*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void setSelectable(bool)
        this->QCPAbstractPlottable::setSelectable((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void setSelected(bool)
        this->QCPAbstractPlottable::setSelected((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // virtual void clearData() = 0
        this->clearData();
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const = 0
        double xret = ((const x_QCPAbstractPlottable*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
        x[0].s_double = xret;
    }
    void x_35(Smoke::Stack x) {
        // virtual bool addToLegend()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            bool xret = this->QCPAbstractPlottable::addToLegend();
            x[0].s_bool = xret;
        } else {
            bool xret = this->addToLegend();
            x[0].s_bool = xret;
        }
    }
    void x_36(Smoke::Stack x) {
        // virtual bool removeFromLegend() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            bool xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::removeFromLegend();
            x[0].s_bool = xret;
        } else {
            bool xret = ((const x_QCPAbstractPlottable*)this)->removeFromLegend();
            x[0].s_bool = xret;
        }
    }
    void x_37(Smoke::Stack x) {
        // void rescaleAxes(bool) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::rescaleAxes((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_38(Smoke::Stack x) {
        // void rescaleKeyAxis(bool) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::rescaleKeyAxis((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_39(Smoke::Stack x) {
        // void rescaleValueAxis(bool) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::rescaleValueAxis((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_40(Smoke::Stack x) {
        // void selectionChanged(bool)
        this->QCPAbstractPlottable::selectionChanged((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_41(Smoke::Stack x) {
        // void selectableChanged(bool)
        this->QCPAbstractPlottable::selectableChanged((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_42(Smoke::Stack x) {
        // virtual QRect clipRect() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            QRect xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::clipRect();
            x[0].s_class = (void*)new QRect(xret);
        } else {
            QRect xret = ((const x_QCPAbstractPlottable*)this)->clipRect();
            x[0].s_class = (void*)new QRect(xret);
        }
    }
    void x_43(Smoke::Stack x) {
        // virtual void draw(QCPPainter*) = 0
        this->draw((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_44(Smoke::Stack x) {
        // virtual QCP::Interaction selectionCategory() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            QCP::Interaction xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::selectionCategory();
            x[0].s_enum = xret;
        } else {
            QCP::Interaction xret = ((const x_QCPAbstractPlottable*)this)->selectionCategory();
            x[0].s_enum = xret;
        }
    }
    void x_45(Smoke::Stack x) {
        // void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPAbstractPlottable*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_46(Smoke::Stack x) {
        // virtual void selectEvent(QMouseEvent*, bool, const QVariant&, bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            this->QCPAbstractPlottable::selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_47(Smoke::Stack x) {
        // virtual void deselectEvent(bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAbstractPlottable*>(this))) {
            this->QCPAbstractPlottable::deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_48(Smoke::Stack x) {
        // virtual void drawLegendIcon(QCPPainter*, const QRectF&) const = 0
        ((const x_QCPAbstractPlottable*)this)->drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_49(Smoke::Stack x) {
        // virtual QCPRange getKeyRange(bool&, QCPAbstractPlottable::SignDomain) const = 0
        QCPRange xret = ((const x_QCPAbstractPlottable*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_50(Smoke::Stack x) {
        // virtual QCPRange getValueRange(bool&, QCPAbstractPlottable::SignDomain) const = 0
        QCPRange xret = ((const x_QCPAbstractPlottable*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_51(Smoke::Stack x) {
        // void coordsToPixels(double, double, double&, double&) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::coordsToPixels((double)x[1].s_double,(double)x[2].s_double,*(double*)x[3].s_class,*(double*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_52(Smoke::Stack x) {
        // const QPointF coordsToPixels(double, double) const
        const QPointF xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::coordsToPixels((double)x[1].s_double,(double)x[2].s_double);
        x[0].s_class = (void*)new const QPointF(xret);
    }
    void x_53(Smoke::Stack x) {
        // void pixelsToCoords(double, double, double&, double&) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::pixelsToCoords((double)x[1].s_double,(double)x[2].s_double,*(double*)x[3].s_class,*(double*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_54(Smoke::Stack x) {
        // void pixelsToCoords(const QPointF&, double&, double&) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::pixelsToCoords(*(const QPointF*)x[1].s_class,*(double*)x[2].s_class,*(double*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_55(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_56(Smoke::Stack x) {
        // QBrush mainBrush() const
        QBrush xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::mainBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_57(Smoke::Stack x) {
        // void applyFillAntialiasingHint(QCPPainter*) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::applyFillAntialiasingHint((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_58(Smoke::Stack x) {
        // void applyScattersAntialiasingHint(QCPPainter*) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::applyScattersAntialiasingHint((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_59(Smoke::Stack x) {
        // void applyErrorBarsAntialiasingHint(QCPPainter*) const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::applyErrorBarsAntialiasingHint((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_60(Smoke::Stack x) {
        // double distSqrToLine(const QPointF&, const QPointF&, const QPointF&) const
        double xret = ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::distSqrToLine(*(const QPointF*)x[1].s_class,*(const QPointF*)x[2].s_class,*(const QPointF*)x[3].s_class);
        x[0].s_double = xret;
    }
    static void x_61(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPAbstractPlottable::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_62(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPAbstractPlottable::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_63(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPAbstractPlottable*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    void x_64(Smoke::Stack x) {
        // void rescaleAxes() const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::rescaleAxes((bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_65(Smoke::Stack x) {
        // void rescaleKeyAxis() const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::rescaleKeyAxis((bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_66(Smoke::Stack x) {
        // void rescaleValueAxis() const
        ((const x_QCPAbstractPlottable*)this)->QCPAbstractPlottable::rescaleValueAxis((bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_67(Smoke::Stack x) {
        // QCPRange getKeyRange(bool&) const
        QCPRange xret = ((const x_QCPAbstractPlottable*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)QCPAbstractPlottable::sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_68(Smoke::Stack x) {
        // QCPRange getValueRange(bool&) const
        QCPRange xret = ((const x_QCPAbstractPlottable*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)QCPAbstractPlottable::sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    static void x_69(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPAbstractPlottable::staticMetaObject;
    }
    void x_70(Smoke::Stack x) {
        // QString mName
        x[0].s_class = (void*)&this->QCPAbstractPlottable::mName;
    }
    void x_71(Smoke::Stack x) {
        // QString mName=
        this->QCPAbstractPlottable::mName = *(const QString*)x[1].s_class;
    }
    void x_72(Smoke::Stack x) {
        // bool mAntialiasedFill
        x[0].s_bool = this->QCPAbstractPlottable::mAntialiasedFill;
    }
    void x_73(Smoke::Stack x) {
        // bool mAntialiasedFill=
        this->QCPAbstractPlottable::mAntialiasedFill = (bool)x[1].s_bool;
    }
    void x_74(Smoke::Stack x) {
        // bool mAntialiasedScatters
        x[0].s_bool = this->QCPAbstractPlottable::mAntialiasedScatters;
    }
    void x_75(Smoke::Stack x) {
        // bool mAntialiasedScatters=
        this->QCPAbstractPlottable::mAntialiasedScatters = (bool)x[1].s_bool;
    }
    void x_76(Smoke::Stack x) {
        // bool mAntialiasedErrorBars
        x[0].s_bool = this->QCPAbstractPlottable::mAntialiasedErrorBars;
    }
    void x_77(Smoke::Stack x) {
        // bool mAntialiasedErrorBars=
        this->QCPAbstractPlottable::mAntialiasedErrorBars = (bool)x[1].s_bool;
    }
    void x_78(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPAbstractPlottable::mPen;
    }
    void x_79(Smoke::Stack x) {
        // QPen mPen=
        this->QCPAbstractPlottable::mPen = *(const QPen*)x[1].s_class;
    }
    void x_80(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPAbstractPlottable::mSelectedPen;
    }
    void x_81(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPAbstractPlottable::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    void x_82(Smoke::Stack x) {
        // QBrush mBrush
        x[0].s_class = (void*)&this->QCPAbstractPlottable::mBrush;
    }
    void x_83(Smoke::Stack x) {
        // QBrush mBrush=
        this->QCPAbstractPlottable::mBrush = *(const QBrush*)x[1].s_class;
    }
    void x_84(Smoke::Stack x) {
        // QBrush mSelectedBrush
        x[0].s_class = (void*)&this->QCPAbstractPlottable::mSelectedBrush;
    }
    void x_85(Smoke::Stack x) {
        // QBrush mSelectedBrush=
        this->QCPAbstractPlottable::mSelectedBrush = *(const QBrush*)x[1].s_class;
    }
    void x_86(Smoke::Stack x) {
        // QPointer<QCPAxis> mKeyAxis
        x[0].s_class = (void*)&this->QCPAbstractPlottable::mKeyAxis;
    }
    void x_87(Smoke::Stack x) {
        // QPointer<QCPAxis> mKeyAxis=
        this->QCPAbstractPlottable::mKeyAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    void x_88(Smoke::Stack x) {
        // QPointer<QCPAxis> mValueAxis
        x[0].s_class = (void*)&this->QCPAbstractPlottable::mValueAxis;
    }
    void x_89(Smoke::Stack x) {
        // QPointer<QCPAxis> mValueAxis=
        this->QCPAbstractPlottable::mValueAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    void x_90(Smoke::Stack x) {
        // bool mSelectable
        x[0].s_bool = this->QCPAbstractPlottable::mSelectable;
    }
    void x_91(Smoke::Stack x) {
        // bool mSelectable=
        this->QCPAbstractPlottable::mSelectable = (bool)x[1].s_bool;
    }
    void x_92(Smoke::Stack x) {
        // bool mSelected
        x[0].s_bool = this->QCPAbstractPlottable::mSelected;
    }
    void x_93(Smoke::Stack x) {
        // bool mSelected=
        this->QCPAbstractPlottable::mSelected = (bool)x[1].s_bool;
    }
    static void x_94(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAbstractPlottable::sdNegative;
    }
    static void x_95(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAbstractPlottable::sdBoth;
    }
    static void x_96(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAbstractPlottable::sdPositive;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(102, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPAbstractPlottable::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(103, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPAbstractPlottable::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(108, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPAbstractPlottable::qt_metacall(x1, x2, x3);
    }
    virtual void clearData() {
        Smoke::StackItem x[1];
        this->_binding->callMethod(134, (void*)this, x, true /*pure virtual*/);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        this->_binding->callMethod(135, (void*)this, x, true /*pure virtual*/);
        return (double)x[0].s_double;
    }
    virtual bool addToLegend() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(136, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::addToLegend();
    }
    virtual bool removeFromLegend() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(137, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::removeFromLegend();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(143, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractPlottable::clipRect();
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        this->_binding->callMethod(144, (void*)this, x, true /*pure virtual*/);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(145, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractPlottable::selectionCategory();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(147, (void*)this, x)) return;
        this->QCPAbstractPlottable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(148, (void*)this, x)) return;
        this->QCPAbstractPlottable::deselectEvent(x1);
    }
    virtual void drawLegendIcon(QCPPainter* x1, const QRectF& x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        this->_binding->callMethod(149, (void*)this, x, true /*pure virtual*/);
    }
    virtual QCPRange getKeyRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        this->_binding->callMethod(150, (void*)this, x, true /*pure virtual*/);
        QCPRange* xptr = (QCPRange*)x[0].s_class;
        QCPRange xret(*xptr);
        delete xptr;
        return xret;
    }
    virtual QCPRange getValueRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        this->_binding->callMethod(151, (void*)this, x, true /*pure virtual*/);
        QCPRange* xptr = (QCPRange*)x[0].s_class;
        QCPRange xret(*xptr);
        delete xptr;
        return xret;
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(146, (void*)this, x)) return;
        this->QCPAbstractPlottable::applyDefaultAntialiasingHint(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 12: //QCPAbstractPlottable::SignDomain
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPAbstractPlottable::SignDomain;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPAbstractPlottable::SignDomain*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPAbstractPlottable::SignDomain*)xdata = (QCPAbstractPlottable::SignDomain)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPAbstractPlottable::SignDomain*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPAbstractPlottable() { this->_binding->deleted(6, (void*)this); }
};
void xenum_QCPAbstractPlottable(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPAbstractPlottable::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPAbstractPlottable(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPAbstractPlottable *xself = (x_QCPAbstractPlottable*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPAbstractPlottable::x_3(args);	break;
        case 4: x_QCPAbstractPlottable::x_4(args);	break;
        case 5: x_QCPAbstractPlottable::x_5(args);	break;
        case 6: x_QCPAbstractPlottable::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPAbstractPlottable::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: x_QCPAbstractPlottable::x_61(args);	break;
        case 62: x_QCPAbstractPlottable::x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: x_QCPAbstractPlottable::x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: xself->x_81(args);	break;
        case 82: xself->x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: xself->x_84(args);	break;
        case 85: xself->x_85(args);	break;
        case 86: xself->x_86(args);	break;
        case 87: xself->x_87(args);	break;
        case 88: xself->x_88(args);	break;
        case 89: xself->x_89(args);	break;
        case 90: xself->x_90(args);	break;
        case 91: xself->x_91(args);	break;
        case 92: xself->x_92(args);	break;
        case 93: xself->x_93(args);	break;
        case 94: x_QCPAbstractPlottable::x_94(args);	break;
        case 95: x_QCPAbstractPlottable::x_95(args);	break;
        case 96: x_QCPAbstractPlottable::x_96(args);	break;
        case 97: delete (QCPAbstractPlottable*)xself;	break;
    }
}
class x_QCPAxis : public QCPAxis, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            const QMetaObject* xret = ((const x_QCPAxis*)this)->QCPAxis::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPAxis*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            void* xret = this->QCPAxis::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPAxis::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPAxis::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPAxis::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPAxis::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            int xret = this->QCPAxis::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPAxis* QCPAxis(QCPAxisRect*, QCPAxis::AxisType)
        x_QCPAxis* xret = new x_QCPAxis((QCPAxisRect*)x[1].s_class,(QCPAxis::AxisType)x[2].s_enum);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPAxis(QCPAxisRect* x1, QCPAxis::AxisType x2) : QCPAxis(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QCPAxis::AxisType axisType() const
        QCPAxis::AxisType xret = ((const x_QCPAxis*)this)->QCPAxis::axisType();
        x[0].s_enum = xret;
    }
    void x_10(Smoke::Stack x) {
        // QCPAxisRect* axisRect() const
        QCPAxisRect* xret = ((const x_QCPAxis*)this)->QCPAxis::axisRect();
        x[0].s_class = (void*)xret;
    }
    void x_11(Smoke::Stack x) {
        // QCPAxis::ScaleType scaleType() const
        QCPAxis::ScaleType xret = ((const x_QCPAxis*)this)->QCPAxis::scaleType();
        x[0].s_enum = xret;
    }
    void x_12(Smoke::Stack x) {
        // double scaleLogBase() const
        double xret = ((const x_QCPAxis*)this)->QCPAxis::scaleLogBase();
        x[0].s_double = xret;
    }
    void x_13(Smoke::Stack x) {
        // const QCPRange range() const
        const QCPRange xret = ((const x_QCPAxis*)this)->QCPAxis::range();
        x[0].s_class = (void*)new const QCPRange(xret);
    }
    void x_14(Smoke::Stack x) {
        // bool rangeReversed() const
        bool xret = ((const x_QCPAxis*)this)->QCPAxis::rangeReversed();
        x[0].s_bool = xret;
    }
    void x_15(Smoke::Stack x) {
        // bool autoTicks() const
        bool xret = ((const x_QCPAxis*)this)->QCPAxis::autoTicks();
        x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) {
        // int autoTickCount() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::autoTickCount();
        x[0].s_int = xret;
    }
    void x_17(Smoke::Stack x) {
        // bool autoTickLabels() const
        bool xret = ((const x_QCPAxis*)this)->QCPAxis::autoTickLabels();
        x[0].s_bool = xret;
    }
    void x_18(Smoke::Stack x) {
        // bool autoTickStep() const
        bool xret = ((const x_QCPAxis*)this)->QCPAxis::autoTickStep();
        x[0].s_bool = xret;
    }
    void x_19(Smoke::Stack x) {
        // bool autoSubTicks() const
        bool xret = ((const x_QCPAxis*)this)->QCPAxis::autoSubTicks();
        x[0].s_bool = xret;
    }
    void x_20(Smoke::Stack x) {
        // bool ticks() const
        bool xret = ((const x_QCPAxis*)this)->QCPAxis::ticks();
        x[0].s_bool = xret;
    }
    void x_21(Smoke::Stack x) {
        // bool tickLabels() const
        bool xret = ((const x_QCPAxis*)this)->QCPAxis::tickLabels();
        x[0].s_bool = xret;
    }
    void x_22(Smoke::Stack x) {
        // int tickLabelPadding() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::tickLabelPadding();
        x[0].s_int = xret;
    }
    void x_23(Smoke::Stack x) {
        // QCPAxis::LabelType tickLabelType() const
        QCPAxis::LabelType xret = ((const x_QCPAxis*)this)->QCPAxis::tickLabelType();
        x[0].s_enum = xret;
    }
    void x_24(Smoke::Stack x) {
        // QFont tickLabelFont() const
        QFont xret = ((const x_QCPAxis*)this)->QCPAxis::tickLabelFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_25(Smoke::Stack x) {
        // QColor tickLabelColor() const
        QColor xret = ((const x_QCPAxis*)this)->QCPAxis::tickLabelColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_26(Smoke::Stack x) {
        // double tickLabelRotation() const
        double xret = ((const x_QCPAxis*)this)->QCPAxis::tickLabelRotation();
        x[0].s_double = xret;
    }
    void x_27(Smoke::Stack x) {
        // QCPAxis::LabelSide tickLabelSide() const
        QCPAxis::LabelSide xret = ((const x_QCPAxis*)this)->QCPAxis::tickLabelSide();
        x[0].s_enum = xret;
    }
    void x_28(Smoke::Stack x) {
        // QString dateTimeFormat() const
        QString xret = ((const x_QCPAxis*)this)->QCPAxis::dateTimeFormat();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_29(Smoke::Stack x) {
        // Qt::TimeSpec dateTimeSpec() const
        Qt::TimeSpec xret = ((const x_QCPAxis*)this)->QCPAxis::dateTimeSpec();
        x[0].s_enum = xret;
    }
    void x_30(Smoke::Stack x) {
        // QString numberFormat() const
        QString xret = ((const x_QCPAxis*)this)->QCPAxis::numberFormat();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_31(Smoke::Stack x) {
        // int numberPrecision() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::numberPrecision();
        x[0].s_int = xret;
    }
    void x_32(Smoke::Stack x) {
        // double tickStep() const
        double xret = ((const x_QCPAxis*)this)->QCPAxis::tickStep();
        x[0].s_double = xret;
    }
    void x_33(Smoke::Stack x) {
        // QVector<double> tickVector() const
        QVector<double> xret = ((const x_QCPAxis*)this)->QCPAxis::tickVector();
        x[0].s_class = (void*)new QVector<double>(xret);
    }
    void x_34(Smoke::Stack x) {
        // QVector<QString> tickVectorLabels() const
        QVector<QString> xret = ((const x_QCPAxis*)this)->QCPAxis::tickVectorLabels();
        x[0].s_class = (void*)new QVector<QString>(xret);
    }
    void x_35(Smoke::Stack x) {
        // int tickLengthIn() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::tickLengthIn();
        x[0].s_int = xret;
    }
    void x_36(Smoke::Stack x) {
        // int tickLengthOut() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::tickLengthOut();
        x[0].s_int = xret;
    }
    void x_37(Smoke::Stack x) {
        // int subTickCount() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::subTickCount();
        x[0].s_int = xret;
    }
    void x_38(Smoke::Stack x) {
        // int subTickLengthIn() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::subTickLengthIn();
        x[0].s_int = xret;
    }
    void x_39(Smoke::Stack x) {
        // int subTickLengthOut() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::subTickLengthOut();
        x[0].s_int = xret;
    }
    void x_40(Smoke::Stack x) {
        // QPen basePen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::basePen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_41(Smoke::Stack x) {
        // QPen tickPen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::tickPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_42(Smoke::Stack x) {
        // QPen subTickPen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::subTickPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_43(Smoke::Stack x) {
        // QFont labelFont() const
        QFont xret = ((const x_QCPAxis*)this)->QCPAxis::labelFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_44(Smoke::Stack x) {
        // QColor labelColor() const
        QColor xret = ((const x_QCPAxis*)this)->QCPAxis::labelColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_45(Smoke::Stack x) {
        // QString label() const
        QString xret = ((const x_QCPAxis*)this)->QCPAxis::label();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_46(Smoke::Stack x) {
        // int labelPadding() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::labelPadding();
        x[0].s_int = xret;
    }
    void x_47(Smoke::Stack x) {
        // int padding() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::padding();
        x[0].s_int = xret;
    }
    void x_48(Smoke::Stack x) {
        // int offset() const
        int xret = ((const x_QCPAxis*)this)->QCPAxis::offset();
        x[0].s_int = xret;
    }
    void x_49(Smoke::Stack x) {
        // QFlags<QCPAxis::SelectablePart> selectedParts() const
        QFlags<QCPAxis::SelectablePart> xret = ((const x_QCPAxis*)this)->QCPAxis::selectedParts();
        x[0].s_uint = (uint)xret;
    }
    void x_50(Smoke::Stack x) {
        // QFlags<QCPAxis::SelectablePart> selectableParts() const
        QFlags<QCPAxis::SelectablePart> xret = ((const x_QCPAxis*)this)->QCPAxis::selectableParts();
        x[0].s_uint = (uint)xret;
    }
    void x_51(Smoke::Stack x) {
        // QFont selectedTickLabelFont() const
        QFont xret = ((const x_QCPAxis*)this)->QCPAxis::selectedTickLabelFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_52(Smoke::Stack x) {
        // QFont selectedLabelFont() const
        QFont xret = ((const x_QCPAxis*)this)->QCPAxis::selectedLabelFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_53(Smoke::Stack x) {
        // QColor selectedTickLabelColor() const
        QColor xret = ((const x_QCPAxis*)this)->QCPAxis::selectedTickLabelColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_54(Smoke::Stack x) {
        // QColor selectedLabelColor() const
        QColor xret = ((const x_QCPAxis*)this)->QCPAxis::selectedLabelColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_55(Smoke::Stack x) {
        // QPen selectedBasePen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::selectedBasePen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_56(Smoke::Stack x) {
        // QPen selectedTickPen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::selectedTickPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_57(Smoke::Stack x) {
        // QPen selectedSubTickPen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::selectedSubTickPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_58(Smoke::Stack x) {
        // QCPLineEnding lowerEnding() const
        QCPLineEnding xret = ((const x_QCPAxis*)this)->QCPAxis::lowerEnding();
        x[0].s_class = (void*)new QCPLineEnding(xret);
    }
    void x_59(Smoke::Stack x) {
        // QCPLineEnding upperEnding() const
        QCPLineEnding xret = ((const x_QCPAxis*)this)->QCPAxis::upperEnding();
        x[0].s_class = (void*)new QCPLineEnding(xret);
    }
    void x_60(Smoke::Stack x) {
        // QCPGrid* grid() const
        QCPGrid* xret = ((const x_QCPAxis*)this)->QCPAxis::grid();
        x[0].s_class = (void*)xret;
    }
    void x_61(Smoke::Stack x) {
        // void setScaleType(QCPAxis::ScaleType)
        this->QCPAxis::setScaleType((QCPAxis::ScaleType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_62(Smoke::Stack x) {
        // void setScaleLogBase(double)
        this->QCPAxis::setScaleLogBase((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_63(Smoke::Stack x) {
        // void setRange(const QCPRange&)
        this->QCPAxis::setRange(*(const QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_64(Smoke::Stack x) {
        // void setRange(double, double)
        this->QCPAxis::setRange((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_65(Smoke::Stack x) {
        // void setRange(double, double, Qt::AlignmentFlag)
        this->QCPAxis::setRange((double)x[1].s_double,(double)x[2].s_double,(Qt::AlignmentFlag)x[3].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_66(Smoke::Stack x) {
        // void setRangeLower(double)
        this->QCPAxis::setRangeLower((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_67(Smoke::Stack x) {
        // void setRangeUpper(double)
        this->QCPAxis::setRangeUpper((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_68(Smoke::Stack x) {
        // void setRangeReversed(bool)
        this->QCPAxis::setRangeReversed((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_69(Smoke::Stack x) {
        // void setAutoTicks(bool)
        this->QCPAxis::setAutoTicks((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_70(Smoke::Stack x) {
        // void setAutoTickCount(int)
        this->QCPAxis::setAutoTickCount((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_71(Smoke::Stack x) {
        // void setAutoTickLabels(bool)
        this->QCPAxis::setAutoTickLabels((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_72(Smoke::Stack x) {
        // void setAutoTickStep(bool)
        this->QCPAxis::setAutoTickStep((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_73(Smoke::Stack x) {
        // void setAutoSubTicks(bool)
        this->QCPAxis::setAutoSubTicks((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_74(Smoke::Stack x) {
        // void setTicks(bool)
        this->QCPAxis::setTicks((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_75(Smoke::Stack x) {
        // void setTickLabels(bool)
        this->QCPAxis::setTickLabels((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_76(Smoke::Stack x) {
        // void setTickLabelPadding(int)
        this->QCPAxis::setTickLabelPadding((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_77(Smoke::Stack x) {
        // void setTickLabelType(QCPAxis::LabelType)
        this->QCPAxis::setTickLabelType((QCPAxis::LabelType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_78(Smoke::Stack x) {
        // void setTickLabelFont(const QFont&)
        this->QCPAxis::setTickLabelFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_79(Smoke::Stack x) {
        // void setTickLabelColor(const QColor&)
        this->QCPAxis::setTickLabelColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_80(Smoke::Stack x) {
        // void setTickLabelRotation(double)
        this->QCPAxis::setTickLabelRotation((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_81(Smoke::Stack x) {
        // void setTickLabelSide(QCPAxis::LabelSide)
        this->QCPAxis::setTickLabelSide((QCPAxis::LabelSide)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_82(Smoke::Stack x) {
        // void setDateTimeFormat(const QString&)
        this->QCPAxis::setDateTimeFormat(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_83(Smoke::Stack x) {
        // void setDateTimeSpec(const Qt::TimeSpec&)
        this->QCPAxis::setDateTimeSpec(*(const Qt::TimeSpec*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_84(Smoke::Stack x) {
        // void setNumberFormat(const QString&)
        this->QCPAxis::setNumberFormat(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_85(Smoke::Stack x) {
        // void setNumberPrecision(int)
        this->QCPAxis::setNumberPrecision((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_86(Smoke::Stack x) {
        // void setTickStep(double)
        this->QCPAxis::setTickStep((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_87(Smoke::Stack x) {
        // void setTickVector(const QVector<double>&)
        this->QCPAxis::setTickVector(*(const QVector<double>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_88(Smoke::Stack x) {
        // void setTickVectorLabels(const QVector<QString>&)
        this->QCPAxis::setTickVectorLabels(*(const QVector<QString>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_89(Smoke::Stack x) {
        // void setTickLength(int, int)
        this->QCPAxis::setTickLength((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_90(Smoke::Stack x) {
        // void setTickLengthIn(int)
        this->QCPAxis::setTickLengthIn((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_91(Smoke::Stack x) {
        // void setTickLengthOut(int)
        this->QCPAxis::setTickLengthOut((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_92(Smoke::Stack x) {
        // void setSubTickCount(int)
        this->QCPAxis::setSubTickCount((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_93(Smoke::Stack x) {
        // void setSubTickLength(int, int)
        this->QCPAxis::setSubTickLength((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_94(Smoke::Stack x) {
        // void setSubTickLengthIn(int)
        this->QCPAxis::setSubTickLengthIn((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_95(Smoke::Stack x) {
        // void setSubTickLengthOut(int)
        this->QCPAxis::setSubTickLengthOut((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_96(Smoke::Stack x) {
        // void setBasePen(const QPen&)
        this->QCPAxis::setBasePen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_97(Smoke::Stack x) {
        // void setTickPen(const QPen&)
        this->QCPAxis::setTickPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_98(Smoke::Stack x) {
        // void setSubTickPen(const QPen&)
        this->QCPAxis::setSubTickPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_99(Smoke::Stack x) {
        // void setLabelFont(const QFont&)
        this->QCPAxis::setLabelFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_100(Smoke::Stack x) {
        // void setLabelColor(const QColor&)
        this->QCPAxis::setLabelColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_101(Smoke::Stack x) {
        // void setLabel(const QString&)
        this->QCPAxis::setLabel(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_102(Smoke::Stack x) {
        // void setLabelPadding(int)
        this->QCPAxis::setLabelPadding((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_103(Smoke::Stack x) {
        // void setPadding(int)
        this->QCPAxis::setPadding((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_104(Smoke::Stack x) {
        // void setOffset(int)
        this->QCPAxis::setOffset((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_105(Smoke::Stack x) {
        // void setSelectedTickLabelFont(const QFont&)
        this->QCPAxis::setSelectedTickLabelFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_106(Smoke::Stack x) {
        // void setSelectedLabelFont(const QFont&)
        this->QCPAxis::setSelectedLabelFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_107(Smoke::Stack x) {
        // void setSelectedTickLabelColor(const QColor&)
        this->QCPAxis::setSelectedTickLabelColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_108(Smoke::Stack x) {
        // void setSelectedLabelColor(const QColor&)
        this->QCPAxis::setSelectedLabelColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_109(Smoke::Stack x) {
        // void setSelectedBasePen(const QPen&)
        this->QCPAxis::setSelectedBasePen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_110(Smoke::Stack x) {
        // void setSelectedTickPen(const QPen&)
        this->QCPAxis::setSelectedTickPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_111(Smoke::Stack x) {
        // void setSelectedSubTickPen(const QPen&)
        this->QCPAxis::setSelectedSubTickPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_112(Smoke::Stack x) {
        // void setSelectableParts(const QFlags<QCPAxis::SelectablePart>&)
        this->QCPAxis::setSelectableParts(*(const QFlags<QCPAxis::SelectablePart>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_113(Smoke::Stack x) {
        // void setSelectedParts(const QFlags<QCPAxis::SelectablePart>&)
        this->QCPAxis::setSelectedParts(*(const QFlags<QCPAxis::SelectablePart>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_114(Smoke::Stack x) {
        // void setLowerEnding(const QCPLineEnding&)
        this->QCPAxis::setLowerEnding(*(const QCPLineEnding*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_115(Smoke::Stack x) {
        // void setUpperEnding(const QCPLineEnding&)
        this->QCPAxis::setUpperEnding(*(const QCPLineEnding*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_116(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            double xret = ((const x_QCPAxis*)this)->QCPAxis::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPAxis*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_117(Smoke::Stack x) {
        // Qt::Orientation orientation() const
        Qt::Orientation xret = ((const x_QCPAxis*)this)->QCPAxis::orientation();
        x[0].s_enum = xret;
    }
    void x_118(Smoke::Stack x) {
        // void moveRange(double)
        this->QCPAxis::moveRange((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_119(Smoke::Stack x) {
        // void scaleRange(double, double)
        this->QCPAxis::scaleRange((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_120(Smoke::Stack x) {
        // void setScaleRatio(const QCPAxis*, double)
        this->QCPAxis::setScaleRatio((const QCPAxis*)x[1].s_class,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_121(Smoke::Stack x) {
        // void rescale(bool)
        this->QCPAxis::rescale((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_122(Smoke::Stack x) {
        // double pixelToCoord(double) const
        double xret = ((const x_QCPAxis*)this)->QCPAxis::pixelToCoord((double)x[1].s_double);
        x[0].s_double = xret;
    }
    void x_123(Smoke::Stack x) {
        // double coordToPixel(double) const
        double xret = ((const x_QCPAxis*)this)->QCPAxis::coordToPixel((double)x[1].s_double);
        x[0].s_double = xret;
    }
    void x_124(Smoke::Stack x) {
        // QCPAxis::SelectablePart getPartAt(const QPointF&) const
        QCPAxis::SelectablePart xret = ((const x_QCPAxis*)this)->QCPAxis::getPartAt(*(const QPointF*)x[1].s_class);
        x[0].s_enum = xret;
    }
    void x_125(Smoke::Stack x) {
        // QList<QCPAbstractPlottable*> plottables() const
        QList<QCPAbstractPlottable*> xret = ((const x_QCPAxis*)this)->QCPAxis::plottables();
        x[0].s_class = (void*)new QList<QCPAbstractPlottable*>(xret);
    }
    void x_126(Smoke::Stack x) {
        // QList<QCPGraph*> graphs() const
        QList<QCPGraph*> xret = ((const x_QCPAxis*)this)->QCPAxis::graphs();
        x[0].s_class = (void*)new QList<QCPGraph*>(xret);
    }
    void x_127(Smoke::Stack x) {
        // QList<QCPAbstractItem*> items() const
        QList<QCPAbstractItem*> xret = ((const x_QCPAxis*)this)->QCPAxis::items();
        x[0].s_class = (void*)new QList<QCPAbstractItem*>(xret);
    }
    static void x_128(Smoke::Stack x) {
        // static QCPAxis::AxisType marginSideToAxisType(QCP::MarginSide)
        QCPAxis::AxisType xret = QCPAxis::marginSideToAxisType((QCP::MarginSide)x[1].s_enum);
        x[0].s_enum = xret;
    }
    static void x_129(Smoke::Stack x) {
        // static Qt::Orientation orientation(QCPAxis::AxisType)
        Qt::Orientation xret = QCPAxis::orientation((QCPAxis::AxisType)x[1].s_enum);
        x[0].s_enum = xret;
    }
    static void x_130(Smoke::Stack x) {
        // static QCPAxis::AxisType opposite(QCPAxis::AxisType)
        QCPAxis::AxisType xret = QCPAxis::opposite((QCPAxis::AxisType)x[1].s_enum);
        x[0].s_enum = xret;
    }
    void x_131(Smoke::Stack x) {
        // void ticksRequest()
        this->QCPAxis::ticksRequest();
        (void)x; // noop (for compiler warning)
    }
    void x_132(Smoke::Stack x) {
        // void rangeChanged(const QCPRange&)
        this->QCPAxis::rangeChanged(*(const QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_133(Smoke::Stack x) {
        // void rangeChanged(const QCPRange&, const QCPRange&)
        this->QCPAxis::rangeChanged(*(const QCPRange*)x[1].s_class,*(const QCPRange*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_134(Smoke::Stack x) {
        // void scaleTypeChanged(QCPAxis::ScaleType)
        this->QCPAxis::scaleTypeChanged((QCPAxis::ScaleType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_135(Smoke::Stack x) {
        // void selectionChanged(const QCPAxis::SelectableParts&)
        this->QCPAxis::selectionChanged((const QCPAxis::SelectableParts)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_136(Smoke::Stack x) {
        // void selectableChanged(const QCPAxis::SelectableParts&)
        this->QCPAxis::selectableChanged((const QCPAxis::SelectableParts)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_137(Smoke::Stack x) {
        // virtual void setupTickVectors()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            this->QCPAxis::setupTickVectors();
            (void)x; // noop (for compiler warning)
        } else {
            this->setupTickVectors();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_138(Smoke::Stack x) {
        // virtual void generateAutoTicks()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            this->QCPAxis::generateAutoTicks();
            (void)x; // noop (for compiler warning)
        } else {
            this->generateAutoTicks();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_139(Smoke::Stack x) {
        // virtual int calculateAutoSubTickCount(double) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            int xret = ((const x_QCPAxis*)this)->QCPAxis::calculateAutoSubTickCount((double)x[1].s_double);
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QCPAxis*)this)->calculateAutoSubTickCount((double)x[1].s_double);
            x[0].s_int = xret;
        }
    }
    void x_140(Smoke::Stack x) {
        // virtual int calculateMargin()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            int xret = this->QCPAxis::calculateMargin();
            x[0].s_int = xret;
        } else {
            int xret = this->calculateMargin();
            x[0].s_int = xret;
        }
    }
    void x_141(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            ((const x_QCPAxis*)this)->QCPAxis::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPAxis*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_142(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            this->QCPAxis::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_143(Smoke::Stack x) {
        // virtual QCP::Interaction selectionCategory() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            QCP::Interaction xret = ((const x_QCPAxis*)this)->QCPAxis::selectionCategory();
            x[0].s_enum = xret;
        } else {
            QCP::Interaction xret = ((const x_QCPAxis*)this)->selectionCategory();
            x[0].s_enum = xret;
        }
    }
    void x_144(Smoke::Stack x) {
        // virtual void selectEvent(QMouseEvent*, bool, const QVariant&, bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            this->QCPAxis::selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_145(Smoke::Stack x) {
        // virtual void deselectEvent(bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxis*>(this))) {
            this->QCPAxis::deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_146(Smoke::Stack x) {
        // void visibleTickBounds(int&, int&) const
        ((const x_QCPAxis*)this)->QCPAxis::visibleTickBounds(*(int*)x[1].s_class,*(int*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_147(Smoke::Stack x) {
        // double baseLog(double) const
        double xret = ((const x_QCPAxis*)this)->QCPAxis::baseLog((double)x[1].s_double);
        x[0].s_double = xret;
    }
    void x_148(Smoke::Stack x) {
        // double basePow(double) const
        double xret = ((const x_QCPAxis*)this)->QCPAxis::basePow((double)x[1].s_double);
        x[0].s_double = xret;
    }
    void x_149(Smoke::Stack x) {
        // QPen getBasePen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::getBasePen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_150(Smoke::Stack x) {
        // QPen getTickPen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::getTickPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_151(Smoke::Stack x) {
        // QPen getSubTickPen() const
        QPen xret = ((const x_QCPAxis*)this)->QCPAxis::getSubTickPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_152(Smoke::Stack x) {
        // QFont getTickLabelFont() const
        QFont xret = ((const x_QCPAxis*)this)->QCPAxis::getTickLabelFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_153(Smoke::Stack x) {
        // QFont getLabelFont() const
        QFont xret = ((const x_QCPAxis*)this)->QCPAxis::getLabelFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_154(Smoke::Stack x) {
        // QColor getTickLabelColor() const
        QColor xret = ((const x_QCPAxis*)this)->QCPAxis::getTickLabelColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_155(Smoke::Stack x) {
        // QColor getLabelColor() const
        QColor xret = ((const x_QCPAxis*)this)->QCPAxis::getLabelColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    static void x_156(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPAxis::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_157(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPAxis::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_158(Smoke::Stack x) {
        // void setTickLength(int)
        this->QCPAxis::setTickLength((int)x[1].s_int,(int)0);
        (void)x; // noop (for compiler warning)
    }
    void x_159(Smoke::Stack x) {
        // void setSubTickLength(int)
        this->QCPAxis::setSubTickLength((int)x[1].s_int,(int)0);
        (void)x; // noop (for compiler warning)
    }
    void x_160(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPAxis*)this)->QCPAxis::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    void x_161(Smoke::Stack x) {
        // void setScaleRatio(const QCPAxis*)
        this->QCPAxis::setScaleRatio((const QCPAxis*)x[1].s_class,(double)1.0);
        (void)x; // noop (for compiler warning)
    }
    void x_162(Smoke::Stack x) {
        // void rescale()
        this->QCPAxis::rescale((bool)false);
        (void)x; // noop (for compiler warning)
    }
    static void x_163(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPAxis::staticMetaObject;
    }
    void x_164(Smoke::Stack x) {
        // QCPAxis::AxisType mAxisType
        x[0].s_enum = this->QCPAxis::mAxisType;
    }
    void x_165(Smoke::Stack x) {
        // QCPAxis::AxisType mAxisType=
        this->QCPAxis::mAxisType = (QCPAxis::AxisType)x[1].s_enum;
    }
    void x_166(Smoke::Stack x) {
        // QCPAxisRect* mAxisRect
        x[0].s_class = (void*)this->QCPAxis::mAxisRect;
    }
    void x_167(Smoke::Stack x) {
        // QCPAxisRect* mAxisRect=
        this->QCPAxis::mAxisRect = (QCPAxisRect*)x[1].s_class;
    }
    void x_168(Smoke::Stack x) {
        // int mPadding
        x[0].s_int = this->QCPAxis::mPadding;
    }
    void x_169(Smoke::Stack x) {
        // int mPadding=
        this->QCPAxis::mPadding = (int)x[1].s_int;
    }
    void x_170(Smoke::Stack x) {
        // Qt::Orientation mOrientation
        x[0].s_enum = this->QCPAxis::mOrientation;
    }
    void x_171(Smoke::Stack x) {
        // Qt::Orientation mOrientation=
        this->QCPAxis::mOrientation = (Qt::Orientation)x[1].s_enum;
    }
    void x_172(Smoke::Stack x) {
        // QFlags<QCPAxis::SelectablePart> mSelectableParts
        x[0].s_uint = (uint)this->QCPAxis::mSelectableParts;
    }
    void x_173(Smoke::Stack x) {
        // QFlags<QCPAxis::SelectablePart> mSelectableParts=
        this->QCPAxis::mSelectableParts = (QFlags<QCPAxis::SelectablePart>)x[1].s_uint;
    }
    void x_174(Smoke::Stack x) {
        // QFlags<QCPAxis::SelectablePart> mSelectedParts
        x[0].s_uint = (uint)this->QCPAxis::mSelectedParts;
    }
    void x_175(Smoke::Stack x) {
        // QFlags<QCPAxis::SelectablePart> mSelectedParts=
        this->QCPAxis::mSelectedParts = (QFlags<QCPAxis::SelectablePart>)x[1].s_uint;
    }
    void x_176(Smoke::Stack x) {
        // QPen mBasePen
        x[0].s_class = (void*)&this->QCPAxis::mBasePen;
    }
    void x_177(Smoke::Stack x) {
        // QPen mBasePen=
        this->QCPAxis::mBasePen = *(const QPen*)x[1].s_class;
    }
    void x_178(Smoke::Stack x) {
        // QPen mSelectedBasePen
        x[0].s_class = (void*)&this->QCPAxis::mSelectedBasePen;
    }
    void x_179(Smoke::Stack x) {
        // QPen mSelectedBasePen=
        this->QCPAxis::mSelectedBasePen = *(const QPen*)x[1].s_class;
    }
    void x_180(Smoke::Stack x) {
        // QString mLabel
        x[0].s_class = (void*)&this->QCPAxis::mLabel;
    }
    void x_181(Smoke::Stack x) {
        // QString mLabel=
        this->QCPAxis::mLabel = *(const QString*)x[1].s_class;
    }
    void x_182(Smoke::Stack x) {
        // QFont mLabelFont
        x[0].s_class = (void*)&this->QCPAxis::mLabelFont;
    }
    void x_183(Smoke::Stack x) {
        // QFont mLabelFont=
        this->QCPAxis::mLabelFont = *(const QFont*)x[1].s_class;
    }
    void x_184(Smoke::Stack x) {
        // QFont mSelectedLabelFont
        x[0].s_class = (void*)&this->QCPAxis::mSelectedLabelFont;
    }
    void x_185(Smoke::Stack x) {
        // QFont mSelectedLabelFont=
        this->QCPAxis::mSelectedLabelFont = *(const QFont*)x[1].s_class;
    }
    void x_186(Smoke::Stack x) {
        // QColor mLabelColor
        x[0].s_class = (void*)&this->QCPAxis::mLabelColor;
    }
    void x_187(Smoke::Stack x) {
        // QColor mLabelColor=
        this->QCPAxis::mLabelColor = *(const QColor*)x[1].s_class;
    }
    void x_188(Smoke::Stack x) {
        // QColor mSelectedLabelColor
        x[0].s_class = (void*)&this->QCPAxis::mSelectedLabelColor;
    }
    void x_189(Smoke::Stack x) {
        // QColor mSelectedLabelColor=
        this->QCPAxis::mSelectedLabelColor = *(const QColor*)x[1].s_class;
    }
    void x_190(Smoke::Stack x) {
        // bool mTickLabels
        x[0].s_bool = this->QCPAxis::mTickLabels;
    }
    void x_191(Smoke::Stack x) {
        // bool mTickLabels=
        this->QCPAxis::mTickLabels = (bool)x[1].s_bool;
    }
    void x_192(Smoke::Stack x) {
        // bool mAutoTickLabels
        x[0].s_bool = this->QCPAxis::mAutoTickLabels;
    }
    void x_193(Smoke::Stack x) {
        // bool mAutoTickLabels=
        this->QCPAxis::mAutoTickLabels = (bool)x[1].s_bool;
    }
    void x_194(Smoke::Stack x) {
        // QCPAxis::LabelType mTickLabelType
        x[0].s_enum = this->QCPAxis::mTickLabelType;
    }
    void x_195(Smoke::Stack x) {
        // QCPAxis::LabelType mTickLabelType=
        this->QCPAxis::mTickLabelType = (QCPAxis::LabelType)x[1].s_enum;
    }
    void x_196(Smoke::Stack x) {
        // QFont mTickLabelFont
        x[0].s_class = (void*)&this->QCPAxis::mTickLabelFont;
    }
    void x_197(Smoke::Stack x) {
        // QFont mTickLabelFont=
        this->QCPAxis::mTickLabelFont = *(const QFont*)x[1].s_class;
    }
    void x_198(Smoke::Stack x) {
        // QFont mSelectedTickLabelFont
        x[0].s_class = (void*)&this->QCPAxis::mSelectedTickLabelFont;
    }
    void x_199(Smoke::Stack x) {
        // QFont mSelectedTickLabelFont=
        this->QCPAxis::mSelectedTickLabelFont = *(const QFont*)x[1].s_class;
    }
    void x_200(Smoke::Stack x) {
        // QColor mTickLabelColor
        x[0].s_class = (void*)&this->QCPAxis::mTickLabelColor;
    }
    void x_201(Smoke::Stack x) {
        // QColor mTickLabelColor=
        this->QCPAxis::mTickLabelColor = *(const QColor*)x[1].s_class;
    }
    void x_202(Smoke::Stack x) {
        // QColor mSelectedTickLabelColor
        x[0].s_class = (void*)&this->QCPAxis::mSelectedTickLabelColor;
    }
    void x_203(Smoke::Stack x) {
        // QColor mSelectedTickLabelColor=
        this->QCPAxis::mSelectedTickLabelColor = *(const QColor*)x[1].s_class;
    }
    void x_204(Smoke::Stack x) {
        // QString mDateTimeFormat
        x[0].s_class = (void*)&this->QCPAxis::mDateTimeFormat;
    }
    void x_205(Smoke::Stack x) {
        // QString mDateTimeFormat=
        this->QCPAxis::mDateTimeFormat = *(const QString*)x[1].s_class;
    }
    void x_206(Smoke::Stack x) {
        // Qt::TimeSpec mDateTimeSpec
        x[0].s_enum = this->QCPAxis::mDateTimeSpec;
    }
    void x_207(Smoke::Stack x) {
        // Qt::TimeSpec mDateTimeSpec=
        this->QCPAxis::mDateTimeSpec = (Qt::TimeSpec)x[1].s_enum;
    }
    void x_208(Smoke::Stack x) {
        // int mNumberPrecision
        x[0].s_int = this->QCPAxis::mNumberPrecision;
    }
    void x_209(Smoke::Stack x) {
        // int mNumberPrecision=
        this->QCPAxis::mNumberPrecision = (int)x[1].s_int;
    }
    void x_210(Smoke::Stack x) {
        // QLatin1Char mNumberFormatChar
        x[0].s_class = (void*)&this->QCPAxis::mNumberFormatChar;
    }
    void x_211(Smoke::Stack x) {
        // QLatin1Char mNumberFormatChar=
        this->QCPAxis::mNumberFormatChar = *(const QLatin1Char*)x[1].s_class;
    }
    void x_212(Smoke::Stack x) {
        // bool mNumberBeautifulPowers
        x[0].s_bool = this->QCPAxis::mNumberBeautifulPowers;
    }
    void x_213(Smoke::Stack x) {
        // bool mNumberBeautifulPowers=
        this->QCPAxis::mNumberBeautifulPowers = (bool)x[1].s_bool;
    }
    void x_214(Smoke::Stack x) {
        // bool mTicks
        x[0].s_bool = this->QCPAxis::mTicks;
    }
    void x_215(Smoke::Stack x) {
        // bool mTicks=
        this->QCPAxis::mTicks = (bool)x[1].s_bool;
    }
    void x_216(Smoke::Stack x) {
        // double mTickStep
        x[0].s_double = this->QCPAxis::mTickStep;
    }
    void x_217(Smoke::Stack x) {
        // double mTickStep=
        this->QCPAxis::mTickStep = (double)x[1].s_double;
    }
    void x_218(Smoke::Stack x) {
        // int mSubTickCount
        x[0].s_int = this->QCPAxis::mSubTickCount;
    }
    void x_219(Smoke::Stack x) {
        // int mSubTickCount=
        this->QCPAxis::mSubTickCount = (int)x[1].s_int;
    }
    void x_220(Smoke::Stack x) {
        // int mAutoTickCount
        x[0].s_int = this->QCPAxis::mAutoTickCount;
    }
    void x_221(Smoke::Stack x) {
        // int mAutoTickCount=
        this->QCPAxis::mAutoTickCount = (int)x[1].s_int;
    }
    void x_222(Smoke::Stack x) {
        // bool mAutoTicks
        x[0].s_bool = this->QCPAxis::mAutoTicks;
    }
    void x_223(Smoke::Stack x) {
        // bool mAutoTicks=
        this->QCPAxis::mAutoTicks = (bool)x[1].s_bool;
    }
    void x_224(Smoke::Stack x) {
        // bool mAutoTickStep
        x[0].s_bool = this->QCPAxis::mAutoTickStep;
    }
    void x_225(Smoke::Stack x) {
        // bool mAutoTickStep=
        this->QCPAxis::mAutoTickStep = (bool)x[1].s_bool;
    }
    void x_226(Smoke::Stack x) {
        // bool mAutoSubTicks
        x[0].s_bool = this->QCPAxis::mAutoSubTicks;
    }
    void x_227(Smoke::Stack x) {
        // bool mAutoSubTicks=
        this->QCPAxis::mAutoSubTicks = (bool)x[1].s_bool;
    }
    void x_228(Smoke::Stack x) {
        // QPen mTickPen
        x[0].s_class = (void*)&this->QCPAxis::mTickPen;
    }
    void x_229(Smoke::Stack x) {
        // QPen mTickPen=
        this->QCPAxis::mTickPen = *(const QPen*)x[1].s_class;
    }
    void x_230(Smoke::Stack x) {
        // QPen mSelectedTickPen
        x[0].s_class = (void*)&this->QCPAxis::mSelectedTickPen;
    }
    void x_231(Smoke::Stack x) {
        // QPen mSelectedTickPen=
        this->QCPAxis::mSelectedTickPen = *(const QPen*)x[1].s_class;
    }
    void x_232(Smoke::Stack x) {
        // QPen mSubTickPen
        x[0].s_class = (void*)&this->QCPAxis::mSubTickPen;
    }
    void x_233(Smoke::Stack x) {
        // QPen mSubTickPen=
        this->QCPAxis::mSubTickPen = *(const QPen*)x[1].s_class;
    }
    void x_234(Smoke::Stack x) {
        // QPen mSelectedSubTickPen
        x[0].s_class = (void*)&this->QCPAxis::mSelectedSubTickPen;
    }
    void x_235(Smoke::Stack x) {
        // QPen mSelectedSubTickPen=
        this->QCPAxis::mSelectedSubTickPen = *(const QPen*)x[1].s_class;
    }
    void x_236(Smoke::Stack x) {
        // QCPRange mRange
        x[0].s_class = (void*)&this->QCPAxis::mRange;
    }
    void x_237(Smoke::Stack x) {
        // QCPRange mRange=
        this->QCPAxis::mRange = *(const QCPRange*)x[1].s_class;
    }
    void x_238(Smoke::Stack x) {
        // bool mRangeReversed
        x[0].s_bool = this->QCPAxis::mRangeReversed;
    }
    void x_239(Smoke::Stack x) {
        // bool mRangeReversed=
        this->QCPAxis::mRangeReversed = (bool)x[1].s_bool;
    }
    void x_240(Smoke::Stack x) {
        // QCPAxis::ScaleType mScaleType
        x[0].s_enum = this->QCPAxis::mScaleType;
    }
    void x_241(Smoke::Stack x) {
        // QCPAxis::ScaleType mScaleType=
        this->QCPAxis::mScaleType = (QCPAxis::ScaleType)x[1].s_enum;
    }
    void x_242(Smoke::Stack x) {
        // double mScaleLogBase
        x[0].s_double = this->QCPAxis::mScaleLogBase;
    }
    void x_243(Smoke::Stack x) {
        // double mScaleLogBase=
        this->QCPAxis::mScaleLogBase = (double)x[1].s_double;
    }
    void x_244(Smoke::Stack x) {
        // double mScaleLogBaseLogInv
        x[0].s_double = this->QCPAxis::mScaleLogBaseLogInv;
    }
    void x_245(Smoke::Stack x) {
        // double mScaleLogBaseLogInv=
        this->QCPAxis::mScaleLogBaseLogInv = (double)x[1].s_double;
    }
    void x_246(Smoke::Stack x) {
        // QCPGrid* mGrid
        x[0].s_class = (void*)this->QCPAxis::mGrid;
    }
    void x_247(Smoke::Stack x) {
        // QCPGrid* mGrid=
        this->QCPAxis::mGrid = (QCPGrid*)x[1].s_class;
    }
    void x_248(Smoke::Stack x) {
        // QCPAxisPainterPrivate* mAxisPainter
        x[0].s_class = (void*)this->QCPAxis::mAxisPainter;
    }
    void x_249(Smoke::Stack x) {
        // QCPAxisPainterPrivate* mAxisPainter=
        this->QCPAxis::mAxisPainter = (QCPAxisPainterPrivate*)x[1].s_class;
    }
    void x_250(Smoke::Stack x) {
        // int mLowestVisibleTick
        x[0].s_int = this->QCPAxis::mLowestVisibleTick;
    }
    void x_251(Smoke::Stack x) {
        // int mLowestVisibleTick=
        this->QCPAxis::mLowestVisibleTick = (int)x[1].s_int;
    }
    void x_252(Smoke::Stack x) {
        // int mHighestVisibleTick
        x[0].s_int = this->QCPAxis::mHighestVisibleTick;
    }
    void x_253(Smoke::Stack x) {
        // int mHighestVisibleTick=
        this->QCPAxis::mHighestVisibleTick = (int)x[1].s_int;
    }
    void x_254(Smoke::Stack x) {
        // QVector<double> mTickVector
        x[0].s_class = (void*)&this->QCPAxis::mTickVector;
    }
    void x_255(Smoke::Stack x) {
        // QVector<double> mTickVector=
        this->QCPAxis::mTickVector = *(const QVector<double>*)x[1].s_class;
    }
    void x_256(Smoke::Stack x) {
        // QVector<QString> mTickVectorLabels
        x[0].s_class = (void*)&this->QCPAxis::mTickVectorLabels;
    }
    void x_257(Smoke::Stack x) {
        // QVector<QString> mTickVectorLabels=
        this->QCPAxis::mTickVectorLabels = *(const QVector<QString>*)x[1].s_class;
    }
    void x_258(Smoke::Stack x) {
        // QVector<double> mSubTickVector
        x[0].s_class = (void*)&this->QCPAxis::mSubTickVector;
    }
    void x_259(Smoke::Stack x) {
        // QVector<double> mSubTickVector=
        this->QCPAxis::mSubTickVector = *(const QVector<double>*)x[1].s_class;
    }
    void x_260(Smoke::Stack x) {
        // bool mCachedMarginValid
        x[0].s_bool = this->QCPAxis::mCachedMarginValid;
    }
    void x_261(Smoke::Stack x) {
        // bool mCachedMarginValid=
        this->QCPAxis::mCachedMarginValid = (bool)x[1].s_bool;
    }
    void x_262(Smoke::Stack x) {
        // int mCachedMargin
        x[0].s_int = this->QCPAxis::mCachedMargin;
    }
    void x_263(Smoke::Stack x) {
        // int mCachedMargin=
        this->QCPAxis::mCachedMargin = (int)x[1].s_int;
    }
    static void x_264(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::atLeft;
    }
    static void x_265(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::atRight;
    }
    static void x_266(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::atTop;
    }
    static void x_267(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::atBottom;
    }
    static void x_268(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::ltNumber;
    }
    static void x_269(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::ltDateTime;
    }
    static void x_270(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::lsInside;
    }
    static void x_271(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::lsOutside;
    }
    static void x_272(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::stLinear;
    }
    static void x_273(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::stLogarithmic;
    }
    static void x_274(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::spNone;
    }
    static void x_275(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::spAxis;
    }
    static void x_276(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::spTickLabels;
    }
    static void x_277(Smoke::Stack x) {
        x[0].s_enum = (long)QCPAxis::spAxisLabel;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(199, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPAxis::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(200, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPAxis::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(205, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPAxis::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(314, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPAxis::selectTest(x1, x2, x3);
    }
    virtual void setupTickVectors() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(335, (void*)this, x)) return;
        this->QCPAxis::setupTickVectors();
    }
    virtual void generateAutoTicks() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(336, (void*)this, x)) return;
        this->QCPAxis::generateAutoTicks();
    }
    virtual int calculateAutoSubTickCount(double x1) const {
        Smoke::StackItem x[2];
        x[1].s_double = x1;
        if (this->_binding->callMethod(337, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPAxis::calculateAutoSubTickCount(x1);
    }
    virtual int calculateMargin() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(338, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPAxis::calculateMargin();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(339, (void*)this, x)) return;
        this->QCPAxis::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(340, (void*)this, x)) return;
        this->QCPAxis::draw(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(341, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAxis::selectionCategory();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(342, (void*)this, x)) return;
        this->QCPAxis::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(343, (void*)this, x)) return;
        this->QCPAxis::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 15: //QCPAxis::AxisType
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPAxis::AxisType;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPAxis::AxisType*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPAxis::AxisType*)xdata = (QCPAxis::AxisType)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPAxis::AxisType*)xdata;
                    break;
            }
            break;
        case 17: //QCPAxis::LabelType
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPAxis::LabelType;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPAxis::LabelType*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPAxis::LabelType*)xdata = (QCPAxis::LabelType)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPAxis::LabelType*)xdata;
                    break;
            }
            break;
        case 16: //QCPAxis::LabelSide
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPAxis::LabelSide;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPAxis::LabelSide*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPAxis::LabelSide*)xdata = (QCPAxis::LabelSide)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPAxis::LabelSide*)xdata;
                    break;
            }
            break;
        case 18: //QCPAxis::ScaleType
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPAxis::ScaleType;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPAxis::ScaleType*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPAxis::ScaleType*)xdata = (QCPAxis::ScaleType)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPAxis::ScaleType*)xdata;
                    break;
            }
            break;
        case 19: //QCPAxis::SelectablePart
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPAxis::SelectablePart;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPAxis::SelectablePart*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPAxis::SelectablePart*)xdata = (QCPAxis::SelectablePart)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPAxis::SelectablePart*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPAxis() { this->_binding->deleted(7, (void*)this); }
};
void xenum_QCPAxis(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPAxis::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPAxis(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPAxis *xself = (x_QCPAxis*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPAxis::x_3(args);	break;
        case 4: x_QCPAxis::x_4(args);	break;
        case 5: x_QCPAxis::x_5(args);	break;
        case 6: x_QCPAxis::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPAxis::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: xself->x_81(args);	break;
        case 82: xself->x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: xself->x_84(args);	break;
        case 85: xself->x_85(args);	break;
        case 86: xself->x_86(args);	break;
        case 87: xself->x_87(args);	break;
        case 88: xself->x_88(args);	break;
        case 89: xself->x_89(args);	break;
        case 90: xself->x_90(args);	break;
        case 91: xself->x_91(args);	break;
        case 92: xself->x_92(args);	break;
        case 93: xself->x_93(args);	break;
        case 94: xself->x_94(args);	break;
        case 95: xself->x_95(args);	break;
        case 96: xself->x_96(args);	break;
        case 97: xself->x_97(args);	break;
        case 98: xself->x_98(args);	break;
        case 99: xself->x_99(args);	break;
        case 100: xself->x_100(args);	break;
        case 101: xself->x_101(args);	break;
        case 102: xself->x_102(args);	break;
        case 103: xself->x_103(args);	break;
        case 104: xself->x_104(args);	break;
        case 105: xself->x_105(args);	break;
        case 106: xself->x_106(args);	break;
        case 107: xself->x_107(args);	break;
        case 108: xself->x_108(args);	break;
        case 109: xself->x_109(args);	break;
        case 110: xself->x_110(args);	break;
        case 111: xself->x_111(args);	break;
        case 112: xself->x_112(args);	break;
        case 113: xself->x_113(args);	break;
        case 114: xself->x_114(args);	break;
        case 115: xself->x_115(args);	break;
        case 116: xself->x_116(args);	break;
        case 117: xself->x_117(args);	break;
        case 118: xself->x_118(args);	break;
        case 119: xself->x_119(args);	break;
        case 120: xself->x_120(args);	break;
        case 121: xself->x_121(args);	break;
        case 122: xself->x_122(args);	break;
        case 123: xself->x_123(args);	break;
        case 124: xself->x_124(args);	break;
        case 125: xself->x_125(args);	break;
        case 126: xself->x_126(args);	break;
        case 127: xself->x_127(args);	break;
        case 128: x_QCPAxis::x_128(args);	break;
        case 129: x_QCPAxis::x_129(args);	break;
        case 130: x_QCPAxis::x_130(args);	break;
        case 131: xself->x_131(args);	break;
        case 132: xself->x_132(args);	break;
        case 133: xself->x_133(args);	break;
        case 134: xself->x_134(args);	break;
        case 135: xself->x_135(args);	break;
        case 136: xself->x_136(args);	break;
        case 137: xself->x_137(args);	break;
        case 138: xself->x_138(args);	break;
        case 139: xself->x_139(args);	break;
        case 140: xself->x_140(args);	break;
        case 141: xself->x_141(args);	break;
        case 142: xself->x_142(args);	break;
        case 143: xself->x_143(args);	break;
        case 144: xself->x_144(args);	break;
        case 145: xself->x_145(args);	break;
        case 146: xself->x_146(args);	break;
        case 147: xself->x_147(args);	break;
        case 148: xself->x_148(args);	break;
        case 149: xself->x_149(args);	break;
        case 150: xself->x_150(args);	break;
        case 151: xself->x_151(args);	break;
        case 152: xself->x_152(args);	break;
        case 153: xself->x_153(args);	break;
        case 154: xself->x_154(args);	break;
        case 155: xself->x_155(args);	break;
        case 156: x_QCPAxis::x_156(args);	break;
        case 157: x_QCPAxis::x_157(args);	break;
        case 158: xself->x_158(args);	break;
        case 159: xself->x_159(args);	break;
        case 160: xself->x_160(args);	break;
        case 161: xself->x_161(args);	break;
        case 162: xself->x_162(args);	break;
        case 163: x_QCPAxis::x_163(args);	break;
        case 164: xself->x_164(args);	break;
        case 165: xself->x_165(args);	break;
        case 166: xself->x_166(args);	break;
        case 167: xself->x_167(args);	break;
        case 168: xself->x_168(args);	break;
        case 169: xself->x_169(args);	break;
        case 170: xself->x_170(args);	break;
        case 171: xself->x_171(args);	break;
        case 172: xself->x_172(args);	break;
        case 173: xself->x_173(args);	break;
        case 174: xself->x_174(args);	break;
        case 175: xself->x_175(args);	break;
        case 176: xself->x_176(args);	break;
        case 177: xself->x_177(args);	break;
        case 178: xself->x_178(args);	break;
        case 179: xself->x_179(args);	break;
        case 180: xself->x_180(args);	break;
        case 181: xself->x_181(args);	break;
        case 182: xself->x_182(args);	break;
        case 183: xself->x_183(args);	break;
        case 184: xself->x_184(args);	break;
        case 185: xself->x_185(args);	break;
        case 186: xself->x_186(args);	break;
        case 187: xself->x_187(args);	break;
        case 188: xself->x_188(args);	break;
        case 189: xself->x_189(args);	break;
        case 190: xself->x_190(args);	break;
        case 191: xself->x_191(args);	break;
        case 192: xself->x_192(args);	break;
        case 193: xself->x_193(args);	break;
        case 194: xself->x_194(args);	break;
        case 195: xself->x_195(args);	break;
        case 196: xself->x_196(args);	break;
        case 197: xself->x_197(args);	break;
        case 198: xself->x_198(args);	break;
        case 199: xself->x_199(args);	break;
        case 200: xself->x_200(args);	break;
        case 201: xself->x_201(args);	break;
        case 202: xself->x_202(args);	break;
        case 203: xself->x_203(args);	break;
        case 204: xself->x_204(args);	break;
        case 205: xself->x_205(args);	break;
        case 206: xself->x_206(args);	break;
        case 207: xself->x_207(args);	break;
        case 208: xself->x_208(args);	break;
        case 209: xself->x_209(args);	break;
        case 210: xself->x_210(args);	break;
        case 211: xself->x_211(args);	break;
        case 212: xself->x_212(args);	break;
        case 213: xself->x_213(args);	break;
        case 214: xself->x_214(args);	break;
        case 215: xself->x_215(args);	break;
        case 216: xself->x_216(args);	break;
        case 217: xself->x_217(args);	break;
        case 218: xself->x_218(args);	break;
        case 219: xself->x_219(args);	break;
        case 220: xself->x_220(args);	break;
        case 221: xself->x_221(args);	break;
        case 222: xself->x_222(args);	break;
        case 223: xself->x_223(args);	break;
        case 224: xself->x_224(args);	break;
        case 225: xself->x_225(args);	break;
        case 226: xself->x_226(args);	break;
        case 227: xself->x_227(args);	break;
        case 228: xself->x_228(args);	break;
        case 229: xself->x_229(args);	break;
        case 230: xself->x_230(args);	break;
        case 231: xself->x_231(args);	break;
        case 232: xself->x_232(args);	break;
        case 233: xself->x_233(args);	break;
        case 234: xself->x_234(args);	break;
        case 235: xself->x_235(args);	break;
        case 236: xself->x_236(args);	break;
        case 237: xself->x_237(args);	break;
        case 238: xself->x_238(args);	break;
        case 239: xself->x_239(args);	break;
        case 240: xself->x_240(args);	break;
        case 241: xself->x_241(args);	break;
        case 242: xself->x_242(args);	break;
        case 243: xself->x_243(args);	break;
        case 244: xself->x_244(args);	break;
        case 245: xself->x_245(args);	break;
        case 246: xself->x_246(args);	break;
        case 247: xself->x_247(args);	break;
        case 248: xself->x_248(args);	break;
        case 249: xself->x_249(args);	break;
        case 250: xself->x_250(args);	break;
        case 251: xself->x_251(args);	break;
        case 252: xself->x_252(args);	break;
        case 253: xself->x_253(args);	break;
        case 254: xself->x_254(args);	break;
        case 255: xself->x_255(args);	break;
        case 256: xself->x_256(args);	break;
        case 257: xself->x_257(args);	break;
        case 258: xself->x_258(args);	break;
        case 259: xself->x_259(args);	break;
        case 260: xself->x_260(args);	break;
        case 261: xself->x_261(args);	break;
        case 262: xself->x_262(args);	break;
        case 263: xself->x_263(args);	break;
        case 264: x_QCPAxis::x_264(args);	break;
        case 265: x_QCPAxis::x_265(args);	break;
        case 266: x_QCPAxis::x_266(args);	break;
        case 267: x_QCPAxis::x_267(args);	break;
        case 268: x_QCPAxis::x_268(args);	break;
        case 269: x_QCPAxis::x_269(args);	break;
        case 270: x_QCPAxis::x_270(args);	break;
        case 271: x_QCPAxis::x_271(args);	break;
        case 272: x_QCPAxis::x_272(args);	break;
        case 273: x_QCPAxis::x_273(args);	break;
        case 274: x_QCPAxis::x_274(args);	break;
        case 275: x_QCPAxis::x_275(args);	break;
        case 276: x_QCPAxis::x_276(args);	break;
        case 277: x_QCPAxis::x_277(args);	break;
        case 278: delete (QCPAxis*)xself;	break;
    }
}

}
