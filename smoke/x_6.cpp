//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPItemBracket : public QCPItemBracket, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemBracket*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemBracket*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemBracket*>(this))) {
            void* xret = this->QCPItemBracket::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemBracket::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemBracket::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemBracket::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemBracket::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemBracket*>(this))) {
            int xret = this->QCPItemBracket::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemBracket* QCPItemBracket(QCustomPlot*)
        x_QCPItemBracket* xret = new x_QCPItemBracket((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemBracket(QCustomPlot* x1) : QCPItemBracket(x1) {}
    void x_9(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_10(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_11(Smoke::Stack x) {
        // double length() const
        double xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::length();
        x[0].s_double = xret;
    }
    void x_12(Smoke::Stack x) {
        // QCPItemBracket::BracketStyle style() const
        QCPItemBracket::BracketStyle xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::style();
        x[0].s_enum = xret;
    }
    void x_13(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemBracket::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemBracket::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setLength(double)
        this->QCPItemBracket::setLength((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setStyle(QCPItemBracket::BracketStyle)
        this->QCPItemBracket::setStyle((QCPItemBracket::BracketStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemBracket*>(this))) {
            double xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemBracket*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_18(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemBracket*>(this))) {
            this->QCPItemBracket::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_19(Smoke::Stack x) {
        // virtual QPointF anchorPixelPoint(int) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemBracket*>(this))) {
            QPointF xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        } else {
            QPointF xret = ((const x_QCPItemBracket*)this)->anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        }
    }
    void x_20(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    static void x_21(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemBracket::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_22(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemBracket::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_23(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemBracket*)this)->QCPItemBracket::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_24(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemBracket::staticMetaObject;
    }
    void x_25(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemBracket::mPen;
    }
    void x_26(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemBracket::mPen = *(const QPen*)x[1].s_class;
    }
    void x_27(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemBracket::mSelectedPen;
    }
    void x_28(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemBracket::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    void x_29(Smoke::Stack x) {
        // double mLength
        x[0].s_double = this->QCPItemBracket::mLength;
    }
    void x_30(Smoke::Stack x) {
        // double mLength=
        this->QCPItemBracket::mLength = (double)x[1].s_double;
    }
    void x_31(Smoke::Stack x) {
        // QCPItemBracket::BracketStyle mStyle
        x[0].s_enum = this->QCPItemBracket::mStyle;
    }
    void x_32(Smoke::Stack x) {
        // QCPItemBracket::BracketStyle mStyle=
        this->QCPItemBracket::mStyle = (QCPItemBracket::BracketStyle)x[1].s_enum;
    }
    static void x_33(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemBracket::bsSquare;
    }
    static void x_34(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemBracket::bsRound;
    }
    static void x_35(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemBracket::bsCurly;
    }
    static void x_36(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemBracket::bsCalligraphic;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemBracket::aiCenter;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1267, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemBracket::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1268, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemBracket::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1273, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemBracket::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1283, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemBracket::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1284, (void*)this, x)) return;
        this->QCPItemBracket::draw(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1285, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPItemBracket::anchorPixelPoint(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 63: //QCPItemBracket::BracketStyle
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPItemBracket::BracketStyle;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPItemBracket::BracketStyle*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPItemBracket::BracketStyle*)xdata = (QCPItemBracket::BracketStyle)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPItemBracket::BracketStyle*)xdata;
                    break;
            }
            break;
        case 62: //QCPItemBracket::AnchorIndex
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPItemBracket::AnchorIndex;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPItemBracket::AnchorIndex*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPItemBracket::AnchorIndex*)xdata = (QCPItemBracket::AnchorIndex)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPItemBracket::AnchorIndex*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPItemBracket() { this->_binding->deleted(26, (void*)this); }
};
void xenum_QCPItemBracket(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPItemBracket::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPItemBracket(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemBracket *xself = (x_QCPItemBracket*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemBracket::x_3(args);	break;
        case 4: x_QCPItemBracket::x_4(args);	break;
        case 5: x_QCPItemBracket::x_5(args);	break;
        case 6: x_QCPItemBracket::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemBracket::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: x_QCPItemBracket::x_21(args);	break;
        case 22: x_QCPItemBracket::x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: x_QCPItemBracket::x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: x_QCPItemBracket::x_33(args);	break;
        case 34: x_QCPItemBracket::x_34(args);	break;
        case 35: x_QCPItemBracket::x_35(args);	break;
        case 36: x_QCPItemBracket::x_36(args);	break;
        case 37: x_QCPItemBracket::x_37(args);	break;
        case 38: delete (QCPItemBracket*)xself;	break;
    }
}
class x_QCPItemCurve : public QCPItemCurve, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemCurve*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemCurve*)this)->QCPItemCurve::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemCurve*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemCurve*>(this))) {
            void* xret = this->QCPItemCurve::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemCurve::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemCurve::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemCurve::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemCurve::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemCurve*>(this))) {
            int xret = this->QCPItemCurve::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemCurve* QCPItemCurve(QCustomPlot*)
        x_QCPItemCurve* xret = new x_QCPItemCurve((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemCurve(QCustomPlot* x1) : QCPItemCurve(x1) {}
    void x_9(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemCurve*)this)->QCPItemCurve::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_10(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemCurve*)this)->QCPItemCurve::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_11(Smoke::Stack x) {
        // QCPLineEnding head() const
        QCPLineEnding xret = ((const x_QCPItemCurve*)this)->QCPItemCurve::head();
        x[0].s_class = (void*)new QCPLineEnding(xret);
    }
    void x_12(Smoke::Stack x) {
        // QCPLineEnding tail() const
        QCPLineEnding xret = ((const x_QCPItemCurve*)this)->QCPItemCurve::tail();
        x[0].s_class = (void*)new QCPLineEnding(xret);
    }
    void x_13(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemCurve::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemCurve::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setHead(const QCPLineEnding&)
        this->QCPItemCurve::setHead(*(const QCPLineEnding*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setTail(const QCPLineEnding&)
        this->QCPItemCurve::setTail(*(const QCPLineEnding*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemCurve*>(this))) {
            double xret = ((const x_QCPItemCurve*)this)->QCPItemCurve::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemCurve*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_18(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemCurve*>(this))) {
            this->QCPItemCurve::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_19(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemCurve*)this)->QCPItemCurve::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    static void x_20(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemCurve::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_21(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemCurve::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_22(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemCurve*)this)->QCPItemCurve::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_23(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemCurve::staticMetaObject;
    }
    void x_24(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemCurve::mPen;
    }
    void x_25(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemCurve::mPen = *(const QPen*)x[1].s_class;
    }
    void x_26(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemCurve::mSelectedPen;
    }
    void x_27(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemCurve::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    void x_28(Smoke::Stack x) {
        // QCPLineEnding mHead
        x[0].s_class = (void*)&this->QCPItemCurve::mHead;
    }
    void x_29(Smoke::Stack x) {
        // QCPLineEnding mHead=
        this->QCPItemCurve::mHead = *(const QCPLineEnding*)x[1].s_class;
    }
    void x_30(Smoke::Stack x) {
        // QCPLineEnding mTail
        x[0].s_class = (void*)&this->QCPItemCurve::mTail;
    }
    void x_31(Smoke::Stack x) {
        // QCPLineEnding mTail=
        this->QCPItemCurve::mTail = *(const QCPLineEnding*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1305, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemCurve::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1306, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemCurve::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1311, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemCurve::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1321, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemCurve::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1322, (void*)this, x)) return;
        this->QCPItemCurve::draw(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(31, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::anchorPixelPoint(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPItemCurve() { this->_binding->deleted(27, (void*)this); }
};
void xcall_QCPItemCurve(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemCurve *xself = (x_QCPItemCurve*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemCurve::x_3(args);	break;
        case 4: x_QCPItemCurve::x_4(args);	break;
        case 5: x_QCPItemCurve::x_5(args);	break;
        case 6: x_QCPItemCurve::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemCurve::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: x_QCPItemCurve::x_20(args);	break;
        case 21: x_QCPItemCurve::x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: x_QCPItemCurve::x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: delete (QCPItemCurve*)xself;	break;
    }
}
class x_QCPItemEllipse : public QCPItemEllipse, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemEllipse*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemEllipse*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemEllipse*>(this))) {
            void* xret = this->QCPItemEllipse::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemEllipse::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemEllipse::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemEllipse::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemEllipse::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemEllipse*>(this))) {
            int xret = this->QCPItemEllipse::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemEllipse* QCPItemEllipse(QCustomPlot*)
        x_QCPItemEllipse* xret = new x_QCPItemEllipse((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemEllipse(QCustomPlot* x1) : QCPItemEllipse(x1) {}
    void x_9(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_10(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_11(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_12(Smoke::Stack x) {
        // QBrush selectedBrush() const
        QBrush xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::selectedBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_13(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemEllipse::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemEllipse::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QCPItemEllipse::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setSelectedBrush(const QBrush&)
        this->QCPItemEllipse::setSelectedBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemEllipse*>(this))) {
            double xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemEllipse*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_18(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemEllipse*>(this))) {
            this->QCPItemEllipse::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_19(Smoke::Stack x) {
        // virtual QPointF anchorPixelPoint(int) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemEllipse*>(this))) {
            QPointF xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        } else {
            QPointF xret = ((const x_QCPItemEllipse*)this)->anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        }
    }
    void x_20(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_21(Smoke::Stack x) {
        // QBrush mainBrush() const
        QBrush xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::mainBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    static void x_22(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemEllipse::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_23(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemEllipse::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_24(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemEllipse*)this)->QCPItemEllipse::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_25(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemEllipse::staticMetaObject;
    }
    void x_26(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemEllipse::mPen;
    }
    void x_27(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemEllipse::mPen = *(const QPen*)x[1].s_class;
    }
    void x_28(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemEllipse::mSelectedPen;
    }
    void x_29(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemEllipse::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    void x_30(Smoke::Stack x) {
        // QBrush mBrush
        x[0].s_class = (void*)&this->QCPItemEllipse::mBrush;
    }
    void x_31(Smoke::Stack x) {
        // QBrush mBrush=
        this->QCPItemEllipse::mBrush = *(const QBrush*)x[1].s_class;
    }
    void x_32(Smoke::Stack x) {
        // QBrush mSelectedBrush
        x[0].s_class = (void*)&this->QCPItemEllipse::mSelectedBrush;
    }
    void x_33(Smoke::Stack x) {
        // QBrush mSelectedBrush=
        this->QCPItemEllipse::mSelectedBrush = *(const QBrush*)x[1].s_class;
    }
    static void x_34(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiTopLeftRim;
    }
    static void x_35(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiTop;
    }
    static void x_36(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiTopRightRim;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiRight;
    }
    static void x_38(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiBottomRightRim;
    }
    static void x_39(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiBottom;
    }
    static void x_40(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiBottomLeftRim;
    }
    static void x_41(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiLeft;
    }
    static void x_42(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemEllipse::aiCenter;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1337, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemEllipse::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1338, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemEllipse::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1343, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemEllipse::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1353, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemEllipse::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1354, (void*)this, x)) return;
        this->QCPItemEllipse::draw(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1355, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPItemEllipse::anchorPixelPoint(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 66: //QCPItemEllipse::AnchorIndex
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPItemEllipse::AnchorIndex;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPItemEllipse::AnchorIndex*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPItemEllipse::AnchorIndex*)xdata = (QCPItemEllipse::AnchorIndex)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPItemEllipse::AnchorIndex*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPItemEllipse() { this->_binding->deleted(28, (void*)this); }
};
void xenum_QCPItemEllipse(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPItemEllipse::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPItemEllipse(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemEllipse *xself = (x_QCPItemEllipse*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemEllipse::x_3(args);	break;
        case 4: x_QCPItemEllipse::x_4(args);	break;
        case 5: x_QCPItemEllipse::x_5(args);	break;
        case 6: x_QCPItemEllipse::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemEllipse::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: x_QCPItemEllipse::x_22(args);	break;
        case 23: x_QCPItemEllipse::x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: x_QCPItemEllipse::x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: x_QCPItemEllipse::x_34(args);	break;
        case 35: x_QCPItemEllipse::x_35(args);	break;
        case 36: x_QCPItemEllipse::x_36(args);	break;
        case 37: x_QCPItemEllipse::x_37(args);	break;
        case 38: x_QCPItemEllipse::x_38(args);	break;
        case 39: x_QCPItemEllipse::x_39(args);	break;
        case 40: x_QCPItemEllipse::x_40(args);	break;
        case 41: x_QCPItemEllipse::x_41(args);	break;
        case 42: x_QCPItemEllipse::x_42(args);	break;
        case 43: delete (QCPItemEllipse*)xself;	break;
    }
}
class x_QCPItemLine : public QCPItemLine, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemLine*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemLine*)this)->QCPItemLine::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemLine*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemLine*>(this))) {
            void* xret = this->QCPItemLine::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemLine::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemLine::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemLine::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemLine::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemLine*>(this))) {
            int xret = this->QCPItemLine::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemLine* QCPItemLine(QCustomPlot*)
        x_QCPItemLine* xret = new x_QCPItemLine((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemLine(QCustomPlot* x1) : QCPItemLine(x1) {}
    void x_9(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemLine*)this)->QCPItemLine::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_10(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemLine*)this)->QCPItemLine::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_11(Smoke::Stack x) {
        // QCPLineEnding head() const
        QCPLineEnding xret = ((const x_QCPItemLine*)this)->QCPItemLine::head();
        x[0].s_class = (void*)new QCPLineEnding(xret);
    }
    void x_12(Smoke::Stack x) {
        // QCPLineEnding tail() const
        QCPLineEnding xret = ((const x_QCPItemLine*)this)->QCPItemLine::tail();
        x[0].s_class = (void*)new QCPLineEnding(xret);
    }
    void x_13(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemLine::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemLine::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setHead(const QCPLineEnding&)
        this->QCPItemLine::setHead(*(const QCPLineEnding*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setTail(const QCPLineEnding&)
        this->QCPItemLine::setTail(*(const QCPLineEnding*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemLine*>(this))) {
            double xret = ((const x_QCPItemLine*)this)->QCPItemLine::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemLine*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_18(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemLine*>(this))) {
            this->QCPItemLine::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_19(Smoke::Stack x) {
        // QLineF getRectClippedLine(const QVector2D&, const QVector2D&, const QRect&) const
        QLineF xret = ((const x_QCPItemLine*)this)->QCPItemLine::getRectClippedLine(*(const QVector2D*)x[1].s_class,*(const QVector2D*)x[2].s_class,*(const QRect*)x[3].s_class);
        x[0].s_class = (void*)new QLineF(xret);
    }
    void x_20(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemLine*)this)->QCPItemLine::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    static void x_21(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemLine::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_22(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemLine::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_23(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemLine*)this)->QCPItemLine::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_24(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemLine::staticMetaObject;
    }
    void x_25(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemLine::mPen;
    }
    void x_26(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemLine::mPen = *(const QPen*)x[1].s_class;
    }
    void x_27(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemLine::mSelectedPen;
    }
    void x_28(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemLine::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    void x_29(Smoke::Stack x) {
        // QCPLineEnding mHead
        x[0].s_class = (void*)&this->QCPItemLine::mHead;
    }
    void x_30(Smoke::Stack x) {
        // QCPLineEnding mHead=
        this->QCPItemLine::mHead = *(const QCPLineEnding*)x[1].s_class;
    }
    void x_31(Smoke::Stack x) {
        // QCPLineEnding mTail
        x[0].s_class = (void*)&this->QCPItemLine::mTail;
    }
    void x_32(Smoke::Stack x) {
        // QCPLineEnding mTail=
        this->QCPItemLine::mTail = *(const QCPLineEnding*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1380, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemLine::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1381, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemLine::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1386, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemLine::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1396, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemLine::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1397, (void*)this, x)) return;
        this->QCPItemLine::draw(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(31, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::anchorPixelPoint(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPItemLine() { this->_binding->deleted(29, (void*)this); }
};
void xcall_QCPItemLine(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemLine *xself = (x_QCPItemLine*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemLine::x_3(args);	break;
        case 4: x_QCPItemLine::x_4(args);	break;
        case 5: x_QCPItemLine::x_5(args);	break;
        case 6: x_QCPItemLine::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemLine::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: x_QCPItemLine::x_21(args);	break;
        case 22: x_QCPItemLine::x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: x_QCPItemLine::x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: delete (QCPItemLine*)xself;	break;
    }
}

}
