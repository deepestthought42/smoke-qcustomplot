//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPCurve : public QCPCurve, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            const QMetaObject* xret = ((const x_QCPCurve*)this)->QCPCurve::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPCurve*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            void* xret = this->QCPCurve::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPCurve::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPCurve::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPCurve::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPCurve::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            int xret = this->QCPCurve::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPCurve* QCPCurve(QCPAxis*, QCPAxis*)
        x_QCPCurve* xret = new x_QCPCurve((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPCurve(QCPAxis* x1, QCPAxis* x2) : QCPCurve(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QMap<double,QCPCurveData>* data() const
        QMap<double,QCPCurveData>* xret = ((const x_QCPCurve*)this)->QCPCurve::data();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QCPScatterStyle scatterStyle() const
        QCPScatterStyle xret = ((const x_QCPCurve*)this)->QCPCurve::scatterStyle();
        x[0].s_class = (void*)new QCPScatterStyle(xret);
    }
    void x_11(Smoke::Stack x) {
        // QCPCurve::LineStyle lineStyle() const
        QCPCurve::LineStyle xret = ((const x_QCPCurve*)this)->QCPCurve::lineStyle();
        x[0].s_enum = xret;
    }
    void x_12(Smoke::Stack x) {
        // void setData(QMap<double,QCPCurveData>*, bool)
        this->QCPCurve::setData((QMap<double,QCPCurveData>*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // void setData(const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPCurve::setData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setData(const QVector<double>&, const QVector<double>&)
        this->QCPCurve::setData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setScatterStyle(const QCPScatterStyle&)
        this->QCPCurve::setScatterStyle(*(const QCPScatterStyle*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setLineStyle(QCPCurve::LineStyle)
        this->QCPCurve::setLineStyle((QCPCurve::LineStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void addData(const QMap<double,QCPCurveData>&)
        this->QCPCurve::addData(*(const QMap<double,QCPCurveData>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void addData(const QCPCurveData&)
        this->QCPCurve::addData(*(const QCPCurveData*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void addData(double, double, double)
        this->QCPCurve::addData((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void addData(double, double)
        this->QCPCurve::addData((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void addData(const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPCurve::addData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void removeDataBefore(double)
        this->QCPCurve::removeDataBefore((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void removeDataAfter(double)
        this->QCPCurve::removeDataAfter((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void removeData(double, double)
        this->QCPCurve::removeData((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void removeData(double)
        this->QCPCurve::removeData((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // virtual void clearData()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            this->QCPCurve::clearData();
            (void)x; // noop (for compiler warning)
        } else {
            this->clearData();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_27(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            double xret = ((const x_QCPCurve*)this)->QCPCurve::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPCurve*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_28(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            this->QCPCurve::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_29(Smoke::Stack x) {
        // virtual void drawLegendIcon(QCPPainter*, const QRectF&) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            ((const x_QCPCurve*)this)->QCPCurve::drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPCurve*)this)->drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_30(Smoke::Stack x) {
        // virtual QCPRange getKeyRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            QCPRange xret = ((const x_QCPCurve*)this)->QCPCurve::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPCurve*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_31(Smoke::Stack x) {
        // virtual QCPRange getValueRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            QCPRange xret = ((const x_QCPCurve*)this)->QCPCurve::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPCurve*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_32(Smoke::Stack x) {
        // virtual void drawScatterPlot(QCPPainter*, const QVector<QPointF>*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPCurve*>(this))) {
            ((const x_QCPCurve*)this)->QCPCurve::drawScatterPlot((QCPPainter*)x[1].s_class,(const QVector<QPointF>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPCurve*)this)->drawScatterPlot((QCPPainter*)x[1].s_class,(const QVector<QPointF>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_33(Smoke::Stack x) {
        // void getCurveData(QVector<QPointF>*) const
        ((const x_QCPCurve*)this)->QCPCurve::getCurveData((QVector<QPointF>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // int getRegion(double, double, double, double, double, double) const
        int xret = ((const x_QCPCurve*)this)->QCPCurve::getRegion((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double);
        x[0].s_int = xret;
    }
    void x_35(Smoke::Stack x) {
        // QPointF getOptimizedPoint(int, double, double, double, double, double, double, double, double) const
        QPointF xret = ((const x_QCPCurve*)this)->QCPCurve::getOptimizedPoint((int)x[1].s_int,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double,(double)x[7].s_double,(double)x[8].s_double,(double)x[9].s_double);
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_36(Smoke::Stack x) {
        // QVector<QPointF> getOptimizedCornerPoints(int, int, double, double, double, double, double, double, double, double) const
        QVector<QPointF> xret = ((const x_QCPCurve*)this)->QCPCurve::getOptimizedCornerPoints((int)x[1].s_int,(int)x[2].s_int,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double,(double)x[7].s_double,(double)x[8].s_double,(double)x[9].s_double,(double)x[10].s_double);
        x[0].s_class = (void*)new QVector<QPointF>(xret);
    }
    void x_37(Smoke::Stack x) {
        // bool mayTraverse(int, int) const
        bool xret = ((const x_QCPCurve*)this)->QCPCurve::mayTraverse((int)x[1].s_int,(int)x[2].s_int);
        x[0].s_bool = xret;
    }
    void x_38(Smoke::Stack x) {
        // bool getTraverse(double, double, double, double, double, double, double, double, QPointF&, QPointF&) const
        bool xret = ((const x_QCPCurve*)this)->QCPCurve::getTraverse((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double,(double)x[7].s_double,(double)x[8].s_double,*(QPointF*)x[9].s_class,*(QPointF*)x[10].s_class);
        x[0].s_bool = xret;
    }
    void x_39(Smoke::Stack x) {
        // void getTraverseCornerPoints(int, int, double, double, double, double, QVector<QPointF>&, QVector<QPointF>&) const
        ((const x_QCPCurve*)this)->QCPCurve::getTraverseCornerPoints((int)x[1].s_int,(int)x[2].s_int,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double,*(QVector<QPointF>*)x[7].s_class,*(QVector<QPointF>*)x[8].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_40(Smoke::Stack x) {
        // double pointDistance(const QPointF&) const
        double xret = ((const x_QCPCurve*)this)->QCPCurve::pointDistance(*(const QPointF*)x[1].s_class);
        x[0].s_double = xret;
    }
    static void x_41(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPCurve::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_42(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPCurve::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_43(Smoke::Stack x) {
        // void setData(QMap<double,QCPCurveData>*)
        this->QCPCurve::setData((QMap<double,QCPCurveData>*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_44(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPCurve*)this)->QCPCurve::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    void x_45(Smoke::Stack x) {
        // QCPRange getKeyRange(bool&) const
        QCPRange xret = ((const x_QCPCurve*)this)->QCPCurve::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_46(Smoke::Stack x) {
        // QCPRange getValueRange(bool&) const
        QCPRange xret = ((const x_QCPCurve*)this)->QCPCurve::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    static void x_47(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPCurve::staticMetaObject;
    }
    void x_48(Smoke::Stack x) {
        // QMap<double,QCPCurveData>* mData
        x[0].s_class = (void*)this->QCPCurve::mData;
    }
    void x_49(Smoke::Stack x) {
        // QMap<double,QCPCurveData>* mData=
        this->QCPCurve::mData = (QMap<double,QCPCurveData>*)x[1].s_class;
    }
    void x_50(Smoke::Stack x) {
        // QCPScatterStyle mScatterStyle
        x[0].s_class = (void*)&this->QCPCurve::mScatterStyle;
    }
    void x_51(Smoke::Stack x) {
        // QCPScatterStyle mScatterStyle=
        this->QCPCurve::mScatterStyle = *(const QCPScatterStyle*)x[1].s_class;
    }
    void x_52(Smoke::Stack x) {
        // QCPCurve::LineStyle mLineStyle
        x[0].s_enum = this->QCPCurve::mLineStyle;
    }
    void x_53(Smoke::Stack x) {
        // QCPCurve::LineStyle mLineStyle=
        this->QCPCurve::mLineStyle = (QCPCurve::LineStyle)x[1].s_enum;
    }
    static void x_54(Smoke::Stack x) {
        x[0].s_enum = (long)QCPCurve::lsNone;
    }
    static void x_55(Smoke::Stack x) {
        x[0].s_enum = (long)QCPCurve::lsLine;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(916, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPCurve::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(917, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPCurve::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(922, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPCurve::qt_metacall(x1, x2, x3);
    }
    virtual void clearData() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(941, (void*)this, x)) return;
        this->QCPCurve::clearData();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(942, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPCurve::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(943, (void*)this, x)) return;
        this->QCPCurve::draw(x1);
    }
    virtual void drawLegendIcon(QCPPainter* x1, const QRectF& x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        if (this->_binding->callMethod(944, (void*)this, x)) return;
        this->QCPCurve::drawLegendIcon(x1, x2);
    }
    virtual QCPRange getKeyRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(945, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPCurve::getKeyRange(x1, x2);
    }
    virtual QCPRange getValueRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(946, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPCurve::getValueRange(x1, x2);
    }
    virtual void drawScatterPlot(QCPPainter* x1, const QVector<QPointF>* x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(947, (void*)this, x)) return;
        this->QCPCurve::drawScatterPlot(x1, x2);
    }
    virtual bool addToLegend() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(136, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::addToLegend();
    }
    virtual bool removeFromLegend() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(137, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::removeFromLegend();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(143, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractPlottable::clipRect();
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(145, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractPlottable::selectionCategory();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(147, (void*)this, x)) return;
        this->QCPAbstractPlottable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(148, (void*)this, x)) return;
        this->QCPAbstractPlottable::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(146, (void*)this, x)) return;
        this->QCPAbstractPlottable::applyDefaultAntialiasingHint(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 44: //QCPCurve::LineStyle
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPCurve::LineStyle;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPCurve::LineStyle*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPCurve::LineStyle*)xdata = (QCPCurve::LineStyle)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPCurve::LineStyle*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPCurve() { this->_binding->deleted(18, (void*)this); }
};
void xenum_QCPCurve(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPCurve::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPCurve(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPCurve *xself = (x_QCPCurve*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPCurve::x_3(args);	break;
        case 4: x_QCPCurve::x_4(args);	break;
        case 5: x_QCPCurve::x_5(args);	break;
        case 6: x_QCPCurve::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPCurve::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: x_QCPCurve::x_41(args);	break;
        case 42: x_QCPCurve::x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: x_QCPCurve::x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: x_QCPCurve::x_54(args);	break;
        case 55: x_QCPCurve::x_55(args);	break;
        case 56: delete (QCPCurve*)xself;	break;
    }
}
class x_QCPCurveData : public QCPCurveData {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPCurveData* QCPCurveData()
        x_QCPCurveData* xret = new x_QCPCurveData();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPCurveData() : QCPCurveData() {}
    static void x_2(Smoke::Stack x) {
        // QCPCurveData* QCPCurveData(double, double, double)
        x_QCPCurveData* xret = new x_QCPCurveData((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPCurveData(double x1, double x2, double x3) : QCPCurveData(x1, x2, x3) {}
    static void x_3(Smoke::Stack x) {
        // QCPCurveData* QCPCurveData(const QCPCurveData&)
        x_QCPCurveData* xret = new x_QCPCurveData(*(const QCPCurveData*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPCurveData(const QCPCurveData& x1) : QCPCurveData(x1) {}
    void x_4(Smoke::Stack x) {
        // double t
        x[0].s_double = this->QCPCurveData::t;
    }
    void x_5(Smoke::Stack x) {
        // double t=
        this->QCPCurveData::t = (double)x[1].s_double;
    }
    void x_6(Smoke::Stack x) {
        // double key
        x[0].s_double = this->QCPCurveData::key;
    }
    void x_7(Smoke::Stack x) {
        // double key=
        this->QCPCurveData::key = (double)x[1].s_double;
    }
    void x_8(Smoke::Stack x) {
        // double value
        x[0].s_double = this->QCPCurveData::value;
    }
    void x_9(Smoke::Stack x) {
        // double value=
        this->QCPCurveData::value = (double)x[1].s_double;
    }
    ~x_QCPCurveData() { this->_binding->deleted(19, (void*)this); }
};
void xcall_QCPCurveData(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPCurveData *xself = (x_QCPCurveData*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPCurveData::x_1(args);	break;
        case 2: x_QCPCurveData::x_2(args);	break;
        case 3: x_QCPCurveData::x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: delete (QCPCurveData*)xself;	break;
    }
}
class x_QCPData : public QCPData {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPData* QCPData()
        x_QCPData* xret = new x_QCPData();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPData() : QCPData() {}
    static void x_2(Smoke::Stack x) {
        // QCPData* QCPData(double, double)
        x_QCPData* xret = new x_QCPData((double)x[1].s_double,(double)x[2].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPData(double x1, double x2) : QCPData(x1, x2) {}
    static void x_3(Smoke::Stack x) {
        // QCPData* QCPData(const QCPData&)
        x_QCPData* xret = new x_QCPData(*(const QCPData*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPData(const QCPData& x1) : QCPData(x1) {}
    void x_4(Smoke::Stack x) {
        // double key
        x[0].s_double = this->QCPData::key;
    }
    void x_5(Smoke::Stack x) {
        // double key=
        this->QCPData::key = (double)x[1].s_double;
    }
    void x_6(Smoke::Stack x) {
        // double value
        x[0].s_double = this->QCPData::value;
    }
    void x_7(Smoke::Stack x) {
        // double value=
        this->QCPData::value = (double)x[1].s_double;
    }
    void x_8(Smoke::Stack x) {
        // double keyErrorPlus
        x[0].s_double = this->QCPData::keyErrorPlus;
    }
    void x_9(Smoke::Stack x) {
        // double keyErrorPlus=
        this->QCPData::keyErrorPlus = (double)x[1].s_double;
    }
    void x_10(Smoke::Stack x) {
        // double keyErrorMinus
        x[0].s_double = this->QCPData::keyErrorMinus;
    }
    void x_11(Smoke::Stack x) {
        // double keyErrorMinus=
        this->QCPData::keyErrorMinus = (double)x[1].s_double;
    }
    void x_12(Smoke::Stack x) {
        // double valueErrorPlus
        x[0].s_double = this->QCPData::valueErrorPlus;
    }
    void x_13(Smoke::Stack x) {
        // double valueErrorPlus=
        this->QCPData::valueErrorPlus = (double)x[1].s_double;
    }
    void x_14(Smoke::Stack x) {
        // double valueErrorMinus
        x[0].s_double = this->QCPData::valueErrorMinus;
    }
    void x_15(Smoke::Stack x) {
        // double valueErrorMinus=
        this->QCPData::valueErrorMinus = (double)x[1].s_double;
    }
    ~x_QCPData() { this->_binding->deleted(20, (void*)this); }
};
void xcall_QCPData(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPData *xself = (x_QCPData*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPData::x_1(args);	break;
        case 2: x_QCPData::x_2(args);	break;
        case 3: x_QCPData::x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: delete (QCPData*)xself;	break;
    }
}
class x_QCPFinancial : public QCPFinancial, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            const QMetaObject* xret = ((const x_QCPFinancial*)this)->QCPFinancial::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPFinancial*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            void* xret = this->QCPFinancial::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPFinancial::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPFinancial::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPFinancial::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPFinancial::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            int xret = this->QCPFinancial::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPFinancial* QCPFinancial(QCPAxis*, QCPAxis*)
        x_QCPFinancial* xret = new x_QCPFinancial((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPFinancial(QCPAxis* x1, QCPAxis* x2) : QCPFinancial(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QMap<double,QCPFinancialData>* data() const
        QMap<double,QCPFinancialData>* xret = ((const x_QCPFinancial*)this)->QCPFinancial::data();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QCPFinancial::ChartStyle chartStyle() const
        QCPFinancial::ChartStyle xret = ((const x_QCPFinancial*)this)->QCPFinancial::chartStyle();
        x[0].s_enum = xret;
    }
    void x_11(Smoke::Stack x) {
        // double width() const
        double xret = ((const x_QCPFinancial*)this)->QCPFinancial::width();
        x[0].s_double = xret;
    }
    void x_12(Smoke::Stack x) {
        // bool twoColored() const
        bool xret = ((const x_QCPFinancial*)this)->QCPFinancial::twoColored();
        x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) {
        // QBrush brushPositive() const
        QBrush xret = ((const x_QCPFinancial*)this)->QCPFinancial::brushPositive();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_14(Smoke::Stack x) {
        // QBrush brushNegative() const
        QBrush xret = ((const x_QCPFinancial*)this)->QCPFinancial::brushNegative();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_15(Smoke::Stack x) {
        // QPen penPositive() const
        QPen xret = ((const x_QCPFinancial*)this)->QCPFinancial::penPositive();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_16(Smoke::Stack x) {
        // QPen penNegative() const
        QPen xret = ((const x_QCPFinancial*)this)->QCPFinancial::penNegative();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_17(Smoke::Stack x) {
        // void setData(QMap<double,QCPFinancialData>*, bool)
        this->QCPFinancial::setData((QMap<double,QCPFinancialData>*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setData(const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPFinancial::setData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class,*(const QVector<double>*)x[4].s_class,*(const QVector<double>*)x[5].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setChartStyle(QCPFinancial::ChartStyle)
        this->QCPFinancial::setChartStyle((QCPFinancial::ChartStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setWidth(double)
        this->QCPFinancial::setWidth((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setTwoColored(bool)
        this->QCPFinancial::setTwoColored((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setBrushPositive(const QBrush&)
        this->QCPFinancial::setBrushPositive(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setBrushNegative(const QBrush&)
        this->QCPFinancial::setBrushNegative(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setPenPositive(const QPen&)
        this->QCPFinancial::setPenPositive(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setPenNegative(const QPen&)
        this->QCPFinancial::setPenNegative(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void addData(const QMap<double,QCPFinancialData>&)
        this->QCPFinancial::addData(*(const QMap<double,QCPFinancialData>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void addData(const QCPFinancialData&)
        this->QCPFinancial::addData(*(const QCPFinancialData*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void addData(double, double, double, double, double)
        this->QCPFinancial::addData((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void addData(const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPFinancial::addData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class,*(const QVector<double>*)x[4].s_class,*(const QVector<double>*)x[5].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void removeDataBefore(double)
        this->QCPFinancial::removeDataBefore((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void removeDataAfter(double)
        this->QCPFinancial::removeDataAfter((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void removeData(double, double)
        this->QCPFinancial::removeData((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // void removeData(double)
        this->QCPFinancial::removeData((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // virtual void clearData()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            this->QCPFinancial::clearData();
            (void)x; // noop (for compiler warning)
        } else {
            this->clearData();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_35(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            double xret = ((const x_QCPFinancial*)this)->QCPFinancial::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPFinancial*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    static void x_36(Smoke::Stack x) {
        // static QMap<double,QCPFinancialData> timeSeriesToOhlc(const QVector<double>&, const QVector<double>&, double, double)
        QMap<double,QCPFinancialData> xret = QCPFinancial::timeSeriesToOhlc(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,(double)x[3].s_double,(double)x[4].s_double);
        x[0].s_class = (void*)new QMap<double,QCPFinancialData>(xret);
    }
    void x_37(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            this->QCPFinancial::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_38(Smoke::Stack x) {
        // virtual void drawLegendIcon(QCPPainter*, const QRectF&) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            ((const x_QCPFinancial*)this)->QCPFinancial::drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPFinancial*)this)->drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_39(Smoke::Stack x) {
        // virtual QCPRange getKeyRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            QCPRange xret = ((const x_QCPFinancial*)this)->QCPFinancial::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPFinancial*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_40(Smoke::Stack x) {
        // virtual QCPRange getValueRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPFinancial*>(this))) {
            QCPRange xret = ((const x_QCPFinancial*)this)->QCPFinancial::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPFinancial*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_41(Smoke::Stack x) {
        // void drawOhlcPlot(QCPPainter*, const QCPFinancialDataMap::const_iterator&, const QCPFinancialDataMap::const_iterator&)
        this->QCPFinancial::drawOhlcPlot((QCPPainter*)x[1].s_class,*(const QCPFinancialDataMap::const_iterator*)x[2].s_class,*(const QCPFinancialDataMap::const_iterator*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_42(Smoke::Stack x) {
        // void drawCandlestickPlot(QCPPainter*, const QCPFinancialDataMap::const_iterator&, const QCPFinancialDataMap::const_iterator&)
        this->QCPFinancial::drawCandlestickPlot((QCPPainter*)x[1].s_class,*(const QCPFinancialDataMap::const_iterator*)x[2].s_class,*(const QCPFinancialDataMap::const_iterator*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_43(Smoke::Stack x) {
        // double ohlcSelectTest(const QPointF&, const QCPFinancialDataMap::const_iterator&, const QCPFinancialDataMap::const_iterator&) const
        double xret = ((const x_QCPFinancial*)this)->QCPFinancial::ohlcSelectTest(*(const QPointF*)x[1].s_class,*(const QCPFinancialDataMap::const_iterator*)x[2].s_class,*(const QCPFinancialDataMap::const_iterator*)x[3].s_class);
        x[0].s_double = xret;
    }
    void x_44(Smoke::Stack x) {
        // double candlestickSelectTest(const QPointF&, const QCPFinancialDataMap::const_iterator&, const QCPFinancialDataMap::const_iterator&) const
        double xret = ((const x_QCPFinancial*)this)->QCPFinancial::candlestickSelectTest(*(const QPointF*)x[1].s_class,*(const QCPFinancialDataMap::const_iterator*)x[2].s_class,*(const QCPFinancialDataMap::const_iterator*)x[3].s_class);
        x[0].s_double = xret;
    }
    void x_45(Smoke::Stack x) {
        // void getVisibleDataBounds(QCPFinancialDataMap::const_iterator&, QCPFinancialDataMap::const_iterator&) const
        ((const x_QCPFinancial*)this)->QCPFinancial::getVisibleDataBounds(*(QCPFinancialDataMap::const_iterator*)x[1].s_class,*(QCPFinancialDataMap::const_iterator*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_46(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPFinancial::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_47(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPFinancial::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_48(Smoke::Stack x) {
        // void setData(QMap<double,QCPFinancialData>*)
        this->QCPFinancial::setData((QMap<double,QCPFinancialData>*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_49(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPFinancial*)this)->QCPFinancial::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_50(Smoke::Stack x) {
        // static QMap<double,QCPFinancialData> timeSeriesToOhlc(const QVector<double>&, const QVector<double>&, double)
        QMap<double,QCPFinancialData> xret = QCPFinancial::timeSeriesToOhlc(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,(double)x[3].s_double,(double)0);
        x[0].s_class = (void*)new QMap<double,QCPFinancialData>(xret);
    }
    void x_51(Smoke::Stack x) {
        // QCPRange getKeyRange(bool&) const
        QCPRange xret = ((const x_QCPFinancial*)this)->QCPFinancial::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_52(Smoke::Stack x) {
        // QCPRange getValueRange(bool&) const
        QCPRange xret = ((const x_QCPFinancial*)this)->QCPFinancial::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    static void x_53(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPFinancial::staticMetaObject;
    }
    void x_54(Smoke::Stack x) {
        // QMap<double,QCPFinancialData>* mData
        x[0].s_class = (void*)this->QCPFinancial::mData;
    }
    void x_55(Smoke::Stack x) {
        // QMap<double,QCPFinancialData>* mData=
        this->QCPFinancial::mData = (QMap<double,QCPFinancialData>*)x[1].s_class;
    }
    void x_56(Smoke::Stack x) {
        // QCPFinancial::ChartStyle mChartStyle
        x[0].s_enum = this->QCPFinancial::mChartStyle;
    }
    void x_57(Smoke::Stack x) {
        // QCPFinancial::ChartStyle mChartStyle=
        this->QCPFinancial::mChartStyle = (QCPFinancial::ChartStyle)x[1].s_enum;
    }
    void x_58(Smoke::Stack x) {
        // double mWidth
        x[0].s_double = this->QCPFinancial::mWidth;
    }
    void x_59(Smoke::Stack x) {
        // double mWidth=
        this->QCPFinancial::mWidth = (double)x[1].s_double;
    }
    void x_60(Smoke::Stack x) {
        // bool mTwoColored
        x[0].s_bool = this->QCPFinancial::mTwoColored;
    }
    void x_61(Smoke::Stack x) {
        // bool mTwoColored=
        this->QCPFinancial::mTwoColored = (bool)x[1].s_bool;
    }
    void x_62(Smoke::Stack x) {
        // QBrush mBrushPositive
        x[0].s_class = (void*)&this->QCPFinancial::mBrushPositive;
    }
    void x_63(Smoke::Stack x) {
        // QBrush mBrushPositive=
        this->QCPFinancial::mBrushPositive = *(const QBrush*)x[1].s_class;
    }
    void x_64(Smoke::Stack x) {
        // QBrush mBrushNegative
        x[0].s_class = (void*)&this->QCPFinancial::mBrushNegative;
    }
    void x_65(Smoke::Stack x) {
        // QBrush mBrushNegative=
        this->QCPFinancial::mBrushNegative = *(const QBrush*)x[1].s_class;
    }
    void x_66(Smoke::Stack x) {
        // QPen mPenPositive
        x[0].s_class = (void*)&this->QCPFinancial::mPenPositive;
    }
    void x_67(Smoke::Stack x) {
        // QPen mPenPositive=
        this->QCPFinancial::mPenPositive = *(const QPen*)x[1].s_class;
    }
    void x_68(Smoke::Stack x) {
        // QPen mPenNegative
        x[0].s_class = (void*)&this->QCPFinancial::mPenNegative;
    }
    void x_69(Smoke::Stack x) {
        // QPen mPenNegative=
        this->QCPFinancial::mPenNegative = *(const QPen*)x[1].s_class;
    }
    static void x_70(Smoke::Stack x) {
        x[0].s_enum = (long)QCPFinancial::csOhlc;
    }
    static void x_71(Smoke::Stack x) {
        x[0].s_enum = (long)QCPFinancial::csCandlestick;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(998, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPFinancial::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(999, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPFinancial::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1004, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPFinancial::qt_metacall(x1, x2, x3);
    }
    virtual void clearData() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1031, (void*)this, x)) return;
        this->QCPFinancial::clearData();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1032, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPFinancial::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1034, (void*)this, x)) return;
        this->QCPFinancial::draw(x1);
    }
    virtual void drawLegendIcon(QCPPainter* x1, const QRectF& x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        if (this->_binding->callMethod(1035, (void*)this, x)) return;
        this->QCPFinancial::drawLegendIcon(x1, x2);
    }
    virtual QCPRange getKeyRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(1036, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPFinancial::getKeyRange(x1, x2);
    }
    virtual QCPRange getValueRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(1037, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPFinancial::getValueRange(x1, x2);
    }
    virtual bool addToLegend() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(136, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::addToLegend();
    }
    virtual bool removeFromLegend() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(137, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::removeFromLegend();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(143, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractPlottable::clipRect();
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(145, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractPlottable::selectionCategory();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(147, (void*)this, x)) return;
        this->QCPAbstractPlottable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(148, (void*)this, x)) return;
        this->QCPAbstractPlottable::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(146, (void*)this, x)) return;
        this->QCPAbstractPlottable::applyDefaultAntialiasingHint(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 51: //QCPFinancial::ChartStyle
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPFinancial::ChartStyle;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPFinancial::ChartStyle*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPFinancial::ChartStyle*)xdata = (QCPFinancial::ChartStyle)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPFinancial::ChartStyle*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPFinancial() { this->_binding->deleted(21, (void*)this); }
};
void xenum_QCPFinancial(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPFinancial::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPFinancial(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPFinancial *xself = (x_QCPFinancial*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPFinancial::x_3(args);	break;
        case 4: x_QCPFinancial::x_4(args);	break;
        case 5: x_QCPFinancial::x_5(args);	break;
        case 6: x_QCPFinancial::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPFinancial::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: x_QCPFinancial::x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: x_QCPFinancial::x_46(args);	break;
        case 47: x_QCPFinancial::x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: x_QCPFinancial::x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: x_QCPFinancial::x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: x_QCPFinancial::x_70(args);	break;
        case 71: x_QCPFinancial::x_71(args);	break;
        case 72: delete (QCPFinancial*)xself;	break;
    }
}

}
