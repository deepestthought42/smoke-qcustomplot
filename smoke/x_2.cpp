//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPAxisRect : public QCPAxisRect, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            const QMetaObject* xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPAxisRect*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            void* xret = this->QCPAxisRect::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPAxisRect::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPAxisRect::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPAxisRect::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPAxisRect::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            int xret = this->QCPAxisRect::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPAxisRect* QCPAxisRect(QCustomPlot*, bool)
        x_QCPAxisRect* xret = new x_QCPAxisRect((QCustomPlot*)x[1].s_class,(bool)x[2].s_bool);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPAxisRect(QCustomPlot* x1, bool x2) : QCPAxisRect(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QPixmap background() const
        QPixmap xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::background();
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_10(Smoke::Stack x) {
        // bool backgroundScaled() const
        bool xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::backgroundScaled();
        x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) {
        // Qt::AspectRatioMode backgroundScaledMode() const
        Qt::AspectRatioMode xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::backgroundScaledMode();
        x[0].s_enum = xret;
    }
    void x_12(Smoke::Stack x) {
        // QFlags<Qt::Orientation> rangeDrag() const
        QFlags<Qt::Orientation> xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::rangeDrag();
        x[0].s_uint = (uint)xret;
    }
    void x_13(Smoke::Stack x) {
        // QFlags<Qt::Orientation> rangeZoom() const
        QFlags<Qt::Orientation> xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::rangeZoom();
        x[0].s_uint = (uint)xret;
    }
    void x_14(Smoke::Stack x) {
        // QCPAxis* rangeDragAxis(Qt::Orientation)
        QCPAxis* xret = this->QCPAxisRect::rangeDragAxis((Qt::Orientation)x[1].s_enum);
        x[0].s_class = (void*)xret;
    }
    void x_15(Smoke::Stack x) {
        // QCPAxis* rangeZoomAxis(Qt::Orientation)
        QCPAxis* xret = this->QCPAxisRect::rangeZoomAxis((Qt::Orientation)x[1].s_enum);
        x[0].s_class = (void*)xret;
    }
    void x_16(Smoke::Stack x) {
        // double rangeZoomFactor(Qt::Orientation)
        double xret = this->QCPAxisRect::rangeZoomFactor((Qt::Orientation)x[1].s_enum);
        x[0].s_double = xret;
    }
    void x_17(Smoke::Stack x) {
        // void setBackground(const QPixmap&)
        this->QCPAxisRect::setBackground(*(const QPixmap*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setBackground(const QPixmap&, bool, Qt::AspectRatioMode)
        this->QCPAxisRect::setBackground(*(const QPixmap*)x[1].s_class,(bool)x[2].s_bool,(Qt::AspectRatioMode)x[3].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setBackground(const QBrush&)
        this->QCPAxisRect::setBackground(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setBackgroundScaled(bool)
        this->QCPAxisRect::setBackgroundScaled((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setBackgroundScaledMode(Qt::AspectRatioMode)
        this->QCPAxisRect::setBackgroundScaledMode((Qt::AspectRatioMode)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setRangeDrag(QFlags<Qt::Orientation>)
        this->QCPAxisRect::setRangeDrag((QFlags<Qt::Orientation>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setRangeZoom(QFlags<Qt::Orientation>)
        this->QCPAxisRect::setRangeZoom((QFlags<Qt::Orientation>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setRangeDragAxes(QCPAxis*, QCPAxis*)
        this->QCPAxisRect::setRangeDragAxes((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setRangeZoomAxes(QCPAxis*, QCPAxis*)
        this->QCPAxisRect::setRangeZoomAxes((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setRangeZoomFactor(double, double)
        this->QCPAxisRect::setRangeZoomFactor((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setRangeZoomFactor(double)
        this->QCPAxisRect::setRangeZoomFactor((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // int axisCount(QCPAxis::AxisType) const
        int xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::axisCount((QCPAxis::AxisType)x[1].s_enum);
        x[0].s_int = xret;
    }
    void x_29(Smoke::Stack x) {
        // QCPAxis* axis(QCPAxis::AxisType, int) const
        QCPAxis* xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::axis((QCPAxis::AxisType)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_30(Smoke::Stack x) {
        // QList<QCPAxis*> axes(QFlags<QCPAxis::AxisType>) const
        QList<QCPAxis*> xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::axes((QFlags<QCPAxis::AxisType>)x[1].s_uint);
        x[0].s_class = (void*)new QList<QCPAxis*>(xret);
    }
    void x_31(Smoke::Stack x) {
        // QList<QCPAxis*> axes() const
        QList<QCPAxis*> xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::axes();
        x[0].s_class = (void*)new QList<QCPAxis*>(xret);
    }
    void x_32(Smoke::Stack x) {
        // QCPAxis* addAxis(QCPAxis::AxisType, QCPAxis*)
        QCPAxis* xret = this->QCPAxisRect::addAxis((QCPAxis::AxisType)x[1].s_enum,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_33(Smoke::Stack x) {
        // QList<QCPAxis*> addAxes(QFlags<QCPAxis::AxisType>)
        QList<QCPAxis*> xret = this->QCPAxisRect::addAxes((QFlags<QCPAxis::AxisType>)x[1].s_uint);
        x[0].s_class = (void*)new QList<QCPAxis*>(xret);
    }
    void x_34(Smoke::Stack x) {
        // bool removeAxis(QCPAxis*)
        bool xret = this->QCPAxisRect::removeAxis((QCPAxis*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_35(Smoke::Stack x) {
        // QCPLayoutInset* insetLayout() const
        QCPLayoutInset* xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::insetLayout();
        x[0].s_class = (void*)xret;
    }
    void x_36(Smoke::Stack x) {
        // void setupFullAxesBox(bool)
        this->QCPAxisRect::setupFullAxesBox((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
        // QList<QCPAbstractPlottable*> plottables() const
        QList<QCPAbstractPlottable*> xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::plottables();
        x[0].s_class = (void*)new QList<QCPAbstractPlottable*>(xret);
    }
    void x_38(Smoke::Stack x) {
        // QList<QCPGraph*> graphs() const
        QList<QCPGraph*> xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::graphs();
        x[0].s_class = (void*)new QList<QCPGraph*>(xret);
    }
    void x_39(Smoke::Stack x) {
        // QList<QCPAbstractItem*> items() const
        QList<QCPAbstractItem*> xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::items();
        x[0].s_class = (void*)new QList<QCPAbstractItem*>(xret);
    }
    void x_40(Smoke::Stack x) {
        // int left() const
        int xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::left();
        x[0].s_int = xret;
    }
    void x_41(Smoke::Stack x) {
        // int right() const
        int xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::right();
        x[0].s_int = xret;
    }
    void x_42(Smoke::Stack x) {
        // int top() const
        int xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::top();
        x[0].s_int = xret;
    }
    void x_43(Smoke::Stack x) {
        // int bottom() const
        int xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::bottom();
        x[0].s_int = xret;
    }
    void x_44(Smoke::Stack x) {
        // int width() const
        int xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::width();
        x[0].s_int = xret;
    }
    void x_45(Smoke::Stack x) {
        // int height() const
        int xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::height();
        x[0].s_int = xret;
    }
    void x_46(Smoke::Stack x) {
        // QSize size() const
        QSize xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::size();
        x[0].s_class = (void*)new QSize(xret);
    }
    void x_47(Smoke::Stack x) {
        // QPoint topLeft() const
        QPoint xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::topLeft();
        x[0].s_class = (void*)new QPoint(xret);
    }
    void x_48(Smoke::Stack x) {
        // QPoint topRight() const
        QPoint xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::topRight();
        x[0].s_class = (void*)new QPoint(xret);
    }
    void x_49(Smoke::Stack x) {
        // QPoint bottomLeft() const
        QPoint xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::bottomLeft();
        x[0].s_class = (void*)new QPoint(xret);
    }
    void x_50(Smoke::Stack x) {
        // QPoint bottomRight() const
        QPoint xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::bottomRight();
        x[0].s_class = (void*)new QPoint(xret);
    }
    void x_51(Smoke::Stack x) {
        // QPoint center() const
        QPoint xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::center();
        x[0].s_class = (void*)new QPoint(xret);
    }
    void x_52(Smoke::Stack x) {
        // virtual void update(QCPLayoutElement::UpdatePhase)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            this->QCPAxisRect::update((QCPLayoutElement::UpdatePhase)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->update((QCPLayoutElement::UpdatePhase)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_53(Smoke::Stack x) {
        // virtual QList<QCPLayoutElement*> elements(bool) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            QList<QCPLayoutElement*> xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::elements((bool)x[1].s_bool);
            x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
        } else {
            QList<QCPLayoutElement*> xret = ((const x_QCPAxisRect*)this)->elements((bool)x[1].s_bool);
            x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
        }
    }
    void x_54(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            ((const x_QCPAxisRect*)this)->QCPAxisRect::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPAxisRect*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_55(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            this->QCPAxisRect::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_56(Smoke::Stack x) {
        // virtual int calculateAutoMargin(QCP::MarginSide)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            int xret = this->QCPAxisRect::calculateAutoMargin((QCP::MarginSide)x[1].s_enum);
            x[0].s_int = xret;
        } else {
            int xret = this->calculateAutoMargin((QCP::MarginSide)x[1].s_enum);
            x[0].s_int = xret;
        }
    }
    void x_57(Smoke::Stack x) {
        // virtual void mousePressEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            this->QCPAxisRect::mousePressEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mousePressEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_58(Smoke::Stack x) {
        // virtual void mouseMoveEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            this->QCPAxisRect::mouseMoveEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseMoveEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_59(Smoke::Stack x) {
        // virtual void mouseReleaseEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            this->QCPAxisRect::mouseReleaseEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseReleaseEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_60(Smoke::Stack x) {
        // virtual void wheelEvent(QWheelEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPAxisRect*>(this))) {
            this->QCPAxisRect::wheelEvent((QWheelEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->wheelEvent((QWheelEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_61(Smoke::Stack x) {
        // void drawBackground(QCPPainter*)
        this->QCPAxisRect::drawBackground((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_62(Smoke::Stack x) {
        // void updateAxesOffset(QCPAxis::AxisType)
        this->QCPAxisRect::updateAxesOffset((QCPAxis::AxisType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    static void x_63(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPAxisRect::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_64(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPAxisRect::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_65(Smoke::Stack x) {
        // QCPAxisRect* QCPAxisRect(QCustomPlot*)
        x_QCPAxisRect* xret = new x_QCPAxisRect((QCustomPlot*)x[1].s_class,(bool)true);
        x[0].s_class = (void*)xret;
    }
    void x_66(Smoke::Stack x) {
        // void setBackground(const QPixmap&, bool)
        this->QCPAxisRect::setBackground(*(const QPixmap*)x[1].s_class,(bool)x[2].s_bool,(Qt::AspectRatioMode)Qt::KeepAspectRatioByExpanding);
        (void)x; // noop (for compiler warning)
    }
    void x_67(Smoke::Stack x) {
        // QCPAxis* axis(QCPAxis::AxisType) const
        QCPAxis* xret = ((const x_QCPAxisRect*)this)->QCPAxisRect::axis((QCPAxis::AxisType)x[1].s_enum,(int)0);
        x[0].s_class = (void*)xret;
    }
    void x_68(Smoke::Stack x) {
        // QCPAxis* addAxis(QCPAxis::AxisType)
        QCPAxis* xret = this->QCPAxisRect::addAxis((QCPAxis::AxisType)x[1].s_enum,(QCPAxis*)0);
        x[0].s_class = (void*)xret;
    }
    void x_69(Smoke::Stack x) {
        // void setupFullAxesBox()
        this->QCPAxisRect::setupFullAxesBox((bool)false);
        (void)x; // noop (for compiler warning)
    }
    static void x_70(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPAxisRect::staticMetaObject;
    }
    void x_71(Smoke::Stack x) {
        // QBrush mBackgroundBrush
        x[0].s_class = (void*)&this->QCPAxisRect::mBackgroundBrush;
    }
    void x_72(Smoke::Stack x) {
        // QBrush mBackgroundBrush=
        this->QCPAxisRect::mBackgroundBrush = *(const QBrush*)x[1].s_class;
    }
    void x_73(Smoke::Stack x) {
        // QPixmap mBackgroundPixmap
        x[0].s_class = (void*)&this->QCPAxisRect::mBackgroundPixmap;
    }
    void x_74(Smoke::Stack x) {
        // QPixmap mBackgroundPixmap=
        this->QCPAxisRect::mBackgroundPixmap = *(const QPixmap*)x[1].s_class;
    }
    void x_75(Smoke::Stack x) {
        // QPixmap mScaledBackgroundPixmap
        x[0].s_class = (void*)&this->QCPAxisRect::mScaledBackgroundPixmap;
    }
    void x_76(Smoke::Stack x) {
        // QPixmap mScaledBackgroundPixmap=
        this->QCPAxisRect::mScaledBackgroundPixmap = *(const QPixmap*)x[1].s_class;
    }
    void x_77(Smoke::Stack x) {
        // bool mBackgroundScaled
        x[0].s_bool = this->QCPAxisRect::mBackgroundScaled;
    }
    void x_78(Smoke::Stack x) {
        // bool mBackgroundScaled=
        this->QCPAxisRect::mBackgroundScaled = (bool)x[1].s_bool;
    }
    void x_79(Smoke::Stack x) {
        // Qt::AspectRatioMode mBackgroundScaledMode
        x[0].s_enum = this->QCPAxisRect::mBackgroundScaledMode;
    }
    void x_80(Smoke::Stack x) {
        // Qt::AspectRatioMode mBackgroundScaledMode=
        this->QCPAxisRect::mBackgroundScaledMode = (Qt::AspectRatioMode)x[1].s_enum;
    }
    void x_81(Smoke::Stack x) {
        // QCPLayoutInset* mInsetLayout
        x[0].s_class = (void*)this->QCPAxisRect::mInsetLayout;
    }
    void x_82(Smoke::Stack x) {
        // QCPLayoutInset* mInsetLayout=
        this->QCPAxisRect::mInsetLayout = (QCPLayoutInset*)x[1].s_class;
    }
    void x_83(Smoke::Stack x) {
        // QFlags<Qt::Orientation> mRangeDrag
        x[0].s_uint = (uint)this->QCPAxisRect::mRangeDrag;
    }
    void x_84(Smoke::Stack x) {
        // QFlags<Qt::Orientation> mRangeDrag=
        this->QCPAxisRect::mRangeDrag = (QFlags<Qt::Orientation>)x[1].s_uint;
    }
    void x_85(Smoke::Stack x) {
        // QFlags<Qt::Orientation> mRangeZoom
        x[0].s_uint = (uint)this->QCPAxisRect::mRangeZoom;
    }
    void x_86(Smoke::Stack x) {
        // QFlags<Qt::Orientation> mRangeZoom=
        this->QCPAxisRect::mRangeZoom = (QFlags<Qt::Orientation>)x[1].s_uint;
    }
    void x_87(Smoke::Stack x) {
        // QPointer<QCPAxis> mRangeDragHorzAxis
        x[0].s_class = (void*)&this->QCPAxisRect::mRangeDragHorzAxis;
    }
    void x_88(Smoke::Stack x) {
        // QPointer<QCPAxis> mRangeDragHorzAxis=
        this->QCPAxisRect::mRangeDragHorzAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    void x_89(Smoke::Stack x) {
        // QPointer<QCPAxis> mRangeDragVertAxis
        x[0].s_class = (void*)&this->QCPAxisRect::mRangeDragVertAxis;
    }
    void x_90(Smoke::Stack x) {
        // QPointer<QCPAxis> mRangeDragVertAxis=
        this->QCPAxisRect::mRangeDragVertAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    void x_91(Smoke::Stack x) {
        // QPointer<QCPAxis> mRangeZoomHorzAxis
        x[0].s_class = (void*)&this->QCPAxisRect::mRangeZoomHorzAxis;
    }
    void x_92(Smoke::Stack x) {
        // QPointer<QCPAxis> mRangeZoomHorzAxis=
        this->QCPAxisRect::mRangeZoomHorzAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    void x_93(Smoke::Stack x) {
        // QPointer<QCPAxis> mRangeZoomVertAxis
        x[0].s_class = (void*)&this->QCPAxisRect::mRangeZoomVertAxis;
    }
    void x_94(Smoke::Stack x) {
        // QPointer<QCPAxis> mRangeZoomVertAxis=
        this->QCPAxisRect::mRangeZoomVertAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    void x_95(Smoke::Stack x) {
        // double mRangeZoomFactorHorz
        x[0].s_double = this->QCPAxisRect::mRangeZoomFactorHorz;
    }
    void x_96(Smoke::Stack x) {
        // double mRangeZoomFactorHorz=
        this->QCPAxisRect::mRangeZoomFactorHorz = (double)x[1].s_double;
    }
    void x_97(Smoke::Stack x) {
        // double mRangeZoomFactorVert
        x[0].s_double = this->QCPAxisRect::mRangeZoomFactorVert;
    }
    void x_98(Smoke::Stack x) {
        // double mRangeZoomFactorVert=
        this->QCPAxisRect::mRangeZoomFactorVert = (double)x[1].s_double;
    }
    void x_99(Smoke::Stack x) {
        // QCPRange mDragStartHorzRange
        x[0].s_class = (void*)&this->QCPAxisRect::mDragStartHorzRange;
    }
    void x_100(Smoke::Stack x) {
        // QCPRange mDragStartHorzRange=
        this->QCPAxisRect::mDragStartHorzRange = *(const QCPRange*)x[1].s_class;
    }
    void x_101(Smoke::Stack x) {
        // QCPRange mDragStartVertRange
        x[0].s_class = (void*)&this->QCPAxisRect::mDragStartVertRange;
    }
    void x_102(Smoke::Stack x) {
        // QCPRange mDragStartVertRange=
        this->QCPAxisRect::mDragStartVertRange = *(const QCPRange*)x[1].s_class;
    }
    void x_103(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> mAADragBackup
        x[0].s_uint = (uint)this->QCPAxisRect::mAADragBackup;
    }
    void x_104(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> mAADragBackup=
        this->QCPAxisRect::mAADragBackup = (QFlags<QCP::AntialiasedElement>)x[1].s_uint;
    }
    void x_105(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> mNotAADragBackup
        x[0].s_uint = (uint)this->QCPAxisRect::mNotAADragBackup;
    }
    void x_106(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> mNotAADragBackup=
        this->QCPAxisRect::mNotAADragBackup = (QFlags<QCP::AntialiasedElement>)x[1].s_uint;
    }
    void x_107(Smoke::Stack x) {
        // QPoint mDragStart
        x[0].s_class = (void*)&this->QCPAxisRect::mDragStart;
    }
    void x_108(Smoke::Stack x) {
        // QPoint mDragStart=
        this->QCPAxisRect::mDragStart = *(const QPoint*)x[1].s_class;
    }
    void x_109(Smoke::Stack x) {
        // bool mDragging
        x[0].s_bool = this->QCPAxisRect::mDragging;
    }
    void x_110(Smoke::Stack x) {
        // bool mDragging=
        this->QCPAxisRect::mDragging = (bool)x[1].s_bool;
    }
    void x_111(Smoke::Stack x) {
        // QHash<QCPAxis::AxisType,QList<QCPAxis*> > mAxes
        x[0].s_class = (void*)&this->QCPAxisRect::mAxes;
    }
    void x_112(Smoke::Stack x) {
        // QHash<QCPAxis::AxisType,QList<QCPAxis*> > mAxes=
        this->QCPAxisRect::mAxes = *(const QHash<QCPAxis::AxisType,QList<QCPAxis*> >*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(477, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPAxisRect::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(478, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPAxisRect::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(483, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPAxisRect::qt_metacall(x1, x2, x3);
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(528, (void*)this, x)) return;
        this->QCPAxisRect::update(x1);
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(529, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAxisRect::elements(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(530, (void*)this, x)) return;
        this->QCPAxisRect::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(531, (void*)this, x)) return;
        this->QCPAxisRect::draw(x1);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(532, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPAxisRect::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(533, (void*)this, x)) return;
        this->QCPAxisRect::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(534, (void*)this, x)) return;
        this->QCPAxisRect::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(535, (void*)this, x)) return;
        this->QCPAxisRect::mouseReleaseEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(536, (void*)this, x)) return;
        this->QCPAxisRect::wheelEvent(x1);
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1859, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1860, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::maximumSizeHint();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1862, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLayoutElement::selectTest(x1, x2, x3);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(1781, (void*)this, x)) return;
        this->QCPLayerable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1782, (void*)this, x)) return;
        this->QCPLayerable::deselectEvent(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPAxisRect() { this->_binding->deleted(9, (void*)this); }
};
void xcall_QCPAxisRect(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPAxisRect *xself = (x_QCPAxisRect*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPAxisRect::x_3(args);	break;
        case 4: x_QCPAxisRect::x_4(args);	break;
        case 5: x_QCPAxisRect::x_5(args);	break;
        case 6: x_QCPAxisRect::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPAxisRect::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: x_QCPAxisRect::x_63(args);	break;
        case 64: x_QCPAxisRect::x_64(args);	break;
        case 65: x_QCPAxisRect::x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: x_QCPAxisRect::x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: xself->x_81(args);	break;
        case 82: xself->x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: xself->x_84(args);	break;
        case 85: xself->x_85(args);	break;
        case 86: xself->x_86(args);	break;
        case 87: xself->x_87(args);	break;
        case 88: xself->x_88(args);	break;
        case 89: xself->x_89(args);	break;
        case 90: xself->x_90(args);	break;
        case 91: xself->x_91(args);	break;
        case 92: xself->x_92(args);	break;
        case 93: xself->x_93(args);	break;
        case 94: xself->x_94(args);	break;
        case 95: xself->x_95(args);	break;
        case 96: xself->x_96(args);	break;
        case 97: xself->x_97(args);	break;
        case 98: xself->x_98(args);	break;
        case 99: xself->x_99(args);	break;
        case 100: xself->x_100(args);	break;
        case 101: xself->x_101(args);	break;
        case 102: xself->x_102(args);	break;
        case 103: xself->x_103(args);	break;
        case 104: xself->x_104(args);	break;
        case 105: xself->x_105(args);	break;
        case 106: xself->x_106(args);	break;
        case 107: xself->x_107(args);	break;
        case 108: xself->x_108(args);	break;
        case 109: xself->x_109(args);	break;
        case 110: xself->x_110(args);	break;
        case 111: xself->x_111(args);	break;
        case 112: xself->x_112(args);	break;
        case 113: delete (QCPAxisRect*)xself;	break;
    }
}
class x_QCPBarData : public QCPBarData {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPBarData* QCPBarData()
        x_QCPBarData* xret = new x_QCPBarData();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPBarData() : QCPBarData() {}
    static void x_2(Smoke::Stack x) {
        // QCPBarData* QCPBarData(double, double)
        x_QCPBarData* xret = new x_QCPBarData((double)x[1].s_double,(double)x[2].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPBarData(double x1, double x2) : QCPBarData(x1, x2) {}
    static void x_3(Smoke::Stack x) {
        // QCPBarData* QCPBarData(const QCPBarData&)
        x_QCPBarData* xret = new x_QCPBarData(*(const QCPBarData*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPBarData(const QCPBarData& x1) : QCPBarData(x1) {}
    void x_4(Smoke::Stack x) {
        // double key
        x[0].s_double = this->QCPBarData::key;
    }
    void x_5(Smoke::Stack x) {
        // double key=
        this->QCPBarData::key = (double)x[1].s_double;
    }
    void x_6(Smoke::Stack x) {
        // double value
        x[0].s_double = this->QCPBarData::value;
    }
    void x_7(Smoke::Stack x) {
        // double value=
        this->QCPBarData::value = (double)x[1].s_double;
    }
    ~x_QCPBarData() { this->_binding->deleted(10, (void*)this); }
};
void xcall_QCPBarData(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPBarData *xself = (x_QCPBarData*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPBarData::x_1(args);	break;
        case 2: x_QCPBarData::x_2(args);	break;
        case 3: x_QCPBarData::x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: delete (QCPBarData*)xself;	break;
    }
}
class x_QCPBars : public QCPBars, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            const QMetaObject* xret = ((const x_QCPBars*)this)->QCPBars::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPBars*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            void* xret = this->QCPBars::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPBars::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPBars::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPBars::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPBars::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            int xret = this->QCPBars::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPBars* QCPBars(QCPAxis*, QCPAxis*)
        x_QCPBars* xret = new x_QCPBars((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPBars(QCPAxis* x1, QCPAxis* x2) : QCPBars(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // double width() const
        double xret = ((const x_QCPBars*)this)->QCPBars::width();
        x[0].s_double = xret;
    }
    void x_10(Smoke::Stack x) {
        // QCPBars::WidthType widthType() const
        QCPBars::WidthType xret = ((const x_QCPBars*)this)->QCPBars::widthType();
        x[0].s_enum = xret;
    }
    void x_11(Smoke::Stack x) {
        // QCPBarsGroup* barsGroup() const
        QCPBarsGroup* xret = ((const x_QCPBars*)this)->QCPBars::barsGroup();
        x[0].s_class = (void*)xret;
    }
    void x_12(Smoke::Stack x) {
        // double baseValue() const
        double xret = ((const x_QCPBars*)this)->QCPBars::baseValue();
        x[0].s_double = xret;
    }
    void x_13(Smoke::Stack x) {
        // QCPBars* barBelow() const
        QCPBars* xret = ((const x_QCPBars*)this)->QCPBars::barBelow();
        x[0].s_class = (void*)xret;
    }
    void x_14(Smoke::Stack x) {
        // QCPBars* barAbove() const
        QCPBars* xret = ((const x_QCPBars*)this)->QCPBars::barAbove();
        x[0].s_class = (void*)xret;
    }
    void x_15(Smoke::Stack x) {
        // QMap<double,QCPBarData>* data() const
        QMap<double,QCPBarData>* xret = ((const x_QCPBars*)this)->QCPBars::data();
        x[0].s_class = (void*)xret;
    }
    void x_16(Smoke::Stack x) {
        // void setWidth(double)
        this->QCPBars::setWidth((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setWidthType(QCPBars::WidthType)
        this->QCPBars::setWidthType((QCPBars::WidthType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setBarsGroup(QCPBarsGroup*)
        this->QCPBars::setBarsGroup((QCPBarsGroup*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setBaseValue(double)
        this->QCPBars::setBaseValue((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setData(QMap<double,QCPBarData>*, bool)
        this->QCPBars::setData((QMap<double,QCPBarData>*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setData(const QVector<double>&, const QVector<double>&)
        this->QCPBars::setData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void moveBelow(QCPBars*)
        this->QCPBars::moveBelow((QCPBars*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void moveAbove(QCPBars*)
        this->QCPBars::moveAbove((QCPBars*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void addData(const QMap<double,QCPBarData>&)
        this->QCPBars::addData(*(const QMap<double,QCPBarData>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void addData(const QCPBarData&)
        this->QCPBars::addData(*(const QCPBarData*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void addData(double, double)
        this->QCPBars::addData((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void addData(const QVector<double>&, const QVector<double>&)
        this->QCPBars::addData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void removeDataBefore(double)
        this->QCPBars::removeDataBefore((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void removeDataAfter(double)
        this->QCPBars::removeDataAfter((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void removeData(double, double)
        this->QCPBars::removeData((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void removeData(double)
        this->QCPBars::removeData((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // virtual void clearData()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            this->QCPBars::clearData();
            (void)x; // noop (for compiler warning)
        } else {
            this->clearData();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_33(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            double xret = ((const x_QCPBars*)this)->QCPBars::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPBars*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_34(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            this->QCPBars::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_35(Smoke::Stack x) {
        // virtual void drawLegendIcon(QCPPainter*, const QRectF&) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            ((const x_QCPBars*)this)->QCPBars::drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPBars*)this)->drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_36(Smoke::Stack x) {
        // virtual QCPRange getKeyRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            QCPRange xret = ((const x_QCPBars*)this)->QCPBars::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPBars*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_37(Smoke::Stack x) {
        // virtual QCPRange getValueRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBars*>(this))) {
            QCPRange xret = ((const x_QCPBars*)this)->QCPBars::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPBars*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_38(Smoke::Stack x) {
        // void getVisibleDataBounds(QCPBarDataMap::const_iterator&, QCPBarDataMap::const_iterator&) const
        ((const x_QCPBars*)this)->QCPBars::getVisibleDataBounds(*(QCPBarDataMap::const_iterator*)x[1].s_class,*(QCPBarDataMap::const_iterator*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_39(Smoke::Stack x) {
        // QPolygonF getBarPolygon(double, double) const
        QPolygonF xret = ((const x_QCPBars*)this)->QCPBars::getBarPolygon((double)x[1].s_double,(double)x[2].s_double);
        x[0].s_class = (void*)new QPolygonF(xret);
    }
    void x_40(Smoke::Stack x) {
        // void getPixelWidth(double, double&, double&) const
        ((const x_QCPBars*)this)->QCPBars::getPixelWidth((double)x[1].s_double,*(double*)x[2].s_class,*(double*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_41(Smoke::Stack x) {
        // double getStackedBaseValue(double, bool) const
        double xret = ((const x_QCPBars*)this)->QCPBars::getStackedBaseValue((double)x[1].s_double,(bool)x[2].s_bool);
        x[0].s_double = xret;
    }
    static void x_42(Smoke::Stack x) {
        // static void connectBars(QCPBars*, QCPBars*)
        QCPBars::connectBars((QCPBars*)x[1].s_class,(QCPBars*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_43(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPBars::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_44(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPBars::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_45(Smoke::Stack x) {
        // void setData(QMap<double,QCPBarData>*)
        this->QCPBars::setData((QMap<double,QCPBarData>*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_46(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPBars*)this)->QCPBars::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    void x_47(Smoke::Stack x) {
        // QCPRange getKeyRange(bool&) const
        QCPRange xret = ((const x_QCPBars*)this)->QCPBars::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_48(Smoke::Stack x) {
        // QCPRange getValueRange(bool&) const
        QCPRange xret = ((const x_QCPBars*)this)->QCPBars::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    static void x_49(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPBars::staticMetaObject;
    }
    void x_50(Smoke::Stack x) {
        // QMap<double,QCPBarData>* mData
        x[0].s_class = (void*)this->QCPBars::mData;
    }
    void x_51(Smoke::Stack x) {
        // QMap<double,QCPBarData>* mData=
        this->QCPBars::mData = (QMap<double,QCPBarData>*)x[1].s_class;
    }
    void x_52(Smoke::Stack x) {
        // double mWidth
        x[0].s_double = this->QCPBars::mWidth;
    }
    void x_53(Smoke::Stack x) {
        // double mWidth=
        this->QCPBars::mWidth = (double)x[1].s_double;
    }
    void x_54(Smoke::Stack x) {
        // QCPBars::WidthType mWidthType
        x[0].s_enum = this->QCPBars::mWidthType;
    }
    void x_55(Smoke::Stack x) {
        // QCPBars::WidthType mWidthType=
        this->QCPBars::mWidthType = (QCPBars::WidthType)x[1].s_enum;
    }
    void x_56(Smoke::Stack x) {
        // QCPBarsGroup* mBarsGroup
        x[0].s_class = (void*)this->QCPBars::mBarsGroup;
    }
    void x_57(Smoke::Stack x) {
        // QCPBarsGroup* mBarsGroup=
        this->QCPBars::mBarsGroup = (QCPBarsGroup*)x[1].s_class;
    }
    void x_58(Smoke::Stack x) {
        // double mBaseValue
        x[0].s_double = this->QCPBars::mBaseValue;
    }
    void x_59(Smoke::Stack x) {
        // double mBaseValue=
        this->QCPBars::mBaseValue = (double)x[1].s_double;
    }
    void x_60(Smoke::Stack x) {
        // QPointer<QCPBars> mBarBelow
        x[0].s_class = (void*)&this->QCPBars::mBarBelow;
    }
    void x_61(Smoke::Stack x) {
        // QPointer<QCPBars> mBarBelow=
        this->QCPBars::mBarBelow = *(const QPointer<QCPBars>*)x[1].s_class;
    }
    void x_62(Smoke::Stack x) {
        // QPointer<QCPBars> mBarAbove
        x[0].s_class = (void*)&this->QCPBars::mBarAbove;
    }
    void x_63(Smoke::Stack x) {
        // QPointer<QCPBars> mBarAbove=
        this->QCPBars::mBarAbove = *(const QPointer<QCPBars>*)x[1].s_class;
    }
    static void x_64(Smoke::Stack x) {
        x[0].s_enum = (long)QCPBars::wtAbsolute;
    }
    static void x_65(Smoke::Stack x) {
        x[0].s_enum = (long)QCPBars::wtAxisRectRatio;
    }
    static void x_66(Smoke::Stack x) {
        x[0].s_enum = (long)QCPBars::wtPlotCoords;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(598, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPBars::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(599, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPBars::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(604, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPBars::qt_metacall(x1, x2, x3);
    }
    virtual void clearData() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(629, (void*)this, x)) return;
        this->QCPBars::clearData();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(630, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPBars::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(631, (void*)this, x)) return;
        this->QCPBars::draw(x1);
    }
    virtual void drawLegendIcon(QCPPainter* x1, const QRectF& x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        if (this->_binding->callMethod(632, (void*)this, x)) return;
        this->QCPBars::drawLegendIcon(x1, x2);
    }
    virtual QCPRange getKeyRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(633, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPBars::getKeyRange(x1, x2);
    }
    virtual QCPRange getValueRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(634, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPBars::getValueRange(x1, x2);
    }
    virtual bool addToLegend() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(136, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::addToLegend();
    }
    virtual bool removeFromLegend() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(137, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::removeFromLegend();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(143, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractPlottable::clipRect();
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(145, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractPlottable::selectionCategory();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(147, (void*)this, x)) return;
        this->QCPAbstractPlottable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(148, (void*)this, x)) return;
        this->QCPAbstractPlottable::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(146, (void*)this, x)) return;
        this->QCPAbstractPlottable::applyDefaultAntialiasingHint(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 29: //QCPBars::WidthType
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPBars::WidthType;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPBars::WidthType*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPBars::WidthType*)xdata = (QCPBars::WidthType)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPBars::WidthType*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPBars() { this->_binding->deleted(11, (void*)this); }
};
void xenum_QCPBars(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPBars::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPBars(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPBars *xself = (x_QCPBars*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPBars::x_3(args);	break;
        case 4: x_QCPBars::x_4(args);	break;
        case 5: x_QCPBars::x_5(args);	break;
        case 6: x_QCPBars::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPBars::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: x_QCPBars::x_42(args);	break;
        case 43: x_QCPBars::x_43(args);	break;
        case 44: x_QCPBars::x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: x_QCPBars::x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: x_QCPBars::x_64(args);	break;
        case 65: x_QCPBars::x_65(args);	break;
        case 66: x_QCPBars::x_66(args);	break;
        case 67: delete (QCPBars*)xself;	break;
    }
}
class x_QCPBarsGroup : public QCPBarsGroup, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBarsGroup*>(this))) {
            const QMetaObject* xret = ((const x_QCPBarsGroup*)this)->QCPBarsGroup::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPBarsGroup*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBarsGroup*>(this))) {
            void* xret = this->QCPBarsGroup::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPBarsGroup::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPBarsGroup::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPBarsGroup::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPBarsGroup::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPBarsGroup*>(this))) {
            int xret = this->QCPBarsGroup::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPBarsGroup* QCPBarsGroup(QCustomPlot*)
        x_QCPBarsGroup* xret = new x_QCPBarsGroup((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPBarsGroup(QCustomPlot* x1) : QCPBarsGroup(x1) {}
    void x_9(Smoke::Stack x) {
        // QCPBarsGroup::SpacingType spacingType() const
        QCPBarsGroup::SpacingType xret = ((const x_QCPBarsGroup*)this)->QCPBarsGroup::spacingType();
        x[0].s_enum = xret;
    }
    void x_10(Smoke::Stack x) {
        // double spacing() const
        double xret = ((const x_QCPBarsGroup*)this)->QCPBarsGroup::spacing();
        x[0].s_double = xret;
    }
    void x_11(Smoke::Stack x) {
        // void setSpacingType(QCPBarsGroup::SpacingType)
        this->QCPBarsGroup::setSpacingType((QCPBarsGroup::SpacingType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void setSpacing(double)
        this->QCPBarsGroup::setSpacing((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // QList<QCPBars*> bars() const
        QList<QCPBars*> xret = ((const x_QCPBarsGroup*)this)->QCPBarsGroup::bars();
        x[0].s_class = (void*)new QList<QCPBars*>(xret);
    }
    void x_14(Smoke::Stack x) {
        // QCPBars* bars(int) const
        QCPBars* xret = ((const x_QCPBarsGroup*)this)->QCPBarsGroup::bars((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_15(Smoke::Stack x) {
        // int size() const
        int xret = ((const x_QCPBarsGroup*)this)->QCPBarsGroup::size();
        x[0].s_int = xret;
    }
    void x_16(Smoke::Stack x) {
        // bool isEmpty() const
        bool xret = ((const x_QCPBarsGroup*)this)->QCPBarsGroup::isEmpty();
        x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
        // void clear()
        this->QCPBarsGroup::clear();
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // bool contains(QCPBars*) const
        bool xret = ((const x_QCPBarsGroup*)this)->QCPBarsGroup::contains((QCPBars*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_19(Smoke::Stack x) {
        // void append(QCPBars*)
        this->QCPBarsGroup::append((QCPBars*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void insert(int, QCPBars*)
        this->QCPBarsGroup::insert((int)x[1].s_int,(QCPBars*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void remove(QCPBars*)
        this->QCPBarsGroup::remove((QCPBars*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void registerBars(QCPBars*)
        this->QCPBarsGroup::registerBars((QCPBars*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void unregisterBars(QCPBars*)
        this->QCPBarsGroup::unregisterBars((QCPBars*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // double keyPixelOffset(const QCPBars*, double)
        double xret = this->QCPBarsGroup::keyPixelOffset((const QCPBars*)x[1].s_class,(double)x[2].s_double);
        x[0].s_double = xret;
    }
    void x_25(Smoke::Stack x) {
        // double getPixelSpacing(const QCPBars*, double)
        double xret = this->QCPBarsGroup::getPixelSpacing((const QCPBars*)x[1].s_class,(double)x[2].s_double);
        x[0].s_double = xret;
    }
    static void x_26(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPBarsGroup::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_27(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPBarsGroup::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_28(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPBarsGroup::staticMetaObject;
    }
    void x_29(Smoke::Stack x) {
        // QCustomPlot* mParentPlot
        x[0].s_class = (void*)this->QCPBarsGroup::mParentPlot;
    }
    void x_30(Smoke::Stack x) {
        // QCustomPlot* mParentPlot=
        this->QCPBarsGroup::mParentPlot = (QCustomPlot*)x[1].s_class;
    }
    void x_31(Smoke::Stack x) {
        // QCPBarsGroup::SpacingType mSpacingType
        x[0].s_enum = this->QCPBarsGroup::mSpacingType;
    }
    void x_32(Smoke::Stack x) {
        // QCPBarsGroup::SpacingType mSpacingType=
        this->QCPBarsGroup::mSpacingType = (QCPBarsGroup::SpacingType)x[1].s_enum;
    }
    void x_33(Smoke::Stack x) {
        // double mSpacing
        x[0].s_double = this->QCPBarsGroup::mSpacing;
    }
    void x_34(Smoke::Stack x) {
        // double mSpacing=
        this->QCPBarsGroup::mSpacing = (double)x[1].s_double;
    }
    void x_35(Smoke::Stack x) {
        // QList<QCPBars*> mBars
        x[0].s_class = (void*)&this->QCPBarsGroup::mBars;
    }
    void x_36(Smoke::Stack x) {
        // QList<QCPBars*> mBars=
        this->QCPBarsGroup::mBars = *(const QList<QCPBars*>*)x[1].s_class;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QCPBarsGroup::stAbsolute;
    }
    static void x_38(Smoke::Stack x) {
        x[0].s_enum = (long)QCPBarsGroup::stAxisRectRatio;
    }
    static void x_39(Smoke::Stack x) {
        x[0].s_enum = (long)QCPBarsGroup::stPlotCoords;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(665, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPBarsGroup::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(666, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPBarsGroup::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(671, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPBarsGroup::qt_metacall(x1, x2, x3);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 31: //QCPBarsGroup::SpacingType
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPBarsGroup::SpacingType;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPBarsGroup::SpacingType*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPBarsGroup::SpacingType*)xdata = (QCPBarsGroup::SpacingType)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPBarsGroup::SpacingType*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPBarsGroup() { this->_binding->deleted(12, (void*)this); }
};
void xenum_QCPBarsGroup(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPBarsGroup::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPBarsGroup(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPBarsGroup *xself = (x_QCPBarsGroup*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPBarsGroup::x_3(args);	break;
        case 4: x_QCPBarsGroup::x_4(args);	break;
        case 5: x_QCPBarsGroup::x_5(args);	break;
        case 6: x_QCPBarsGroup::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPBarsGroup::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: x_QCPBarsGroup::x_26(args);	break;
        case 27: x_QCPBarsGroup::x_27(args);	break;
        case 28: x_QCPBarsGroup::x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: x_QCPBarsGroup::x_37(args);	break;
        case 38: x_QCPBarsGroup::x_38(args);	break;
        case 39: x_QCPBarsGroup::x_39(args);	break;
        case 40: delete (QCPBarsGroup*)xself;	break;
    }
}

}
