//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPLegend : public QCPLegend, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            const QMetaObject* xret = ((const x_QCPLegend*)this)->QCPLegend::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPLegend*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            void* xret = this->QCPLegend::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPLegend::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPLegend::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPLegend::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPLegend::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            int xret = this->QCPLegend::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPLegend* QCPLegend()
        x_QCPLegend* xret = new x_QCPLegend();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLegend() : QCPLegend() {}
    void x_9(Smoke::Stack x) {
        // QPen borderPen() const
        QPen xret = ((const x_QCPLegend*)this)->QCPLegend::borderPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_10(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QCPLegend*)this)->QCPLegend::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_11(Smoke::Stack x) {
        // QFont font() const
        QFont xret = ((const x_QCPLegend*)this)->QCPLegend::font();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_12(Smoke::Stack x) {
        // QColor textColor() const
        QColor xret = ((const x_QCPLegend*)this)->QCPLegend::textColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_13(Smoke::Stack x) {
        // QSize iconSize() const
        QSize xret = ((const x_QCPLegend*)this)->QCPLegend::iconSize();
        x[0].s_class = (void*)new QSize(xret);
    }
    void x_14(Smoke::Stack x) {
        // int iconTextPadding() const
        int xret = ((const x_QCPLegend*)this)->QCPLegend::iconTextPadding();
        x[0].s_int = xret;
    }
    void x_15(Smoke::Stack x) {
        // QPen iconBorderPen() const
        QPen xret = ((const x_QCPLegend*)this)->QCPLegend::iconBorderPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_16(Smoke::Stack x) {
        // QFlags<QCPLegend::SelectablePart> selectableParts() const
        QFlags<QCPLegend::SelectablePart> xret = ((const x_QCPLegend*)this)->QCPLegend::selectableParts();
        x[0].s_uint = (uint)xret;
    }
    void x_17(Smoke::Stack x) {
        // QFlags<QCPLegend::SelectablePart> selectedParts() const
        QFlags<QCPLegend::SelectablePart> xret = ((const x_QCPLegend*)this)->QCPLegend::selectedParts();
        x[0].s_uint = (uint)xret;
    }
    void x_18(Smoke::Stack x) {
        // QPen selectedBorderPen() const
        QPen xret = ((const x_QCPLegend*)this)->QCPLegend::selectedBorderPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_19(Smoke::Stack x) {
        // QPen selectedIconBorderPen() const
        QPen xret = ((const x_QCPLegend*)this)->QCPLegend::selectedIconBorderPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_20(Smoke::Stack x) {
        // QBrush selectedBrush() const
        QBrush xret = ((const x_QCPLegend*)this)->QCPLegend::selectedBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_21(Smoke::Stack x) {
        // QFont selectedFont() const
        QFont xret = ((const x_QCPLegend*)this)->QCPLegend::selectedFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_22(Smoke::Stack x) {
        // QColor selectedTextColor() const
        QColor xret = ((const x_QCPLegend*)this)->QCPLegend::selectedTextColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_23(Smoke::Stack x) {
        // void setBorderPen(const QPen&)
        this->QCPLegend::setBorderPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QCPLegend::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setFont(const QFont&)
        this->QCPLegend::setFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setTextColor(const QColor&)
        this->QCPLegend::setTextColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setIconSize(const QSize&)
        this->QCPLegend::setIconSize(*(const QSize*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void setIconSize(int, int)
        this->QCPLegend::setIconSize((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void setIconTextPadding(int)
        this->QCPLegend::setIconTextPadding((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void setIconBorderPen(const QPen&)
        this->QCPLegend::setIconBorderPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void setSelectableParts(const QFlags<QCPLegend::SelectablePart>&)
        this->QCPLegend::setSelectableParts(*(const QFlags<QCPLegend::SelectablePart>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void setSelectedParts(const QFlags<QCPLegend::SelectablePart>&)
        this->QCPLegend::setSelectedParts(*(const QFlags<QCPLegend::SelectablePart>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // void setSelectedBorderPen(const QPen&)
        this->QCPLegend::setSelectedBorderPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // void setSelectedIconBorderPen(const QPen&)
        this->QCPLegend::setSelectedIconBorderPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
        // void setSelectedBrush(const QBrush&)
        this->QCPLegend::setSelectedBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
        // void setSelectedFont(const QFont&)
        this->QCPLegend::setSelectedFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
        // void setSelectedTextColor(const QColor&)
        this->QCPLegend::setSelectedTextColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_38(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            double xret = ((const x_QCPLegend*)this)->QCPLegend::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPLegend*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_39(Smoke::Stack x) {
        // QCPAbstractLegendItem* item(int) const
        QCPAbstractLegendItem* xret = ((const x_QCPLegend*)this)->QCPLegend::item((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_40(Smoke::Stack x) {
        // QCPPlottableLegendItem* itemWithPlottable(const QCPAbstractPlottable*) const
        QCPPlottableLegendItem* xret = ((const x_QCPLegend*)this)->QCPLegend::itemWithPlottable((const QCPAbstractPlottable*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_41(Smoke::Stack x) {
        // int itemCount() const
        int xret = ((const x_QCPLegend*)this)->QCPLegend::itemCount();
        x[0].s_int = xret;
    }
    void x_42(Smoke::Stack x) {
        // bool hasItem(QCPAbstractLegendItem*) const
        bool xret = ((const x_QCPLegend*)this)->QCPLegend::hasItem((QCPAbstractLegendItem*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_43(Smoke::Stack x) {
        // bool hasItemWithPlottable(const QCPAbstractPlottable*) const
        bool xret = ((const x_QCPLegend*)this)->QCPLegend::hasItemWithPlottable((const QCPAbstractPlottable*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_44(Smoke::Stack x) {
        // bool addItem(QCPAbstractLegendItem*)
        bool xret = this->QCPLegend::addItem((QCPAbstractLegendItem*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_45(Smoke::Stack x) {
        // bool removeItem(int)
        bool xret = this->QCPLegend::removeItem((int)x[1].s_int);
        x[0].s_bool = xret;
    }
    void x_46(Smoke::Stack x) {
        // bool removeItem(QCPAbstractLegendItem*)
        bool xret = this->QCPLegend::removeItem((QCPAbstractLegendItem*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_47(Smoke::Stack x) {
        // void clearItems()
        this->QCPLegend::clearItems();
        (void)x; // noop (for compiler warning)
    }
    void x_48(Smoke::Stack x) {
        // QList<QCPAbstractLegendItem*> selectedItems() const
        QList<QCPAbstractLegendItem*> xret = ((const x_QCPLegend*)this)->QCPLegend::selectedItems();
        x[0].s_class = (void*)new QList<QCPAbstractLegendItem*>(xret);
    }
    void x_49(Smoke::Stack x) {
        // void selectionChanged(QCPLegend::SelectableParts)
        this->QCPLegend::selectionChanged((QCPLegend::SelectableParts)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_50(Smoke::Stack x) {
        // void selectableChanged(QCPLegend::SelectableParts)
        this->QCPLegend::selectableChanged((QCPLegend::SelectableParts)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_51(Smoke::Stack x) {
        // virtual void parentPlotInitialized(QCustomPlot*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            this->QCPLegend::parentPlotInitialized((QCustomPlot*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->parentPlotInitialized((QCustomPlot*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_52(Smoke::Stack x) {
        // virtual QCP::Interaction selectionCategory() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            QCP::Interaction xret = ((const x_QCPLegend*)this)->QCPLegend::selectionCategory();
            x[0].s_enum = xret;
        } else {
            QCP::Interaction xret = ((const x_QCPLegend*)this)->selectionCategory();
            x[0].s_enum = xret;
        }
    }
    void x_53(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            ((const x_QCPLegend*)this)->QCPLegend::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPLegend*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_54(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            this->QCPLegend::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_55(Smoke::Stack x) {
        // virtual void selectEvent(QMouseEvent*, bool, const QVariant&, bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            this->QCPLegend::selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_56(Smoke::Stack x) {
        // virtual void deselectEvent(bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLegend*>(this))) {
            this->QCPLegend::deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_57(Smoke::Stack x) {
        // QPen getBorderPen() const
        QPen xret = ((const x_QCPLegend*)this)->QCPLegend::getBorderPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_58(Smoke::Stack x) {
        // QBrush getBrush() const
        QBrush xret = ((const x_QCPLegend*)this)->QCPLegend::getBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    static void x_59(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPLegend::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_60(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPLegend::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_61(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPLegend*)this)->QCPLegend::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_62(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPLegend::staticMetaObject;
    }
    void x_63(Smoke::Stack x) {
        // QPen mBorderPen
        x[0].s_class = (void*)&this->QCPLegend::mBorderPen;
    }
    void x_64(Smoke::Stack x) {
        // QPen mBorderPen=
        this->QCPLegend::mBorderPen = *(const QPen*)x[1].s_class;
    }
    void x_65(Smoke::Stack x) {
        // QPen mIconBorderPen
        x[0].s_class = (void*)&this->QCPLegend::mIconBorderPen;
    }
    void x_66(Smoke::Stack x) {
        // QPen mIconBorderPen=
        this->QCPLegend::mIconBorderPen = *(const QPen*)x[1].s_class;
    }
    void x_67(Smoke::Stack x) {
        // QBrush mBrush
        x[0].s_class = (void*)&this->QCPLegend::mBrush;
    }
    void x_68(Smoke::Stack x) {
        // QBrush mBrush=
        this->QCPLegend::mBrush = *(const QBrush*)x[1].s_class;
    }
    void x_69(Smoke::Stack x) {
        // QFont mFont
        x[0].s_class = (void*)&this->QCPLegend::mFont;
    }
    void x_70(Smoke::Stack x) {
        // QFont mFont=
        this->QCPLegend::mFont = *(const QFont*)x[1].s_class;
    }
    void x_71(Smoke::Stack x) {
        // QColor mTextColor
        x[0].s_class = (void*)&this->QCPLegend::mTextColor;
    }
    void x_72(Smoke::Stack x) {
        // QColor mTextColor=
        this->QCPLegend::mTextColor = *(const QColor*)x[1].s_class;
    }
    void x_73(Smoke::Stack x) {
        // QSize mIconSize
        x[0].s_class = (void*)&this->QCPLegend::mIconSize;
    }
    void x_74(Smoke::Stack x) {
        // QSize mIconSize=
        this->QCPLegend::mIconSize = *(const QSize*)x[1].s_class;
    }
    void x_75(Smoke::Stack x) {
        // int mIconTextPadding
        x[0].s_int = this->QCPLegend::mIconTextPadding;
    }
    void x_76(Smoke::Stack x) {
        // int mIconTextPadding=
        this->QCPLegend::mIconTextPadding = (int)x[1].s_int;
    }
    void x_77(Smoke::Stack x) {
        // QFlags<QCPLegend::SelectablePart> mSelectedParts
        x[0].s_uint = (uint)this->QCPLegend::mSelectedParts;
    }
    void x_78(Smoke::Stack x) {
        // QFlags<QCPLegend::SelectablePart> mSelectedParts=
        this->QCPLegend::mSelectedParts = (QFlags<QCPLegend::SelectablePart>)x[1].s_uint;
    }
    void x_79(Smoke::Stack x) {
        // QFlags<QCPLegend::SelectablePart> mSelectableParts
        x[0].s_uint = (uint)this->QCPLegend::mSelectableParts;
    }
    void x_80(Smoke::Stack x) {
        // QFlags<QCPLegend::SelectablePart> mSelectableParts=
        this->QCPLegend::mSelectableParts = (QFlags<QCPLegend::SelectablePart>)x[1].s_uint;
    }
    void x_81(Smoke::Stack x) {
        // QPen mSelectedBorderPen
        x[0].s_class = (void*)&this->QCPLegend::mSelectedBorderPen;
    }
    void x_82(Smoke::Stack x) {
        // QPen mSelectedBorderPen=
        this->QCPLegend::mSelectedBorderPen = *(const QPen*)x[1].s_class;
    }
    void x_83(Smoke::Stack x) {
        // QPen mSelectedIconBorderPen
        x[0].s_class = (void*)&this->QCPLegend::mSelectedIconBorderPen;
    }
    void x_84(Smoke::Stack x) {
        // QPen mSelectedIconBorderPen=
        this->QCPLegend::mSelectedIconBorderPen = *(const QPen*)x[1].s_class;
    }
    void x_85(Smoke::Stack x) {
        // QBrush mSelectedBrush
        x[0].s_class = (void*)&this->QCPLegend::mSelectedBrush;
    }
    void x_86(Smoke::Stack x) {
        // QBrush mSelectedBrush=
        this->QCPLegend::mSelectedBrush = *(const QBrush*)x[1].s_class;
    }
    void x_87(Smoke::Stack x) {
        // QFont mSelectedFont
        x[0].s_class = (void*)&this->QCPLegend::mSelectedFont;
    }
    void x_88(Smoke::Stack x) {
        // QFont mSelectedFont=
        this->QCPLegend::mSelectedFont = *(const QFont*)x[1].s_class;
    }
    void x_89(Smoke::Stack x) {
        // QColor mSelectedTextColor
        x[0].s_class = (void*)&this->QCPLegend::mSelectedTextColor;
    }
    void x_90(Smoke::Stack x) {
        // QColor mSelectedTextColor=
        this->QCPLegend::mSelectedTextColor = *(const QColor*)x[1].s_class;
    }
    static void x_91(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLegend::spNone;
    }
    static void x_92(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLegend::spLegendBox;
    }
    static void x_93(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLegend::spItems;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1988, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPLegend::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1989, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPLegend::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1994, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLegend::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(2025, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLegend::selectTest(x1, x2, x3);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2038, (void*)this, x)) return;
        this->QCPLegend::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2039, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLegend::selectionCategory();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2040, (void*)this, x)) return;
        this->QCPLegend::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2041, (void*)this, x)) return;
        this->QCPLegend::draw(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(2042, (void*)this, x)) return;
        this->QCPLegend::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2043, (void*)this, x)) return;
        this->QCPLegend::deselectEvent(x1);
    }
    virtual void updateLayout() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1919, (void*)this, x)) return;
        this->QCPLayoutGrid::updateLayout();
    }
    virtual int elementCount() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1920, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutGrid::elementCount();
    }
    virtual QCPLayoutElement* elementAt(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1921, (void*)this, x)) return (QCPLayoutElement*)x[0].s_class;
        return this->QCPLayoutGrid::elementAt(x1);
    }
    virtual QCPLayoutElement* takeAt(int x1) {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1922, (void*)this, x)) return (QCPLayoutElement*)x[0].s_class;
        return this->QCPLayoutGrid::takeAt(x1);
    }
    virtual bool take(QCPLayoutElement* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1923, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPLayoutGrid::take(x1);
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1924, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutGrid::elements(x1);
    }
    virtual void simplify() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1925, (void*)this, x)) return;
        this->QCPLayoutGrid::simplify();
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1926, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutGrid::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1927, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutGrid::maximumSizeHint();
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1812, (void*)this, x)) return;
        this->QCPLayout::update(x1);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1864, (void*)this, x)) return;
        this->QCPLayoutElement::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1865, (void*)this, x)) return;
        this->QCPLayoutElement::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1866, (void*)this, x)) return;
        this->QCPLayoutElement::mouseReleaseEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1868, (void*)this, x)) return;
        this->QCPLayoutElement::wheelEvent(x1);
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 90: //QCPLegend::SelectablePart
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPLegend::SelectablePart;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPLegend::SelectablePart*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPLegend::SelectablePart*)xdata = (QCPLegend::SelectablePart)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPLegend::SelectablePart*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPLegend() { this->_binding->deleted(42, (void*)this); }
};
void xenum_QCPLegend(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPLegend::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPLegend(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPLegend *xself = (x_QCPLegend*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPLegend::x_3(args);	break;
        case 4: x_QCPLegend::x_4(args);	break;
        case 5: x_QCPLegend::x_5(args);	break;
        case 6: x_QCPLegend::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPLegend::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: x_QCPLegend::x_59(args);	break;
        case 60: x_QCPLegend::x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: x_QCPLegend::x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: xself->x_81(args);	break;
        case 82: xself->x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: xself->x_84(args);	break;
        case 85: xself->x_85(args);	break;
        case 86: xself->x_86(args);	break;
        case 87: xself->x_87(args);	break;
        case 88: xself->x_88(args);	break;
        case 89: xself->x_89(args);	break;
        case 90: xself->x_90(args);	break;
        case 91: x_QCPLegend::x_91(args);	break;
        case 92: x_QCPLegend::x_92(args);	break;
        case 93: x_QCPLegend::x_93(args);	break;
        case 94: delete (QCPLegend*)xself;	break;
    }
}
class x_QCPLineEnding : public QCPLineEnding {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPLineEnding* QCPLineEnding()
        x_QCPLineEnding* xret = new x_QCPLineEnding();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLineEnding() : QCPLineEnding() {}
    static void x_2(Smoke::Stack x) {
        // QCPLineEnding* QCPLineEnding(QCPLineEnding::EndingStyle, double, double, bool)
        x_QCPLineEnding* xret = new x_QCPLineEnding((QCPLineEnding::EndingStyle)x[1].s_enum,(double)x[2].s_double,(double)x[3].s_double,(bool)x[4].s_bool);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLineEnding(QCPLineEnding::EndingStyle x1, double x2, double x3, bool x4) : QCPLineEnding(x1, x2, x3, x4) {}
    void x_3(Smoke::Stack x) {
        // QCPLineEnding::EndingStyle style() const
        QCPLineEnding::EndingStyle xret = ((const x_QCPLineEnding*)this)->QCPLineEnding::style();
        x[0].s_enum = xret;
    }
    void x_4(Smoke::Stack x) {
        // double width() const
        double xret = ((const x_QCPLineEnding*)this)->QCPLineEnding::width();
        x[0].s_double = xret;
    }
    void x_5(Smoke::Stack x) {
        // double length() const
        double xret = ((const x_QCPLineEnding*)this)->QCPLineEnding::length();
        x[0].s_double = xret;
    }
    void x_6(Smoke::Stack x) {
        // bool inverted() const
        bool xret = ((const x_QCPLineEnding*)this)->QCPLineEnding::inverted();
        x[0].s_bool = xret;
    }
    void x_7(Smoke::Stack x) {
        // void setStyle(QCPLineEnding::EndingStyle)
        this->QCPLineEnding::setStyle((QCPLineEnding::EndingStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) {
        // void setWidth(double)
        this->QCPLineEnding::setWidth((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) {
        // void setLength(double)
        this->QCPLineEnding::setLength((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // void setInverted(bool)
        this->QCPLineEnding::setInverted((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
        // double boundingDistance() const
        double xret = ((const x_QCPLineEnding*)this)->QCPLineEnding::boundingDistance();
        x[0].s_double = xret;
    }
    void x_12(Smoke::Stack x) {
        // double realLength() const
        double xret = ((const x_QCPLineEnding*)this)->QCPLineEnding::realLength();
        x[0].s_double = xret;
    }
    void x_13(Smoke::Stack x) {
        // void draw(QCPPainter*, const QVector2D&, const QVector2D&) const
        ((const x_QCPLineEnding*)this)->QCPLineEnding::draw((QCPPainter*)x[1].s_class,*(const QVector2D*)x[2].s_class,*(const QVector2D*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void draw(QCPPainter*, const QVector2D&, double) const
        ((const x_QCPLineEnding*)this)->QCPLineEnding::draw((QCPPainter*)x[1].s_class,*(const QVector2D*)x[2].s_class,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    static void x_15(Smoke::Stack x) {
        // QCPLineEnding* QCPLineEnding(const QCPLineEnding&)
        x_QCPLineEnding* xret = new x_QCPLineEnding(*(const QCPLineEnding*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLineEnding(const QCPLineEnding& x1) : QCPLineEnding(x1) {}
    static void x_16(Smoke::Stack x) {
        // QCPLineEnding* QCPLineEnding(QCPLineEnding::EndingStyle)
        x_QCPLineEnding* xret = new x_QCPLineEnding((QCPLineEnding::EndingStyle)x[1].s_enum,(double)8,(double)10,(bool)false);
        x[0].s_class = (void*)xret;
    }
    static void x_17(Smoke::Stack x) {
        // QCPLineEnding* QCPLineEnding(QCPLineEnding::EndingStyle, double)
        x_QCPLineEnding* xret = new x_QCPLineEnding((QCPLineEnding::EndingStyle)x[1].s_enum,(double)x[2].s_double,(double)10,(bool)false);
        x[0].s_class = (void*)xret;
    }
    static void x_18(Smoke::Stack x) {
        // QCPLineEnding* QCPLineEnding(QCPLineEnding::EndingStyle, double, double)
        x_QCPLineEnding* xret = new x_QCPLineEnding((QCPLineEnding::EndingStyle)x[1].s_enum,(double)x[2].s_double,(double)x[3].s_double,(bool)false);
        x[0].s_class = (void*)xret;
    }
    static void x_19(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPLineEnding::staticMetaObject;
    }
    void x_20(Smoke::Stack x) {
        // QCPLineEnding::EndingStyle mStyle
        x[0].s_enum = this->QCPLineEnding::mStyle;
    }
    void x_21(Smoke::Stack x) {
        // QCPLineEnding::EndingStyle mStyle=
        this->QCPLineEnding::mStyle = (QCPLineEnding::EndingStyle)x[1].s_enum;
    }
    void x_22(Smoke::Stack x) {
        // double mWidth
        x[0].s_double = this->QCPLineEnding::mWidth;
    }
    void x_23(Smoke::Stack x) {
        // double mWidth=
        this->QCPLineEnding::mWidth = (double)x[1].s_double;
    }
    void x_24(Smoke::Stack x) {
        // double mLength
        x[0].s_double = this->QCPLineEnding::mLength;
    }
    void x_25(Smoke::Stack x) {
        // double mLength=
        this->QCPLineEnding::mLength = (double)x[1].s_double;
    }
    void x_26(Smoke::Stack x) {
        // bool mInverted
        x[0].s_bool = this->QCPLineEnding::mInverted;
    }
    void x_27(Smoke::Stack x) {
        // bool mInverted=
        this->QCPLineEnding::mInverted = (bool)x[1].s_bool;
    }
    static void x_28(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esNone;
    }
    static void x_29(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esFlatArrow;
    }
    static void x_30(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esSpikeArrow;
    }
    static void x_31(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esLineArrow;
    }
    static void x_32(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esDisc;
    }
    static void x_33(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esSquare;
    }
    static void x_34(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esDiamond;
    }
    static void x_35(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esBar;
    }
    static void x_36(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esHalfBar;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLineEnding::esSkewedBar;
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 95: //QCPLineEnding::EndingStyle
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPLineEnding::EndingStyle;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPLineEnding::EndingStyle*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPLineEnding::EndingStyle*)xdata = (QCPLineEnding::EndingStyle)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPLineEnding::EndingStyle*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPLineEnding() { this->_binding->deleted(43, (void*)this); }
};
void xenum_QCPLineEnding(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPLineEnding::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPLineEnding(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPLineEnding *xself = (x_QCPLineEnding*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPLineEnding::x_1(args);	break;
        case 2: x_QCPLineEnding::x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: x_QCPLineEnding::x_15(args);	break;
        case 16: x_QCPLineEnding::x_16(args);	break;
        case 17: x_QCPLineEnding::x_17(args);	break;
        case 18: x_QCPLineEnding::x_18(args);	break;
        case 19: x_QCPLineEnding::x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: x_QCPLineEnding::x_28(args);	break;
        case 29: x_QCPLineEnding::x_29(args);	break;
        case 30: x_QCPLineEnding::x_30(args);	break;
        case 31: x_QCPLineEnding::x_31(args);	break;
        case 32: x_QCPLineEnding::x_32(args);	break;
        case 33: x_QCPLineEnding::x_33(args);	break;
        case 34: x_QCPLineEnding::x_34(args);	break;
        case 35: x_QCPLineEnding::x_35(args);	break;
        case 36: x_QCPLineEnding::x_36(args);	break;
        case 37: x_QCPLineEnding::x_37(args);	break;
        case 38: delete (QCPLineEnding*)xself;	break;
    }
}
class x_QCPMarginGroup : public QCPMarginGroup, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPMarginGroup*>(this))) {
            const QMetaObject* xret = ((const x_QCPMarginGroup*)this)->QCPMarginGroup::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPMarginGroup*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPMarginGroup*>(this))) {
            void* xret = this->QCPMarginGroup::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPMarginGroup::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPMarginGroup::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPMarginGroup::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPMarginGroup::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPMarginGroup*>(this))) {
            int xret = this->QCPMarginGroup::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPMarginGroup* QCPMarginGroup(QCustomPlot*)
        x_QCPMarginGroup* xret = new x_QCPMarginGroup((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPMarginGroup(QCustomPlot* x1) : QCPMarginGroup(x1) {}
    void x_9(Smoke::Stack x) {
        // QList<QCPLayoutElement*> elements(QCP::MarginSide) const
        QList<QCPLayoutElement*> xret = ((const x_QCPMarginGroup*)this)->QCPMarginGroup::elements((QCP::MarginSide)x[1].s_enum);
        x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
    }
    void x_10(Smoke::Stack x) {
        // bool isEmpty() const
        bool xret = ((const x_QCPMarginGroup*)this)->QCPMarginGroup::isEmpty();
        x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) {
        // void clear()
        this->QCPMarginGroup::clear();
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // int commonMargin(QCP::MarginSide) const
        int xret = ((const x_QCPMarginGroup*)this)->QCPMarginGroup::commonMargin((QCP::MarginSide)x[1].s_enum);
        x[0].s_int = xret;
    }
    void x_13(Smoke::Stack x) {
        // void addChild(QCP::MarginSide, QCPLayoutElement*)
        this->QCPMarginGroup::addChild((QCP::MarginSide)x[1].s_enum,(QCPLayoutElement*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void removeChild(QCP::MarginSide, QCPLayoutElement*)
        this->QCPMarginGroup::removeChild((QCP::MarginSide)x[1].s_enum,(QCPLayoutElement*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_15(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPMarginGroup::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_16(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPMarginGroup::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_17(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPMarginGroup::staticMetaObject;
    }
    void x_18(Smoke::Stack x) {
        // QCustomPlot* mParentPlot
        x[0].s_class = (void*)this->QCPMarginGroup::mParentPlot;
    }
    void x_19(Smoke::Stack x) {
        // QCustomPlot* mParentPlot=
        this->QCPMarginGroup::mParentPlot = (QCustomPlot*)x[1].s_class;
    }
    void x_20(Smoke::Stack x) {
        // QHash<QCP::MarginSide,QList<QCPLayoutElement*> > mChildren
        x[0].s_class = (void*)&this->QCPMarginGroup::mChildren;
    }
    void x_21(Smoke::Stack x) {
        // QHash<QCP::MarginSide,QList<QCPLayoutElement*> > mChildren=
        this->QCPMarginGroup::mChildren = *(const QHash<QCP::MarginSide,QList<QCPLayoutElement*> >*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2120, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPMarginGroup::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2121, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPMarginGroup::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(2126, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPMarginGroup::qt_metacall(x1, x2, x3);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPMarginGroup() { this->_binding->deleted(44, (void*)this); }
};
void xcall_QCPMarginGroup(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPMarginGroup *xself = (x_QCPMarginGroup*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPMarginGroup::x_3(args);	break;
        case 4: x_QCPMarginGroup::x_4(args);	break;
        case 5: x_QCPMarginGroup::x_5(args);	break;
        case 6: x_QCPMarginGroup::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPMarginGroup::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: x_QCPMarginGroup::x_15(args);	break;
        case 16: x_QCPMarginGroup::x_16(args);	break;
        case 17: x_QCPMarginGroup::x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: delete (QCPMarginGroup*)xself;	break;
    }
}
class x_QCPPainter : public QCPPainter {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPPainter* QCPPainter()
        x_QCPPainter* xret = new x_QCPPainter();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPPainter() : QCPPainter() {}
    static void x_2(Smoke::Stack x) {
        // QCPPainter* QCPPainter(QPaintDevice*)
        x_QCPPainter* xret = new x_QCPPainter((QPaintDevice*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPPainter(QPaintDevice* x1) : QCPPainter(x1) {}
    void x_3(Smoke::Stack x) {
        // bool antialiasing() const
        bool xret = ((const x_QCPPainter*)this)->QCPPainter::antialiasing();
        x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
        // QFlags<QCPPainter::PainterMode> modes() const
        QFlags<QCPPainter::PainterMode> xret = ((const x_QCPPainter*)this)->QCPPainter::modes();
        x[0].s_uint = (uint)xret;
    }
    void x_5(Smoke::Stack x) {
        // void setAntialiasing(bool)
        this->QCPPainter::setAntialiasing((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_6(Smoke::Stack x) {
        // void setMode(QCPPainter::PainterMode, bool)
        this->QCPPainter::setMode((QCPPainter::PainterMode)x[1].s_enum,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) {
        // void setModes(QFlags<QCPPainter::PainterMode>)
        this->QCPPainter::setModes((QFlags<QCPPainter::PainterMode>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) {
        // bool begin(QPaintDevice*)
        bool xret = this->QCPPainter::begin((QPaintDevice*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPPainter::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // void setPen(const QColor&)
        this->QCPPainter::setPen(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
        // void setPen(Qt::PenStyle)
        this->QCPPainter::setPen((Qt::PenStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void drawLine(const QLineF&)
        this->QCPPainter::drawLine(*(const QLineF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // void drawLine(const QPointF&, const QPointF&)
        this->QCPPainter::drawLine(*(const QPointF*)x[1].s_class,*(const QPointF*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void save()
        this->QCPPainter::save();
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void restore()
        this->QCPPainter::restore();
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void makeNonCosmetic()
        this->QCPPainter::makeNonCosmetic();
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setMode(QCPPainter::PainterMode)
        this->QCPPainter::setMode((QCPPainter::PainterMode)x[1].s_enum,(bool)true);
        (void)x; // noop (for compiler warning)
    }
    static void x_18(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPPainter::staticMetaObject;
    }
    void x_19(Smoke::Stack x) {
        // QFlags<QCPPainter::PainterMode> mModes
        x[0].s_uint = (uint)this->QCPPainter::mModes;
    }
    void x_20(Smoke::Stack x) {
        // QFlags<QCPPainter::PainterMode> mModes=
        this->QCPPainter::mModes = (QFlags<QCPPainter::PainterMode>)x[1].s_uint;
    }
    void x_21(Smoke::Stack x) {
        // bool mIsAntialiasing
        x[0].s_bool = this->QCPPainter::mIsAntialiasing;
    }
    void x_22(Smoke::Stack x) {
        // bool mIsAntialiasing=
        this->QCPPainter::mIsAntialiasing = (bool)x[1].s_bool;
    }
    void x_23(Smoke::Stack x) {
        // QStack<bool> mAntialiasingStack
        x[0].s_class = (void*)&this->QCPPainter::mAntialiasingStack;
    }
    void x_24(Smoke::Stack x) {
        // QStack<bool> mAntialiasingStack=
        this->QCPPainter::mAntialiasingStack = *(const QStack<bool>*)x[1].s_class;
    }
    static void x_25(Smoke::Stack x) {
        x[0].s_enum = (long)QCPPainter::pmDefault;
    }
    static void x_26(Smoke::Stack x) {
        x[0].s_enum = (long)QCPPainter::pmVectorized;
    }
    static void x_27(Smoke::Stack x) {
        x[0].s_enum = (long)QCPPainter::pmNoCaching;
    }
    static void x_28(Smoke::Stack x) {
        x[0].s_enum = (long)QCPPainter::pmNonCosmetic;
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 98: //QCPPainter::PainterMode
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPPainter::PainterMode;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPPainter::PainterMode*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPPainter::PainterMode*)xdata = (QCPPainter::PainterMode)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPPainter::PainterMode*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPPainter() { this->_binding->deleted(45, (void*)this); }
};
void xenum_QCPPainter(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPPainter::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPPainter(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPPainter *xself = (x_QCPPainter*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPPainter::x_1(args);	break;
        case 2: x_QCPPainter::x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: x_QCPPainter::x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: x_QCPPainter::x_25(args);	break;
        case 26: x_QCPPainter::x_26(args);	break;
        case 27: x_QCPPainter::x_27(args);	break;
        case 28: x_QCPPainter::x_28(args);	break;
        case 29: delete (QCPPainter*)xself;	break;
    }
}
class x_QCPPlotTitle : public QCPPlotTitle, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            const QMetaObject* xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPPlotTitle*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            void* xret = this->QCPPlotTitle::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPPlotTitle::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPPlotTitle::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPPlotTitle::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPPlotTitle::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            int xret = this->QCPPlotTitle::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPPlotTitle* QCPPlotTitle(QCustomPlot*)
        x_QCPPlotTitle* xret = new x_QCPPlotTitle((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPPlotTitle(QCustomPlot* x1) : QCPPlotTitle(x1) {}
    static void x_9(Smoke::Stack x) {
        // QCPPlotTitle* QCPPlotTitle(QCustomPlot*, const QString&)
        x_QCPPlotTitle* xret = new x_QCPPlotTitle((QCustomPlot*)x[1].s_class,*(const QString*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPPlotTitle(QCustomPlot* x1, const QString& x2) : QCPPlotTitle(x1, x2) {}
    void x_10(Smoke::Stack x) {
        // QString text() const
        QString xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::text();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_11(Smoke::Stack x) {
        // QFont font() const
        QFont xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::font();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_12(Smoke::Stack x) {
        // QColor textColor() const
        QColor xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::textColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_13(Smoke::Stack x) {
        // QFont selectedFont() const
        QFont xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::selectedFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_14(Smoke::Stack x) {
        // QColor selectedTextColor() const
        QColor xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::selectedTextColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_15(Smoke::Stack x) {
        // bool selectable() const
        bool xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::selectable();
        x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) {
        // bool selected() const
        bool xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::selected();
        x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
        // void setText(const QString&)
        this->QCPPlotTitle::setText(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setFont(const QFont&)
        this->QCPPlotTitle::setFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setTextColor(const QColor&)
        this->QCPPlotTitle::setTextColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setSelectedFont(const QFont&)
        this->QCPPlotTitle::setSelectedFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setSelectedTextColor(const QColor&)
        this->QCPPlotTitle::setSelectedTextColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setSelectable(bool)
        this->QCPPlotTitle::setSelectable((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setSelected(bool)
        this->QCPPlotTitle::setSelected((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            double xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPPlotTitle*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_25(Smoke::Stack x) {
        // void selectionChanged(bool)
        this->QCPPlotTitle::selectionChanged((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void selectableChanged(bool)
        this->QCPPlotTitle::selectableChanged((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            ((const x_QCPPlotTitle*)this)->QCPPlotTitle::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPPlotTitle*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_28(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            this->QCPPlotTitle::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_29(Smoke::Stack x) {
        // virtual QSize minimumSizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            QSize xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCPPlotTitle*)this)->minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_30(Smoke::Stack x) {
        // virtual QSize maximumSizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            QSize xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::maximumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCPPlotTitle*)this)->maximumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_31(Smoke::Stack x) {
        // virtual void selectEvent(QMouseEvent*, bool, const QVariant&, bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            this->QCPPlotTitle::selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->selectEvent((QMouseEvent*)x[1].s_class,(bool)x[2].s_bool,*(const QVariant*)x[3].s_class,(bool*)x[4].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_32(Smoke::Stack x) {
        // virtual void deselectEvent(bool*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlotTitle*>(this))) {
            this->QCPPlotTitle::deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->deselectEvent((bool*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_33(Smoke::Stack x) {
        // QFont mainFont() const
        QFont xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::mainFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_34(Smoke::Stack x) {
        // QColor mainTextColor() const
        QColor xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::mainTextColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    static void x_35(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPPlotTitle::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_36(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPPlotTitle::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_37(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPPlotTitle*)this)->QCPPlotTitle::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_38(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPPlotTitle::staticMetaObject;
    }
    void x_39(Smoke::Stack x) {
        // QString mText
        x[0].s_class = (void*)&this->QCPPlotTitle::mText;
    }
    void x_40(Smoke::Stack x) {
        // QString mText=
        this->QCPPlotTitle::mText = *(const QString*)x[1].s_class;
    }
    void x_41(Smoke::Stack x) {
        // QFont mFont
        x[0].s_class = (void*)&this->QCPPlotTitle::mFont;
    }
    void x_42(Smoke::Stack x) {
        // QFont mFont=
        this->QCPPlotTitle::mFont = *(const QFont*)x[1].s_class;
    }
    void x_43(Smoke::Stack x) {
        // QColor mTextColor
        x[0].s_class = (void*)&this->QCPPlotTitle::mTextColor;
    }
    void x_44(Smoke::Stack x) {
        // QColor mTextColor=
        this->QCPPlotTitle::mTextColor = *(const QColor*)x[1].s_class;
    }
    void x_45(Smoke::Stack x) {
        // QFont mSelectedFont
        x[0].s_class = (void*)&this->QCPPlotTitle::mSelectedFont;
    }
    void x_46(Smoke::Stack x) {
        // QFont mSelectedFont=
        this->QCPPlotTitle::mSelectedFont = *(const QFont*)x[1].s_class;
    }
    void x_47(Smoke::Stack x) {
        // QColor mSelectedTextColor
        x[0].s_class = (void*)&this->QCPPlotTitle::mSelectedTextColor;
    }
    void x_48(Smoke::Stack x) {
        // QColor mSelectedTextColor=
        this->QCPPlotTitle::mSelectedTextColor = *(const QColor*)x[1].s_class;
    }
    void x_49(Smoke::Stack x) {
        // QRect mTextBoundingRect
        x[0].s_class = (void*)&this->QCPPlotTitle::mTextBoundingRect;
    }
    void x_50(Smoke::Stack x) {
        // QRect mTextBoundingRect=
        this->QCPPlotTitle::mTextBoundingRect = *(const QRect*)x[1].s_class;
    }
    void x_51(Smoke::Stack x) {
        // bool mSelectable
        x[0].s_bool = this->QCPPlotTitle::mSelectable;
    }
    void x_52(Smoke::Stack x) {
        // bool mSelectable=
        this->QCPPlotTitle::mSelectable = (bool)x[1].s_bool;
    }
    void x_53(Smoke::Stack x) {
        // bool mSelected
        x[0].s_bool = this->QCPPlotTitle::mSelected;
    }
    void x_54(Smoke::Stack x) {
        // bool mSelected=
        this->QCPPlotTitle::mSelected = (bool)x[1].s_bool;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2171, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPPlotTitle::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2172, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPPlotTitle::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(2177, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPPlotTitle::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(2194, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPPlotTitle::selectTest(x1, x2, x3);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2197, (void*)this, x)) return;
        this->QCPPlotTitle::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2198, (void*)this, x)) return;
        this->QCPPlotTitle::draw(x1);
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2199, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPPlotTitle::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2200, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPPlotTitle::maximumSizeHint();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(2201, (void*)this, x)) return;
        this->QCPPlotTitle::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2202, (void*)this, x)) return;
        this->QCPPlotTitle::deselectEvent(x1);
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1858, (void*)this, x)) return;
        this->QCPLayoutElement::update(x1);
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1861, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::elements(x1);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1864, (void*)this, x)) return;
        this->QCPLayoutElement::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1865, (void*)this, x)) return;
        this->QCPLayoutElement::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1866, (void*)this, x)) return;
        this->QCPLayoutElement::mouseReleaseEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1868, (void*)this, x)) return;
        this->QCPLayoutElement::wheelEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPPlotTitle() { this->_binding->deleted(46, (void*)this); }
};
void xcall_QCPPlotTitle(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPPlotTitle *xself = (x_QCPPlotTitle*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPPlotTitle::x_3(args);	break;
        case 4: x_QCPPlotTitle::x_4(args);	break;
        case 5: x_QCPPlotTitle::x_5(args);	break;
        case 6: x_QCPPlotTitle::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPPlotTitle::x_8(args);	break;
        case 9: x_QCPPlotTitle::x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: x_QCPPlotTitle::x_35(args);	break;
        case 36: x_QCPPlotTitle::x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: x_QCPPlotTitle::x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: delete (QCPPlotTitle*)xself;	break;
    }
}
class x_QCPPlottableLegendItem : public QCPPlottableLegendItem, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlottableLegendItem*>(this))) {
            const QMetaObject* xret = ((const x_QCPPlottableLegendItem*)this)->QCPPlottableLegendItem::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPPlottableLegendItem*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlottableLegendItem*>(this))) {
            void* xret = this->QCPPlottableLegendItem::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPPlottableLegendItem::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPPlottableLegendItem::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPPlottableLegendItem::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPPlottableLegendItem::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlottableLegendItem*>(this))) {
            int xret = this->QCPPlottableLegendItem::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPPlottableLegendItem* QCPPlottableLegendItem(QCPLegend*, QCPAbstractPlottable*)
        x_QCPPlottableLegendItem* xret = new x_QCPPlottableLegendItem((QCPLegend*)x[1].s_class,(QCPAbstractPlottable*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPPlottableLegendItem(QCPLegend* x1, QCPAbstractPlottable* x2) : QCPPlottableLegendItem(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QCPAbstractPlottable* plottable()
        QCPAbstractPlottable* xret = this->QCPPlottableLegendItem::plottable();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlottableLegendItem*>(this))) {
            this->QCPPlottableLegendItem::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_11(Smoke::Stack x) {
        // virtual QSize minimumSizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPPlottableLegendItem*>(this))) {
            QSize xret = ((const x_QCPPlottableLegendItem*)this)->QCPPlottableLegendItem::minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCPPlottableLegendItem*)this)->minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_12(Smoke::Stack x) {
        // QPen getIconBorderPen() const
        QPen xret = ((const x_QCPPlottableLegendItem*)this)->QCPPlottableLegendItem::getIconBorderPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_13(Smoke::Stack x) {
        // QColor getTextColor() const
        QColor xret = ((const x_QCPPlottableLegendItem*)this)->QCPPlottableLegendItem::getTextColor();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_14(Smoke::Stack x) {
        // QFont getFont() const
        QFont xret = ((const x_QCPPlottableLegendItem*)this)->QCPPlottableLegendItem::getFont();
        x[0].s_class = (void*)new QFont(xret);
    }
    static void x_15(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPPlottableLegendItem::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_16(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPPlottableLegendItem::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_17(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPPlottableLegendItem::staticMetaObject;
    }
    void x_18(Smoke::Stack x) {
        // QCPAbstractPlottable* mPlottable
        x[0].s_class = (void*)this->QCPPlottableLegendItem::mPlottable;
    }
    void x_19(Smoke::Stack x) {
        // QCPAbstractPlottable* mPlottable=
        this->QCPPlottableLegendItem::mPlottable = (QCPAbstractPlottable*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2226, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPPlottableLegendItem::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2227, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPPlottableLegendItem::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(2232, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPPlottableLegendItem::qt_metacall(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2235, (void*)this, x)) return;
        this->QCPPlottableLegendItem::draw(x1);
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2236, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPPlottableLegendItem::minimumSizeHint();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(74, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPAbstractLegendItem::selectTest(x1, x2, x3);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(77, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractLegendItem::selectionCategory();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(78, (void*)this, x)) return;
        this->QCPAbstractLegendItem::applyDefaultAntialiasingHint(x1);
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(79, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractLegendItem::clipRect();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(81, (void*)this, x)) return;
        this->QCPAbstractLegendItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(82, (void*)this, x)) return;
        this->QCPAbstractLegendItem::deselectEvent(x1);
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1858, (void*)this, x)) return;
        this->QCPLayoutElement::update(x1);
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1860, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::maximumSizeHint();
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1861, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::elements(x1);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1864, (void*)this, x)) return;
        this->QCPLayoutElement::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1865, (void*)this, x)) return;
        this->QCPLayoutElement::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1866, (void*)this, x)) return;
        this->QCPLayoutElement::mouseReleaseEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1868, (void*)this, x)) return;
        this->QCPLayoutElement::wheelEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPPlottableLegendItem() { this->_binding->deleted(47, (void*)this); }
};
void xcall_QCPPlottableLegendItem(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPPlottableLegendItem *xself = (x_QCPPlottableLegendItem*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPPlottableLegendItem::x_3(args);	break;
        case 4: x_QCPPlottableLegendItem::x_4(args);	break;
        case 5: x_QCPPlottableLegendItem::x_5(args);	break;
        case 6: x_QCPPlottableLegendItem::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPPlottableLegendItem::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: x_QCPPlottableLegendItem::x_15(args);	break;
        case 16: x_QCPPlottableLegendItem::x_16(args);	break;
        case 17: x_QCPPlottableLegendItem::x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: delete (QCPPlottableLegendItem*)xself;	break;
    }
}
class x_QCPRange : public QCPRange {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPRange* QCPRange()
        x_QCPRange* xret = new x_QCPRange();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPRange() : QCPRange() {}
    static void x_2(Smoke::Stack x) {
        // QCPRange* QCPRange(double, double)
        x_QCPRange* xret = new x_QCPRange((double)x[1].s_double,(double)x[2].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPRange(double x1, double x2) : QCPRange(x1, x2) {}
    void x_3(Smoke::Stack x) {
        // bool operator==(const QCPRange&) const
        bool xret = ((const x_QCPRange*)this)->QCPRange::operator==(*(const QCPRange*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
        // bool operator!=(const QCPRange&) const
        bool xret = ((const x_QCPRange*)this)->QCPRange::operator!=(*(const QCPRange*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
        // QCPRange& operator+=(const double&)
        QCPRange& xret = this->QCPRange::operator+=(*(const double*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_6(Smoke::Stack x) {
        // QCPRange& operator-=(const double&)
        QCPRange& xret = this->QCPRange::operator-=(*(const double*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_7(Smoke::Stack x) {
        // QCPRange& operator*=(const double&)
        QCPRange& xret = this->QCPRange::operator*=(*(const double*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_8(Smoke::Stack x) {
        // QCPRange& operator/=(const double&)
        QCPRange& xret = this->QCPRange::operator/=(*(const double*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_9(Smoke::Stack x) {
        // double size() const
        double xret = ((const x_QCPRange*)this)->QCPRange::size();
        x[0].s_double = xret;
    }
    void x_10(Smoke::Stack x) {
        // double center() const
        double xret = ((const x_QCPRange*)this)->QCPRange::center();
        x[0].s_double = xret;
    }
    void x_11(Smoke::Stack x) {
        // void normalize()
        this->QCPRange::normalize();
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void expand(const QCPRange&)
        this->QCPRange::expand(*(const QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // QCPRange expanded(const QCPRange&) const
        QCPRange xret = ((const x_QCPRange*)this)->QCPRange::expanded(*(const QCPRange*)x[1].s_class);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_14(Smoke::Stack x) {
        // QCPRange sanitizedForLogScale() const
        QCPRange xret = ((const x_QCPRange*)this)->QCPRange::sanitizedForLogScale();
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_15(Smoke::Stack x) {
        // QCPRange sanitizedForLinScale() const
        QCPRange xret = ((const x_QCPRange*)this)->QCPRange::sanitizedForLinScale();
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_16(Smoke::Stack x) {
        // bool contains(double) const
        bool xret = ((const x_QCPRange*)this)->QCPRange::contains((double)x[1].s_double);
        x[0].s_bool = xret;
    }
    static void x_17(Smoke::Stack x) {
        // static bool validRange(double, double)
        bool xret = QCPRange::validRange((double)x[1].s_double,(double)x[2].s_double);
        x[0].s_bool = xret;
    }
    static void x_18(Smoke::Stack x) {
        // static bool validRange(const QCPRange&)
        bool xret = QCPRange::validRange(*(const QCPRange*)x[1].s_class);
        x[0].s_bool = xret;
    }
    static void x_19(Smoke::Stack x) {
        // QCPRange* QCPRange(const QCPRange&)
        x_QCPRange* xret = new x_QCPRange(*(const QCPRange*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPRange(const QCPRange& x1) : QCPRange(x1) {}
    void x_20(Smoke::Stack x) {
        // double lower
        x[0].s_double = this->QCPRange::lower;
    }
    void x_21(Smoke::Stack x) {
        // double lower=
        this->QCPRange::lower = (double)x[1].s_double;
    }
    void x_22(Smoke::Stack x) {
        // double upper
        x[0].s_double = this->QCPRange::upper;
    }
    void x_23(Smoke::Stack x) {
        // double upper=
        this->QCPRange::upper = (double)x[1].s_double;
    }
    static void x_24(Smoke::Stack x) {
        // static const double minRange
        x[0].s_double = QCPRange::minRange;
    }
    static void x_25(Smoke::Stack x) {
        // static const double maxRange
        x[0].s_double = QCPRange::maxRange;
    }
    ~x_QCPRange() { this->_binding->deleted(48, (void*)this); }
};
void xcall_QCPRange(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPRange *xself = (x_QCPRange*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPRange::x_1(args);	break;
        case 2: x_QCPRange::x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: x_QCPRange::x_17(args);	break;
        case 18: x_QCPRange::x_18(args);	break;
        case 19: x_QCPRange::x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: x_QCPRange::x_24(args);	break;
        case 25: x_QCPRange::x_25(args);	break;
        case 26: delete (QCPRange*)xself;	break;
    }
}
class x_QCPScatterStyle : public QCPScatterStyle {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle()
        x_QCPScatterStyle* xret = new x_QCPScatterStyle();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPScatterStyle() : QCPScatterStyle() {}
    static void x_2(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(QCPScatterStyle::ScatterShape, double)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle((QCPScatterStyle::ScatterShape)x[1].s_enum,(double)x[2].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPScatterStyle(QCPScatterStyle::ScatterShape x1, double x2) : QCPScatterStyle(x1, x2) {}
    static void x_3(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(QCPScatterStyle::ScatterShape, const QColor&, double)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle((QCPScatterStyle::ScatterShape)x[1].s_enum,*(const QColor*)x[2].s_class,(double)x[3].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPScatterStyle(QCPScatterStyle::ScatterShape x1, const QColor& x2, double x3) : QCPScatterStyle(x1, x2, x3) {}
    static void x_4(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(QCPScatterStyle::ScatterShape, const QColor&, const QColor&, double)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle((QCPScatterStyle::ScatterShape)x[1].s_enum,*(const QColor*)x[2].s_class,*(const QColor*)x[3].s_class,(double)x[4].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPScatterStyle(QCPScatterStyle::ScatterShape x1, const QColor& x2, const QColor& x3, double x4) : QCPScatterStyle(x1, x2, x3, x4) {}
    static void x_5(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(QCPScatterStyle::ScatterShape, const QPen&, const QBrush&, double)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle((QCPScatterStyle::ScatterShape)x[1].s_enum,*(const QPen*)x[2].s_class,*(const QBrush*)x[3].s_class,(double)x[4].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPScatterStyle(QCPScatterStyle::ScatterShape x1, const QPen& x2, const QBrush& x3, double x4) : QCPScatterStyle(x1, x2, x3, x4) {}
    static void x_6(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(const QPixmap&)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle(*(const QPixmap*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPScatterStyle(const QPixmap& x1) : QCPScatterStyle(x1) {}
    static void x_7(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(const QPainterPath&, const QPen&, const QBrush&, double)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle(*(const QPainterPath*)x[1].s_class,*(const QPen*)x[2].s_class,*(const QBrush*)x[3].s_class,(double)x[4].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPScatterStyle(const QPainterPath& x1, const QPen& x2, const QBrush& x3, double x4) : QCPScatterStyle(x1, x2, x3, x4) {}
    void x_8(Smoke::Stack x) {
        // double size() const
        double xret = ((const x_QCPScatterStyle*)this)->QCPScatterStyle::size();
        x[0].s_double = xret;
    }
    void x_9(Smoke::Stack x) {
        // QCPScatterStyle::ScatterShape shape() const
        QCPScatterStyle::ScatterShape xret = ((const x_QCPScatterStyle*)this)->QCPScatterStyle::shape();
        x[0].s_enum = xret;
    }
    void x_10(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPScatterStyle*)this)->QCPScatterStyle::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_11(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QCPScatterStyle*)this)->QCPScatterStyle::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_12(Smoke::Stack x) {
        // QPixmap pixmap() const
        QPixmap xret = ((const x_QCPScatterStyle*)this)->QCPScatterStyle::pixmap();
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_13(Smoke::Stack x) {
        // QPainterPath customPath() const
        QPainterPath xret = ((const x_QCPScatterStyle*)this)->QCPScatterStyle::customPath();
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_14(Smoke::Stack x) {
        // void setSize(double)
        this->QCPScatterStyle::setSize((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setShape(QCPScatterStyle::ScatterShape)
        this->QCPScatterStyle::setShape((QCPScatterStyle::ScatterShape)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPScatterStyle::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QCPScatterStyle::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setPixmap(const QPixmap&)
        this->QCPScatterStyle::setPixmap(*(const QPixmap*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setCustomPath(const QPainterPath&)
        this->QCPScatterStyle::setCustomPath(*(const QPainterPath*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // bool isNone() const
        bool xret = ((const x_QCPScatterStyle*)this)->QCPScatterStyle::isNone();
        x[0].s_bool = xret;
    }
    void x_21(Smoke::Stack x) {
        // bool isPenDefined() const
        bool xret = ((const x_QCPScatterStyle*)this)->QCPScatterStyle::isPenDefined();
        x[0].s_bool = xret;
    }
    void x_22(Smoke::Stack x) {
        // void applyTo(QCPPainter*, const QPen&) const
        ((const x_QCPScatterStyle*)this)->QCPScatterStyle::applyTo((QCPPainter*)x[1].s_class,*(const QPen*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void drawShape(QCPPainter*, QPointF) const
        ((const x_QCPScatterStyle*)this)->QCPScatterStyle::drawShape((QCPPainter*)x[1].s_class,*(QPointF*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void drawShape(QCPPainter*, double, double) const
        ((const x_QCPScatterStyle*)this)->QCPScatterStyle::drawShape((QCPPainter*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    static void x_25(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(const QCPScatterStyle&)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle(*(const QCPScatterStyle*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPScatterStyle(const QCPScatterStyle& x1) : QCPScatterStyle(x1) {}
    static void x_26(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(QCPScatterStyle::ScatterShape)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle((QCPScatterStyle::ScatterShape)x[1].s_enum,(double)6);
        x[0].s_class = (void*)xret;
    }
    static void x_27(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(const QPainterPath&, const QPen&)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle(*(const QPainterPath*)x[1].s_class,*(const QPen*)x[2].s_class,(const QBrush&)Qt::NoBrush,(double)6);
        x[0].s_class = (void*)xret;
    }
    static void x_28(Smoke::Stack x) {
        // QCPScatterStyle* QCPScatterStyle(const QPainterPath&, const QPen&, const QBrush&)
        x_QCPScatterStyle* xret = new x_QCPScatterStyle(*(const QPainterPath*)x[1].s_class,*(const QPen*)x[2].s_class,*(const QBrush*)x[3].s_class,(double)6);
        x[0].s_class = (void*)xret;
    }
    static void x_29(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPScatterStyle::staticMetaObject;
    }
    void x_30(Smoke::Stack x) {
        // double mSize
        x[0].s_double = this->QCPScatterStyle::mSize;
    }
    void x_31(Smoke::Stack x) {
        // double mSize=
        this->QCPScatterStyle::mSize = (double)x[1].s_double;
    }
    void x_32(Smoke::Stack x) {
        // QCPScatterStyle::ScatterShape mShape
        x[0].s_enum = this->QCPScatterStyle::mShape;
    }
    void x_33(Smoke::Stack x) {
        // QCPScatterStyle::ScatterShape mShape=
        this->QCPScatterStyle::mShape = (QCPScatterStyle::ScatterShape)x[1].s_enum;
    }
    void x_34(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPScatterStyle::mPen;
    }
    void x_35(Smoke::Stack x) {
        // QPen mPen=
        this->QCPScatterStyle::mPen = *(const QPen*)x[1].s_class;
    }
    void x_36(Smoke::Stack x) {
        // QBrush mBrush
        x[0].s_class = (void*)&this->QCPScatterStyle::mBrush;
    }
    void x_37(Smoke::Stack x) {
        // QBrush mBrush=
        this->QCPScatterStyle::mBrush = *(const QBrush*)x[1].s_class;
    }
    void x_38(Smoke::Stack x) {
        // QPixmap mPixmap
        x[0].s_class = (void*)&this->QCPScatterStyle::mPixmap;
    }
    void x_39(Smoke::Stack x) {
        // QPixmap mPixmap=
        this->QCPScatterStyle::mPixmap = *(const QPixmap*)x[1].s_class;
    }
    void x_40(Smoke::Stack x) {
        // QPainterPath mCustomPath
        x[0].s_class = (void*)&this->QCPScatterStyle::mCustomPath;
    }
    void x_41(Smoke::Stack x) {
        // QPainterPath mCustomPath=
        this->QCPScatterStyle::mCustomPath = *(const QPainterPath*)x[1].s_class;
    }
    void x_42(Smoke::Stack x) {
        // bool mPenDefined
        x[0].s_bool = this->QCPScatterStyle::mPenDefined;
    }
    void x_43(Smoke::Stack x) {
        // bool mPenDefined=
        this->QCPScatterStyle::mPenDefined = (bool)x[1].s_bool;
    }
    static void x_44(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssNone;
    }
    static void x_45(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssDot;
    }
    static void x_46(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssCross;
    }
    static void x_47(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssPlus;
    }
    static void x_48(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssCircle;
    }
    static void x_49(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssDisc;
    }
    static void x_50(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssSquare;
    }
    static void x_51(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssDiamond;
    }
    static void x_52(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssStar;
    }
    static void x_53(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssTriangle;
    }
    static void x_54(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssTriangleInverted;
    }
    static void x_55(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssCrossSquare;
    }
    static void x_56(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssPlusSquare;
    }
    static void x_57(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssCrossCircle;
    }
    static void x_58(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssPlusCircle;
    }
    static void x_59(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssPeace;
    }
    static void x_60(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssPixmap;
    }
    static void x_61(Smoke::Stack x) {
        x[0].s_enum = (long)QCPScatterStyle::ssCustom;
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 107: //QCPScatterStyle::ScatterShape
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPScatterStyle::ScatterShape;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPScatterStyle::ScatterShape*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPScatterStyle::ScatterShape*)xdata = (QCPScatterStyle::ScatterShape)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPScatterStyle::ScatterShape*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPScatterStyle() { this->_binding->deleted(49, (void*)this); }
};
void xenum_QCPScatterStyle(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPScatterStyle::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPScatterStyle(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPScatterStyle *xself = (x_QCPScatterStyle*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPScatterStyle::x_1(args);	break;
        case 2: x_QCPScatterStyle::x_2(args);	break;
        case 3: x_QCPScatterStyle::x_3(args);	break;
        case 4: x_QCPScatterStyle::x_4(args);	break;
        case 5: x_QCPScatterStyle::x_5(args);	break;
        case 6: x_QCPScatterStyle::x_6(args);	break;
        case 7: x_QCPScatterStyle::x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: x_QCPScatterStyle::x_25(args);	break;
        case 26: x_QCPScatterStyle::x_26(args);	break;
        case 27: x_QCPScatterStyle::x_27(args);	break;
        case 28: x_QCPScatterStyle::x_28(args);	break;
        case 29: x_QCPScatterStyle::x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: x_QCPScatterStyle::x_44(args);	break;
        case 45: x_QCPScatterStyle::x_45(args);	break;
        case 46: x_QCPScatterStyle::x_46(args);	break;
        case 47: x_QCPScatterStyle::x_47(args);	break;
        case 48: x_QCPScatterStyle::x_48(args);	break;
        case 49: x_QCPScatterStyle::x_49(args);	break;
        case 50: x_QCPScatterStyle::x_50(args);	break;
        case 51: x_QCPScatterStyle::x_51(args);	break;
        case 52: x_QCPScatterStyle::x_52(args);	break;
        case 53: x_QCPScatterStyle::x_53(args);	break;
        case 54: x_QCPScatterStyle::x_54(args);	break;
        case 55: x_QCPScatterStyle::x_55(args);	break;
        case 56: x_QCPScatterStyle::x_56(args);	break;
        case 57: x_QCPScatterStyle::x_57(args);	break;
        case 58: x_QCPScatterStyle::x_58(args);	break;
        case 59: x_QCPScatterStyle::x_59(args);	break;
        case 60: x_QCPScatterStyle::x_60(args);	break;
        case 61: x_QCPScatterStyle::x_61(args);	break;
        case 62: delete (QCPScatterStyle*)xself;	break;
    }
}
class x_QCPStatisticalBox : public QCPStatisticalBox, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            const QMetaObject* xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPStatisticalBox*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            void* xret = this->QCPStatisticalBox::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPStatisticalBox::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPStatisticalBox::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPStatisticalBox::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPStatisticalBox::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            int xret = this->QCPStatisticalBox::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPStatisticalBox* QCPStatisticalBox(QCPAxis*, QCPAxis*)
        x_QCPStatisticalBox* xret = new x_QCPStatisticalBox((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPStatisticalBox(QCPAxis* x1, QCPAxis* x2) : QCPStatisticalBox(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // double key() const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::key();
        x[0].s_double = xret;
    }
    void x_10(Smoke::Stack x) {
        // double minimum() const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::minimum();
        x[0].s_double = xret;
    }
    void x_11(Smoke::Stack x) {
        // double lowerQuartile() const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::lowerQuartile();
        x[0].s_double = xret;
    }
    void x_12(Smoke::Stack x) {
        // double median() const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::median();
        x[0].s_double = xret;
    }
    void x_13(Smoke::Stack x) {
        // double upperQuartile() const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::upperQuartile();
        x[0].s_double = xret;
    }
    void x_14(Smoke::Stack x) {
        // double maximum() const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::maximum();
        x[0].s_double = xret;
    }
    void x_15(Smoke::Stack x) {
        // QVector<double> outliers() const
        QVector<double> xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::outliers();
        x[0].s_class = (void*)new QVector<double>(xret);
    }
    void x_16(Smoke::Stack x) {
        // double width() const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::width();
        x[0].s_double = xret;
    }
    void x_17(Smoke::Stack x) {
        // double whiskerWidth() const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::whiskerWidth();
        x[0].s_double = xret;
    }
    void x_18(Smoke::Stack x) {
        // QPen whiskerPen() const
        QPen xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::whiskerPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_19(Smoke::Stack x) {
        // QPen whiskerBarPen() const
        QPen xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::whiskerBarPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_20(Smoke::Stack x) {
        // QPen medianPen() const
        QPen xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::medianPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_21(Smoke::Stack x) {
        // QCPScatterStyle outlierStyle() const
        QCPScatterStyle xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::outlierStyle();
        x[0].s_class = (void*)new QCPScatterStyle(xret);
    }
    void x_22(Smoke::Stack x) {
        // void setKey(double)
        this->QCPStatisticalBox::setKey((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setMinimum(double)
        this->QCPStatisticalBox::setMinimum((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setLowerQuartile(double)
        this->QCPStatisticalBox::setLowerQuartile((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setMedian(double)
        this->QCPStatisticalBox::setMedian((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setUpperQuartile(double)
        this->QCPStatisticalBox::setUpperQuartile((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setMaximum(double)
        this->QCPStatisticalBox::setMaximum((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void setOutliers(const QVector<double>&)
        this->QCPStatisticalBox::setOutliers(*(const QVector<double>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void setData(double, double, double, double, double, double)
        this->QCPStatisticalBox::setData((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void setWidth(double)
        this->QCPStatisticalBox::setWidth((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void setWhiskerWidth(double)
        this->QCPStatisticalBox::setWhiskerWidth((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void setWhiskerPen(const QPen&)
        this->QCPStatisticalBox::setWhiskerPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // void setWhiskerBarPen(const QPen&)
        this->QCPStatisticalBox::setWhiskerBarPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // void setMedianPen(const QPen&)
        this->QCPStatisticalBox::setMedianPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
        // void setOutlierStyle(const QCPScatterStyle&)
        this->QCPStatisticalBox::setOutlierStyle(*(const QCPScatterStyle*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
        // virtual void clearData()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            this->QCPStatisticalBox::clearData();
            (void)x; // noop (for compiler warning)
        } else {
            this->clearData();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_37(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPStatisticalBox*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_38(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            this->QCPStatisticalBox::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_39(Smoke::Stack x) {
        // virtual void drawLegendIcon(QCPPainter*, const QRectF&) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPStatisticalBox*)this)->drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_40(Smoke::Stack x) {
        // virtual QCPRange getKeyRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            QCPRange xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPStatisticalBox*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_41(Smoke::Stack x) {
        // virtual QCPRange getValueRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            QCPRange xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPStatisticalBox*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_42(Smoke::Stack x) {
        // virtual void drawQuartileBox(QCPPainter*, QRectF*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::drawQuartileBox((QCPPainter*)x[1].s_class,(QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPStatisticalBox*)this)->drawQuartileBox((QCPPainter*)x[1].s_class,(QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_43(Smoke::Stack x) {
        // virtual void drawMedian(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::drawMedian((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPStatisticalBox*)this)->drawMedian((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_44(Smoke::Stack x) {
        // virtual void drawWhiskers(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::drawWhiskers((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPStatisticalBox*)this)->drawWhiskers((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_45(Smoke::Stack x) {
        // virtual void drawOutliers(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPStatisticalBox*>(this))) {
            ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::drawOutliers((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPStatisticalBox*)this)->drawOutliers((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    static void x_46(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPStatisticalBox::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_47(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPStatisticalBox::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_48(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    void x_49(Smoke::Stack x) {
        // QCPRange getKeyRange(bool&) const
        QCPRange xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_50(Smoke::Stack x) {
        // QCPRange getValueRange(bool&) const
        QCPRange xret = ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_51(Smoke::Stack x) {
        // void drawQuartileBox(QCPPainter*) const
        ((const x_QCPStatisticalBox*)this)->QCPStatisticalBox::drawQuartileBox((QCPPainter*)x[1].s_class,(QRectF*)0);
        (void)x; // noop (for compiler warning)
    }
    static void x_52(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPStatisticalBox::staticMetaObject;
    }
    void x_53(Smoke::Stack x) {
        // QVector<double> mOutliers
        x[0].s_class = (void*)&this->QCPStatisticalBox::mOutliers;
    }
    void x_54(Smoke::Stack x) {
        // QVector<double> mOutliers=
        this->QCPStatisticalBox::mOutliers = *(const QVector<double>*)x[1].s_class;
    }
    void x_55(Smoke::Stack x) {
        // double mKey
        x[0].s_double = this->QCPStatisticalBox::mKey;
    }
    void x_56(Smoke::Stack x) {
        // double mKey=
        this->QCPStatisticalBox::mKey = (double)x[1].s_double;
    }
    void x_57(Smoke::Stack x) {
        // double mMinimum
        x[0].s_double = this->QCPStatisticalBox::mMinimum;
    }
    void x_58(Smoke::Stack x) {
        // double mMinimum=
        this->QCPStatisticalBox::mMinimum = (double)x[1].s_double;
    }
    void x_59(Smoke::Stack x) {
        // double mLowerQuartile
        x[0].s_double = this->QCPStatisticalBox::mLowerQuartile;
    }
    void x_60(Smoke::Stack x) {
        // double mLowerQuartile=
        this->QCPStatisticalBox::mLowerQuartile = (double)x[1].s_double;
    }
    void x_61(Smoke::Stack x) {
        // double mMedian
        x[0].s_double = this->QCPStatisticalBox::mMedian;
    }
    void x_62(Smoke::Stack x) {
        // double mMedian=
        this->QCPStatisticalBox::mMedian = (double)x[1].s_double;
    }
    void x_63(Smoke::Stack x) {
        // double mUpperQuartile
        x[0].s_double = this->QCPStatisticalBox::mUpperQuartile;
    }
    void x_64(Smoke::Stack x) {
        // double mUpperQuartile=
        this->QCPStatisticalBox::mUpperQuartile = (double)x[1].s_double;
    }
    void x_65(Smoke::Stack x) {
        // double mMaximum
        x[0].s_double = this->QCPStatisticalBox::mMaximum;
    }
    void x_66(Smoke::Stack x) {
        // double mMaximum=
        this->QCPStatisticalBox::mMaximum = (double)x[1].s_double;
    }
    void x_67(Smoke::Stack x) {
        // double mWidth
        x[0].s_double = this->QCPStatisticalBox::mWidth;
    }
    void x_68(Smoke::Stack x) {
        // double mWidth=
        this->QCPStatisticalBox::mWidth = (double)x[1].s_double;
    }
    void x_69(Smoke::Stack x) {
        // double mWhiskerWidth
        x[0].s_double = this->QCPStatisticalBox::mWhiskerWidth;
    }
    void x_70(Smoke::Stack x) {
        // double mWhiskerWidth=
        this->QCPStatisticalBox::mWhiskerWidth = (double)x[1].s_double;
    }
    void x_71(Smoke::Stack x) {
        // QPen mWhiskerPen
        x[0].s_class = (void*)&this->QCPStatisticalBox::mWhiskerPen;
    }
    void x_72(Smoke::Stack x) {
        // QPen mWhiskerPen=
        this->QCPStatisticalBox::mWhiskerPen = *(const QPen*)x[1].s_class;
    }
    void x_73(Smoke::Stack x) {
        // QPen mWhiskerBarPen
        x[0].s_class = (void*)&this->QCPStatisticalBox::mWhiskerBarPen;
    }
    void x_74(Smoke::Stack x) {
        // QPen mWhiskerBarPen=
        this->QCPStatisticalBox::mWhiskerBarPen = *(const QPen*)x[1].s_class;
    }
    void x_75(Smoke::Stack x) {
        // QPen mMedianPen
        x[0].s_class = (void*)&this->QCPStatisticalBox::mMedianPen;
    }
    void x_76(Smoke::Stack x) {
        // QPen mMedianPen=
        this->QCPStatisticalBox::mMedianPen = *(const QPen*)x[1].s_class;
    }
    void x_77(Smoke::Stack x) {
        // QCPScatterStyle mOutlierStyle
        x[0].s_class = (void*)&this->QCPStatisticalBox::mOutlierStyle;
    }
    void x_78(Smoke::Stack x) {
        // QCPScatterStyle mOutlierStyle=
        this->QCPStatisticalBox::mOutlierStyle = *(const QCPScatterStyle*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2334, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPStatisticalBox::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2335, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPStatisticalBox::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(2340, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPStatisticalBox::qt_metacall(x1, x2, x3);
    }
    virtual void clearData() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2369, (void*)this, x)) return;
        this->QCPStatisticalBox::clearData();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(2370, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPStatisticalBox::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2371, (void*)this, x)) return;
        this->QCPStatisticalBox::draw(x1);
    }
    virtual void drawLegendIcon(QCPPainter* x1, const QRectF& x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        if (this->_binding->callMethod(2372, (void*)this, x)) return;
        this->QCPStatisticalBox::drawLegendIcon(x1, x2);
    }
    virtual QCPRange getKeyRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(2373, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPStatisticalBox::getKeyRange(x1, x2);
    }
    virtual QCPRange getValueRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(2374, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPStatisticalBox::getValueRange(x1, x2);
    }
    virtual void drawQuartileBox(QCPPainter* x1, QRectF* x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2375, (void*)this, x)) return;
        this->QCPStatisticalBox::drawQuartileBox(x1, x2);
    }
    virtual void drawMedian(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2376, (void*)this, x)) return;
        this->QCPStatisticalBox::drawMedian(x1);
    }
    virtual void drawWhiskers(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2377, (void*)this, x)) return;
        this->QCPStatisticalBox::drawWhiskers(x1);
    }
    virtual void drawOutliers(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2378, (void*)this, x)) return;
        this->QCPStatisticalBox::drawOutliers(x1);
    }
    virtual bool addToLegend() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(136, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::addToLegend();
    }
    virtual bool removeFromLegend() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(137, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::removeFromLegend();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(143, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractPlottable::clipRect();
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(145, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractPlottable::selectionCategory();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(147, (void*)this, x)) return;
        this->QCPAbstractPlottable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(148, (void*)this, x)) return;
        this->QCPAbstractPlottable::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(146, (void*)this, x)) return;
        this->QCPAbstractPlottable::applyDefaultAntialiasingHint(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPStatisticalBox() { this->_binding->deleted(50, (void*)this); }
};
void xcall_QCPStatisticalBox(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPStatisticalBox *xself = (x_QCPStatisticalBox*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPStatisticalBox::x_3(args);	break;
        case 4: x_QCPStatisticalBox::x_4(args);	break;
        case 5: x_QCPStatisticalBox::x_5(args);	break;
        case 6: x_QCPStatisticalBox::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPStatisticalBox::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: x_QCPStatisticalBox::x_46(args);	break;
        case 47: x_QCPStatisticalBox::x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: x_QCPStatisticalBox::x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: delete (QCPStatisticalBox*)xself;	break;
    }
}
class x_QCustomPlot : public QCustomPlot, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            const QMetaObject* xret = ((const x_QCustomPlot*)this)->QCustomPlot::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCustomPlot*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            void* xret = this->QCustomPlot::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCustomPlot::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCustomPlot::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCustomPlot::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCustomPlot::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            int xret = this->QCustomPlot::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCustomPlot* QCustomPlot(QWidget*)
        x_QCustomPlot* xret = new x_QCustomPlot((QWidget*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCustomPlot(QWidget* x1) : QCustomPlot(x1) {}
    void x_9(Smoke::Stack x) {
        // QRect viewport() const
        QRect xret = ((const x_QCustomPlot*)this)->QCustomPlot::viewport();
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_10(Smoke::Stack x) {
        // QPixmap background() const
        QPixmap xret = ((const x_QCustomPlot*)this)->QCustomPlot::background();
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_11(Smoke::Stack x) {
        // bool backgroundScaled() const
        bool xret = ((const x_QCustomPlot*)this)->QCustomPlot::backgroundScaled();
        x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
        // Qt::AspectRatioMode backgroundScaledMode() const
        Qt::AspectRatioMode xret = ((const x_QCustomPlot*)this)->QCustomPlot::backgroundScaledMode();
        x[0].s_enum = xret;
    }
    void x_13(Smoke::Stack x) {
        // QCPLayoutGrid* plotLayout() const
        QCPLayoutGrid* xret = ((const x_QCustomPlot*)this)->QCustomPlot::plotLayout();
        x[0].s_class = (void*)xret;
    }
    void x_14(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> antialiasedElements() const
        QFlags<QCP::AntialiasedElement> xret = ((const x_QCustomPlot*)this)->QCustomPlot::antialiasedElements();
        x[0].s_uint = (uint)xret;
    }
    void x_15(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> notAntialiasedElements() const
        QFlags<QCP::AntialiasedElement> xret = ((const x_QCustomPlot*)this)->QCustomPlot::notAntialiasedElements();
        x[0].s_uint = (uint)xret;
    }
    void x_16(Smoke::Stack x) {
        // bool autoAddPlottableToLegend() const
        bool xret = ((const x_QCustomPlot*)this)->QCustomPlot::autoAddPlottableToLegend();
        x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
        // const QFlags<QCP::Interaction> interactions() const
        const QFlags<QCP::Interaction> xret = ((const x_QCustomPlot*)this)->QCustomPlot::interactions();
        x[0].s_uint = (uint)xret;
    }
    void x_18(Smoke::Stack x) {
        // int selectionTolerance() const
        int xret = ((const x_QCustomPlot*)this)->QCustomPlot::selectionTolerance();
        x[0].s_int = xret;
    }
    void x_19(Smoke::Stack x) {
        // bool noAntialiasingOnDrag() const
        bool xret = ((const x_QCustomPlot*)this)->QCustomPlot::noAntialiasingOnDrag();
        x[0].s_bool = xret;
    }
    void x_20(Smoke::Stack x) {
        // QFlags<QCP::PlottingHint> plottingHints() const
        QFlags<QCP::PlottingHint> xret = ((const x_QCustomPlot*)this)->QCustomPlot::plottingHints();
        x[0].s_uint = (uint)xret;
    }
    void x_21(Smoke::Stack x) {
        // Qt::KeyboardModifier multiSelectModifier() const
        Qt::KeyboardModifier xret = ((const x_QCustomPlot*)this)->QCustomPlot::multiSelectModifier();
        x[0].s_enum = xret;
    }
    void x_22(Smoke::Stack x) {
        // void setViewport(const QRect&)
        this->QCustomPlot::setViewport(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setBackground(const QPixmap&)
        this->QCustomPlot::setBackground(*(const QPixmap*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setBackground(const QPixmap&, bool, Qt::AspectRatioMode)
        this->QCustomPlot::setBackground(*(const QPixmap*)x[1].s_class,(bool)x[2].s_bool,(Qt::AspectRatioMode)x[3].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setBackground(const QBrush&)
        this->QCustomPlot::setBackground(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setBackgroundScaled(bool)
        this->QCustomPlot::setBackgroundScaled((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setBackgroundScaledMode(Qt::AspectRatioMode)
        this->QCustomPlot::setBackgroundScaledMode((Qt::AspectRatioMode)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void setAntialiasedElements(const QFlags<QCP::AntialiasedElement>&)
        this->QCustomPlot::setAntialiasedElements(*(const QFlags<QCP::AntialiasedElement>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void setAntialiasedElement(QCP::AntialiasedElement, bool)
        this->QCustomPlot::setAntialiasedElement((QCP::AntialiasedElement)x[1].s_enum,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void setNotAntialiasedElements(const QFlags<QCP::AntialiasedElement>&)
        this->QCustomPlot::setNotAntialiasedElements(*(const QFlags<QCP::AntialiasedElement>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void setNotAntialiasedElement(QCP::AntialiasedElement, bool)
        this->QCustomPlot::setNotAntialiasedElement((QCP::AntialiasedElement)x[1].s_enum,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void setAutoAddPlottableToLegend(bool)
        this->QCustomPlot::setAutoAddPlottableToLegend((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // void setInteractions(const QFlags<QCP::Interaction>&)
        this->QCustomPlot::setInteractions(*(const QFlags<QCP::Interaction>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // void setInteraction(const QCP::Interaction&, bool)
        this->QCustomPlot::setInteraction(*(const QCP::Interaction*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
        // void setSelectionTolerance(int)
        this->QCustomPlot::setSelectionTolerance((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
        // void setNoAntialiasingOnDrag(bool)
        this->QCustomPlot::setNoAntialiasingOnDrag((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
        // void setPlottingHints(const QFlags<QCP::PlottingHint>&)
        this->QCustomPlot::setPlottingHints(*(const QFlags<QCP::PlottingHint>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_38(Smoke::Stack x) {
        // void setPlottingHint(QCP::PlottingHint, bool)
        this->QCustomPlot::setPlottingHint((QCP::PlottingHint)x[1].s_enum,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_39(Smoke::Stack x) {
        // void setMultiSelectModifier(Qt::KeyboardModifier)
        this->QCustomPlot::setMultiSelectModifier((Qt::KeyboardModifier)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_40(Smoke::Stack x) {
        // QCPAbstractPlottable* plottable(int)
        QCPAbstractPlottable* xret = this->QCustomPlot::plottable((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_41(Smoke::Stack x) {
        // QCPAbstractPlottable* plottable()
        QCPAbstractPlottable* xret = this->QCustomPlot::plottable();
        x[0].s_class = (void*)xret;
    }
    void x_42(Smoke::Stack x) {
        // bool addPlottable(QCPAbstractPlottable*)
        bool xret = this->QCustomPlot::addPlottable((QCPAbstractPlottable*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_43(Smoke::Stack x) {
        // bool removePlottable(QCPAbstractPlottable*)
        bool xret = this->QCustomPlot::removePlottable((QCPAbstractPlottable*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_44(Smoke::Stack x) {
        // bool removePlottable(int)
        bool xret = this->QCustomPlot::removePlottable((int)x[1].s_int);
        x[0].s_bool = xret;
    }
    void x_45(Smoke::Stack x) {
        // int clearPlottables()
        int xret = this->QCustomPlot::clearPlottables();
        x[0].s_int = xret;
    }
    void x_46(Smoke::Stack x) {
        // int plottableCount() const
        int xret = ((const x_QCustomPlot*)this)->QCustomPlot::plottableCount();
        x[0].s_int = xret;
    }
    void x_47(Smoke::Stack x) {
        // QList<QCPAbstractPlottable*> selectedPlottables() const
        QList<QCPAbstractPlottable*> xret = ((const x_QCustomPlot*)this)->QCustomPlot::selectedPlottables();
        x[0].s_class = (void*)new QList<QCPAbstractPlottable*>(xret);
    }
    void x_48(Smoke::Stack x) {
        // QCPAbstractPlottable* plottableAt(const QPointF&, bool) const
        QCPAbstractPlottable* xret = ((const x_QCustomPlot*)this)->QCustomPlot::plottableAt(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool);
        x[0].s_class = (void*)xret;
    }
    void x_49(Smoke::Stack x) {
        // bool hasPlottable(QCPAbstractPlottable*) const
        bool xret = ((const x_QCustomPlot*)this)->QCustomPlot::hasPlottable((QCPAbstractPlottable*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_50(Smoke::Stack x) {
        // QCPGraph* graph(int) const
        QCPGraph* xret = ((const x_QCustomPlot*)this)->QCustomPlot::graph((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_51(Smoke::Stack x) {
        // QCPGraph* graph() const
        QCPGraph* xret = ((const x_QCustomPlot*)this)->QCustomPlot::graph();
        x[0].s_class = (void*)xret;
    }
    void x_52(Smoke::Stack x) {
        // QCPGraph* addGraph(QCPAxis*, QCPAxis*)
        QCPGraph* xret = this->QCustomPlot::addGraph((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_53(Smoke::Stack x) {
        // bool removeGraph(QCPGraph*)
        bool xret = this->QCustomPlot::removeGraph((QCPGraph*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_54(Smoke::Stack x) {
        // bool removeGraph(int)
        bool xret = this->QCustomPlot::removeGraph((int)x[1].s_int);
        x[0].s_bool = xret;
    }
    void x_55(Smoke::Stack x) {
        // int clearGraphs()
        int xret = this->QCustomPlot::clearGraphs();
        x[0].s_int = xret;
    }
    void x_56(Smoke::Stack x) {
        // int graphCount() const
        int xret = ((const x_QCustomPlot*)this)->QCustomPlot::graphCount();
        x[0].s_int = xret;
    }
    void x_57(Smoke::Stack x) {
        // QList<QCPGraph*> selectedGraphs() const
        QList<QCPGraph*> xret = ((const x_QCustomPlot*)this)->QCustomPlot::selectedGraphs();
        x[0].s_class = (void*)new QList<QCPGraph*>(xret);
    }
    void x_58(Smoke::Stack x) {
        // QCPAbstractItem* item(int) const
        QCPAbstractItem* xret = ((const x_QCustomPlot*)this)->QCustomPlot::item((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_59(Smoke::Stack x) {
        // QCPAbstractItem* item() const
        QCPAbstractItem* xret = ((const x_QCustomPlot*)this)->QCustomPlot::item();
        x[0].s_class = (void*)xret;
    }
    void x_60(Smoke::Stack x) {
        // bool addItem(QCPAbstractItem*)
        bool xret = this->QCustomPlot::addItem((QCPAbstractItem*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_61(Smoke::Stack x) {
        // bool removeItem(QCPAbstractItem*)
        bool xret = this->QCustomPlot::removeItem((QCPAbstractItem*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_62(Smoke::Stack x) {
        // bool removeItem(int)
        bool xret = this->QCustomPlot::removeItem((int)x[1].s_int);
        x[0].s_bool = xret;
    }
    void x_63(Smoke::Stack x) {
        // int clearItems()
        int xret = this->QCustomPlot::clearItems();
        x[0].s_int = xret;
    }
    void x_64(Smoke::Stack x) {
        // int itemCount() const
        int xret = ((const x_QCustomPlot*)this)->QCustomPlot::itemCount();
        x[0].s_int = xret;
    }
    void x_65(Smoke::Stack x) {
        // QList<QCPAbstractItem*> selectedItems() const
        QList<QCPAbstractItem*> xret = ((const x_QCustomPlot*)this)->QCustomPlot::selectedItems();
        x[0].s_class = (void*)new QList<QCPAbstractItem*>(xret);
    }
    void x_66(Smoke::Stack x) {
        // QCPAbstractItem* itemAt(const QPointF&, bool) const
        QCPAbstractItem* xret = ((const x_QCustomPlot*)this)->QCustomPlot::itemAt(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool);
        x[0].s_class = (void*)xret;
    }
    void x_67(Smoke::Stack x) {
        // bool hasItem(QCPAbstractItem*) const
        bool xret = ((const x_QCustomPlot*)this)->QCustomPlot::hasItem((QCPAbstractItem*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_68(Smoke::Stack x) {
        // QCPLayer* layer(const QString&) const
        QCPLayer* xret = ((const x_QCustomPlot*)this)->QCustomPlot::layer(*(const QString*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_69(Smoke::Stack x) {
        // QCPLayer* layer(int) const
        QCPLayer* xret = ((const x_QCustomPlot*)this)->QCustomPlot::layer((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_70(Smoke::Stack x) {
        // QCPLayer* currentLayer() const
        QCPLayer* xret = ((const x_QCustomPlot*)this)->QCustomPlot::currentLayer();
        x[0].s_class = (void*)xret;
    }
    void x_71(Smoke::Stack x) {
        // bool setCurrentLayer(const QString&)
        bool xret = this->QCustomPlot::setCurrentLayer(*(const QString*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_72(Smoke::Stack x) {
        // bool setCurrentLayer(QCPLayer*)
        bool xret = this->QCustomPlot::setCurrentLayer((QCPLayer*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_73(Smoke::Stack x) {
        // int layerCount() const
        int xret = ((const x_QCustomPlot*)this)->QCustomPlot::layerCount();
        x[0].s_int = xret;
    }
    void x_74(Smoke::Stack x) {
        // bool addLayer(const QString&, QCPLayer*, QCustomPlot::LayerInsertMode)
        bool xret = this->QCustomPlot::addLayer(*(const QString*)x[1].s_class,(QCPLayer*)x[2].s_class,(QCustomPlot::LayerInsertMode)x[3].s_enum);
        x[0].s_bool = xret;
    }
    void x_75(Smoke::Stack x) {
        // bool removeLayer(QCPLayer*)
        bool xret = this->QCustomPlot::removeLayer((QCPLayer*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_76(Smoke::Stack x) {
        // bool moveLayer(QCPLayer*, QCPLayer*, QCustomPlot::LayerInsertMode)
        bool xret = this->QCustomPlot::moveLayer((QCPLayer*)x[1].s_class,(QCPLayer*)x[2].s_class,(QCustomPlot::LayerInsertMode)x[3].s_enum);
        x[0].s_bool = xret;
    }
    void x_77(Smoke::Stack x) {
        // int axisRectCount() const
        int xret = ((const x_QCustomPlot*)this)->QCustomPlot::axisRectCount();
        x[0].s_int = xret;
    }
    void x_78(Smoke::Stack x) {
        // QCPAxisRect* axisRect(int) const
        QCPAxisRect* xret = ((const x_QCustomPlot*)this)->QCustomPlot::axisRect((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_79(Smoke::Stack x) {
        // QList<QCPAxisRect*> axisRects() const
        QList<QCPAxisRect*> xret = ((const x_QCustomPlot*)this)->QCustomPlot::axisRects();
        x[0].s_class = (void*)new QList<QCPAxisRect*>(xret);
    }
    void x_80(Smoke::Stack x) {
        // QCPLayoutElement* layoutElementAt(const QPointF&) const
        QCPLayoutElement* xret = ((const x_QCustomPlot*)this)->QCustomPlot::layoutElementAt(*(const QPointF*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_81(Smoke::Stack x) {
        // void rescaleAxes(bool)
        this->QCustomPlot::rescaleAxes((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_82(Smoke::Stack x) {
        // QList<QCPAxis*> selectedAxes() const
        QList<QCPAxis*> xret = ((const x_QCustomPlot*)this)->QCustomPlot::selectedAxes();
        x[0].s_class = (void*)new QList<QCPAxis*>(xret);
    }
    void x_83(Smoke::Stack x) {
        // QList<QCPLegend*> selectedLegends() const
        QList<QCPLegend*> xret = ((const x_QCustomPlot*)this)->QCustomPlot::selectedLegends();
        x[0].s_class = (void*)new QList<QCPLegend*>(xret);
    }
    void x_84(Smoke::Stack x) {
        // void deselectAll()
        this->QCustomPlot::deselectAll();
        (void)x; // noop (for compiler warning)
    }
    void x_85(Smoke::Stack x) {
        // bool savePdf(const QString&, bool, int, int, const QString&, const QString&)
        bool xret = this->QCustomPlot::savePdf(*(const QString*)x[1].s_class,(bool)x[2].s_bool,(int)x[3].s_int,(int)x[4].s_int,*(const QString*)x[5].s_class,*(const QString*)x[6].s_class);
        x[0].s_bool = xret;
    }
    void x_86(Smoke::Stack x) {
        // bool savePng(const QString&, int, int, double, int)
        bool xret = this->QCustomPlot::savePng(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)x[4].s_double,(int)x[5].s_int);
        x[0].s_bool = xret;
    }
    void x_87(Smoke::Stack x) {
        // bool saveJpg(const QString&, int, int, double, int)
        bool xret = this->QCustomPlot::saveJpg(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)x[4].s_double,(int)x[5].s_int);
        x[0].s_bool = xret;
    }
    void x_88(Smoke::Stack x) {
        // bool saveBmp(const QString&, int, int, double)
        bool xret = this->QCustomPlot::saveBmp(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)x[4].s_double);
        x[0].s_bool = xret;
    }
    void x_89(Smoke::Stack x) {
        // bool saveRastered(const QString&, int, int, double, const char*, int)
        bool xret = this->QCustomPlot::saveRastered(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)x[4].s_double,(const char*)x[5].s_class,(int)x[6].s_int);
        x[0].s_bool = xret;
    }
    void x_90(Smoke::Stack x) {
        // QPixmap toPixmap(int, int, double)
        QPixmap xret = this->QCustomPlot::toPixmap((int)x[1].s_int,(int)x[2].s_int,(double)x[3].s_double);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_91(Smoke::Stack x) {
        // void toPainter(QCPPainter*, int, int)
        this->QCustomPlot::toPainter((QCPPainter*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_92(Smoke::Stack x) {
        // void replot(QCustomPlot::RefreshPriority)
        this->QCustomPlot::replot((QCustomPlot::RefreshPriority)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_93(Smoke::Stack x) {
        // void mouseDoubleClick(QMouseEvent*)
        this->QCustomPlot::mouseDoubleClick((QMouseEvent*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_94(Smoke::Stack x) {
        // void mousePress(QMouseEvent*)
        this->QCustomPlot::mousePress((QMouseEvent*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_95(Smoke::Stack x) {
        // void mouseMove(QMouseEvent*)
        this->QCustomPlot::mouseMove((QMouseEvent*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_96(Smoke::Stack x) {
        // void mouseRelease(QMouseEvent*)
        this->QCustomPlot::mouseRelease((QMouseEvent*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_97(Smoke::Stack x) {
        // void mouseWheel(QWheelEvent*)
        this->QCustomPlot::mouseWheel((QWheelEvent*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_98(Smoke::Stack x) {
        // void plottableClick(QCPAbstractPlottable*, QMouseEvent*)
        this->QCustomPlot::plottableClick((QCPAbstractPlottable*)x[1].s_class,(QMouseEvent*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_99(Smoke::Stack x) {
        // void plottableDoubleClick(QCPAbstractPlottable*, QMouseEvent*)
        this->QCustomPlot::plottableDoubleClick((QCPAbstractPlottable*)x[1].s_class,(QMouseEvent*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_100(Smoke::Stack x) {
        // void itemClick(QCPAbstractItem*, QMouseEvent*)
        this->QCustomPlot::itemClick((QCPAbstractItem*)x[1].s_class,(QMouseEvent*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_101(Smoke::Stack x) {
        // void itemDoubleClick(QCPAbstractItem*, QMouseEvent*)
        this->QCustomPlot::itemDoubleClick((QCPAbstractItem*)x[1].s_class,(QMouseEvent*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_102(Smoke::Stack x) {
        // void axisClick(QCPAxis*, QCPAxis::SelectablePart, QMouseEvent*)
        this->QCustomPlot::axisClick((QCPAxis*)x[1].s_class,(QCPAxis::SelectablePart)x[2].s_enum,(QMouseEvent*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_103(Smoke::Stack x) {
        // void axisDoubleClick(QCPAxis*, QCPAxis::SelectablePart, QMouseEvent*)
        this->QCustomPlot::axisDoubleClick((QCPAxis*)x[1].s_class,(QCPAxis::SelectablePart)x[2].s_enum,(QMouseEvent*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_104(Smoke::Stack x) {
        // void legendClick(QCPLegend*, QCPAbstractLegendItem*, QMouseEvent*)
        this->QCustomPlot::legendClick((QCPLegend*)x[1].s_class,(QCPAbstractLegendItem*)x[2].s_class,(QMouseEvent*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_105(Smoke::Stack x) {
        // void legendDoubleClick(QCPLegend*, QCPAbstractLegendItem*, QMouseEvent*)
        this->QCustomPlot::legendDoubleClick((QCPLegend*)x[1].s_class,(QCPAbstractLegendItem*)x[2].s_class,(QMouseEvent*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_106(Smoke::Stack x) {
        // void titleClick(QMouseEvent*, QCPPlotTitle*)
        this->QCustomPlot::titleClick((QMouseEvent*)x[1].s_class,(QCPPlotTitle*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_107(Smoke::Stack x) {
        // void titleDoubleClick(QMouseEvent*, QCPPlotTitle*)
        this->QCustomPlot::titleDoubleClick((QMouseEvent*)x[1].s_class,(QCPPlotTitle*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_108(Smoke::Stack x) {
        // void selectionChangedByUser()
        this->QCustomPlot::selectionChangedByUser();
        (void)x; // noop (for compiler warning)
    }
    void x_109(Smoke::Stack x) {
        // void beforeReplot()
        this->QCustomPlot::beforeReplot();
        (void)x; // noop (for compiler warning)
    }
    void x_110(Smoke::Stack x) {
        // void afterReplot()
        this->QCustomPlot::afterReplot();
        (void)x; // noop (for compiler warning)
    }
    void x_111(Smoke::Stack x) {
        // virtual QSize minimumSizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            QSize xret = ((const x_QCustomPlot*)this)->QCustomPlot::minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCustomPlot*)this)->minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_112(Smoke::Stack x) {
        // virtual QSize sizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            QSize xret = ((const x_QCustomPlot*)this)->QCustomPlot::sizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCustomPlot*)this)->sizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_113(Smoke::Stack x) {
        // virtual void paintEvent(QPaintEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::paintEvent((QPaintEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->paintEvent((QPaintEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_114(Smoke::Stack x) {
        // virtual void resizeEvent(QResizeEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::resizeEvent((QResizeEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->resizeEvent((QResizeEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_115(Smoke::Stack x) {
        // virtual void mouseDoubleClickEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::mouseDoubleClickEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseDoubleClickEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_116(Smoke::Stack x) {
        // virtual void mousePressEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::mousePressEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mousePressEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_117(Smoke::Stack x) {
        // virtual void mouseMoveEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::mouseMoveEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseMoveEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_118(Smoke::Stack x) {
        // virtual void mouseReleaseEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::mouseReleaseEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseReleaseEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_119(Smoke::Stack x) {
        // virtual void wheelEvent(QWheelEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::wheelEvent((QWheelEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->wheelEvent((QWheelEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_120(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_121(Smoke::Stack x) {
        // virtual void axisRemoved(QCPAxis*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::axisRemoved((QCPAxis*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->axisRemoved((QCPAxis*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_122(Smoke::Stack x) {
        // virtual void legendRemoved(QCPLegend*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCustomPlot*>(this))) {
            this->QCustomPlot::legendRemoved((QCPLegend*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->legendRemoved((QCPLegend*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_123(Smoke::Stack x) {
        // void updateLayerIndices() const
        ((const x_QCustomPlot*)this)->QCustomPlot::updateLayerIndices();
        (void)x; // noop (for compiler warning)
    }
    void x_124(Smoke::Stack x) {
        // QCPLayerable* layerableAt(const QPointF&, bool, QVariant*) const
        QCPLayerable* xret = ((const x_QCustomPlot*)this)->QCustomPlot::layerableAt(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
        x[0].s_class = (void*)xret;
    }
    void x_125(Smoke::Stack x) {
        // void drawBackground(QCPPainter*)
        this->QCustomPlot::drawBackground((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_126(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCustomPlot::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_127(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCustomPlot::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_128(Smoke::Stack x) {
        // QCustomPlot* QCustomPlot()
        x_QCustomPlot* xret = new x_QCustomPlot((QWidget*)0);
        x[0].s_class = (void*)xret;
    }
    void x_129(Smoke::Stack x) {
        // void setBackground(const QPixmap&, bool)
        this->QCustomPlot::setBackground(*(const QPixmap*)x[1].s_class,(bool)x[2].s_bool,(Qt::AspectRatioMode)Qt::KeepAspectRatioByExpanding);
        (void)x; // noop (for compiler warning)
    }
    void x_130(Smoke::Stack x) {
        // void setAntialiasedElement(QCP::AntialiasedElement)
        this->QCustomPlot::setAntialiasedElement((QCP::AntialiasedElement)x[1].s_enum,(bool)true);
        (void)x; // noop (for compiler warning)
    }
    void x_131(Smoke::Stack x) {
        // void setNotAntialiasedElement(QCP::AntialiasedElement)
        this->QCustomPlot::setNotAntialiasedElement((QCP::AntialiasedElement)x[1].s_enum,(bool)true);
        (void)x; // noop (for compiler warning)
    }
    void x_132(Smoke::Stack x) {
        // void setInteraction(const QCP::Interaction&)
        this->QCustomPlot::setInteraction(*(const QCP::Interaction*)x[1].s_class,(bool)true);
        (void)x; // noop (for compiler warning)
    }
    void x_133(Smoke::Stack x) {
        // void setPlottingHint(QCP::PlottingHint)
        this->QCustomPlot::setPlottingHint((QCP::PlottingHint)x[1].s_enum,(bool)true);
        (void)x; // noop (for compiler warning)
    }
    void x_134(Smoke::Stack x) {
        // QCPAbstractPlottable* plottableAt(const QPointF&) const
        QCPAbstractPlottable* xret = ((const x_QCustomPlot*)this)->QCustomPlot::plottableAt(*(const QPointF*)x[1].s_class,(bool)false);
        x[0].s_class = (void*)xret;
    }
    void x_135(Smoke::Stack x) {
        // QCPGraph* addGraph()
        QCPGraph* xret = this->QCustomPlot::addGraph((QCPAxis*)0,(QCPAxis*)0);
        x[0].s_class = (void*)xret;
    }
    void x_136(Smoke::Stack x) {
        // QCPGraph* addGraph(QCPAxis*)
        QCPGraph* xret = this->QCustomPlot::addGraph((QCPAxis*)x[1].s_class,(QCPAxis*)0);
        x[0].s_class = (void*)xret;
    }
    void x_137(Smoke::Stack x) {
        // QCPAbstractItem* itemAt(const QPointF&) const
        QCPAbstractItem* xret = ((const x_QCustomPlot*)this)->QCustomPlot::itemAt(*(const QPointF*)x[1].s_class,(bool)false);
        x[0].s_class = (void*)xret;
    }
    void x_138(Smoke::Stack x) {
        // bool addLayer(const QString&)
        bool xret = this->QCustomPlot::addLayer(*(const QString*)x[1].s_class,(QCPLayer*)0,(QCustomPlot::LayerInsertMode)QCustomPlot::limAbove);
        x[0].s_bool = xret;
    }
    void x_139(Smoke::Stack x) {
        // bool addLayer(const QString&, QCPLayer*)
        bool xret = this->QCustomPlot::addLayer(*(const QString*)x[1].s_class,(QCPLayer*)x[2].s_class,(QCustomPlot::LayerInsertMode)QCustomPlot::limAbove);
        x[0].s_bool = xret;
    }
    void x_140(Smoke::Stack x) {
        // bool moveLayer(QCPLayer*, QCPLayer*)
        bool xret = this->QCustomPlot::moveLayer((QCPLayer*)x[1].s_class,(QCPLayer*)x[2].s_class,(QCustomPlot::LayerInsertMode)QCustomPlot::limAbove);
        x[0].s_bool = xret;
    }
    void x_141(Smoke::Stack x) {
        // QCPAxisRect* axisRect() const
        QCPAxisRect* xret = ((const x_QCustomPlot*)this)->QCustomPlot::axisRect((int)0);
        x[0].s_class = (void*)xret;
    }
    void x_142(Smoke::Stack x) {
        // void rescaleAxes()
        this->QCustomPlot::rescaleAxes((bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_143(Smoke::Stack x) {
        // bool savePdf(const QString&)
        bool xret = this->QCustomPlot::savePdf(*(const QString*)x[1].s_class,(bool)false,(int)0,(int)0,(const QString&)QString(),(const QString&)QString());
        x[0].s_bool = xret;
    }
    void x_144(Smoke::Stack x) {
        // bool savePdf(const QString&, bool)
        bool xret = this->QCustomPlot::savePdf(*(const QString*)x[1].s_class,(bool)x[2].s_bool,(int)0,(int)0,(const QString&)QString(),(const QString&)QString());
        x[0].s_bool = xret;
    }
    void x_145(Smoke::Stack x) {
        // bool savePdf(const QString&, bool, int)
        bool xret = this->QCustomPlot::savePdf(*(const QString*)x[1].s_class,(bool)x[2].s_bool,(int)x[3].s_int,(int)0,(const QString&)QString(),(const QString&)QString());
        x[0].s_bool = xret;
    }
    void x_146(Smoke::Stack x) {
        // bool savePdf(const QString&, bool, int, int)
        bool xret = this->QCustomPlot::savePdf(*(const QString*)x[1].s_class,(bool)x[2].s_bool,(int)x[3].s_int,(int)x[4].s_int,(const QString&)QString(),(const QString&)QString());
        x[0].s_bool = xret;
    }
    void x_147(Smoke::Stack x) {
        // bool savePdf(const QString&, bool, int, int, const QString&)
        bool xret = this->QCustomPlot::savePdf(*(const QString*)x[1].s_class,(bool)x[2].s_bool,(int)x[3].s_int,(int)x[4].s_int,*(const QString*)x[5].s_class,(const QString&)QString());
        x[0].s_bool = xret;
    }
    void x_148(Smoke::Stack x) {
        // bool savePng(const QString&)
        bool xret = this->QCustomPlot::savePng(*(const QString*)x[1].s_class,(int)0,(int)0,(double)1.0,(int)-1);
        x[0].s_bool = xret;
    }
    void x_149(Smoke::Stack x) {
        // bool savePng(const QString&, int)
        bool xret = this->QCustomPlot::savePng(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)0,(double)1.0,(int)-1);
        x[0].s_bool = xret;
    }
    void x_150(Smoke::Stack x) {
        // bool savePng(const QString&, int, int)
        bool xret = this->QCustomPlot::savePng(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)1.0,(int)-1);
        x[0].s_bool = xret;
    }
    void x_151(Smoke::Stack x) {
        // bool savePng(const QString&, int, int, double)
        bool xret = this->QCustomPlot::savePng(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)x[4].s_double,(int)-1);
        x[0].s_bool = xret;
    }
    void x_152(Smoke::Stack x) {
        // bool saveJpg(const QString&)
        bool xret = this->QCustomPlot::saveJpg(*(const QString*)x[1].s_class,(int)0,(int)0,(double)1.0,(int)-1);
        x[0].s_bool = xret;
    }
    void x_153(Smoke::Stack x) {
        // bool saveJpg(const QString&, int)
        bool xret = this->QCustomPlot::saveJpg(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)0,(double)1.0,(int)-1);
        x[0].s_bool = xret;
    }
    void x_154(Smoke::Stack x) {
        // bool saveJpg(const QString&, int, int)
        bool xret = this->QCustomPlot::saveJpg(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)1.0,(int)-1);
        x[0].s_bool = xret;
    }
    void x_155(Smoke::Stack x) {
        // bool saveJpg(const QString&, int, int, double)
        bool xret = this->QCustomPlot::saveJpg(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)x[4].s_double,(int)-1);
        x[0].s_bool = xret;
    }
    void x_156(Smoke::Stack x) {
        // bool saveBmp(const QString&)
        bool xret = this->QCustomPlot::saveBmp(*(const QString*)x[1].s_class,(int)0,(int)0,(double)1.0);
        x[0].s_bool = xret;
    }
    void x_157(Smoke::Stack x) {
        // bool saveBmp(const QString&, int)
        bool xret = this->QCustomPlot::saveBmp(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)0,(double)1.0);
        x[0].s_bool = xret;
    }
    void x_158(Smoke::Stack x) {
        // bool saveBmp(const QString&, int, int)
        bool xret = this->QCustomPlot::saveBmp(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)1.0);
        x[0].s_bool = xret;
    }
    void x_159(Smoke::Stack x) {
        // bool saveRastered(const QString&, int, int, double, const char*)
        bool xret = this->QCustomPlot::saveRastered(*(const QString*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(double)x[4].s_double,(const char*)x[5].s_class,(int)-1);
        x[0].s_bool = xret;
    }
    void x_160(Smoke::Stack x) {
        // QPixmap toPixmap()
        QPixmap xret = this->QCustomPlot::toPixmap((int)0,(int)0,(double)1.0);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_161(Smoke::Stack x) {
        // QPixmap toPixmap(int)
        QPixmap xret = this->QCustomPlot::toPixmap((int)x[1].s_int,(int)0,(double)1.0);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_162(Smoke::Stack x) {
        // QPixmap toPixmap(int, int)
        QPixmap xret = this->QCustomPlot::toPixmap((int)x[1].s_int,(int)x[2].s_int,(double)1.0);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_163(Smoke::Stack x) {
        // void toPainter(QCPPainter*)
        this->QCustomPlot::toPainter((QCPPainter*)x[1].s_class,(int)0,(int)0);
        (void)x; // noop (for compiler warning)
    }
    void x_164(Smoke::Stack x) {
        // void toPainter(QCPPainter*, int)
        this->QCustomPlot::toPainter((QCPPainter*)x[1].s_class,(int)x[2].s_int,(int)0);
        (void)x; // noop (for compiler warning)
    }
    void x_165(Smoke::Stack x) {
        // void replot()
        this->QCustomPlot::replot((QCustomPlot::RefreshPriority)QCustomPlot::rpHint);
        (void)x; // noop (for compiler warning)
    }
    void x_166(Smoke::Stack x) {
        // QCPLayerable* layerableAt(const QPointF&, bool) const
        QCPLayerable* xret = ((const x_QCustomPlot*)this)->QCustomPlot::layerableAt(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_167(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCustomPlot::staticMetaObject;
    }
    void x_168(Smoke::Stack x) {
        // QCPAxis* xAxis
        x[0].s_class = (void*)this->QCustomPlot::xAxis;
    }
    void x_169(Smoke::Stack x) {
        // QCPAxis* xAxis=
        this->QCustomPlot::xAxis = (QCPAxis*)x[1].s_class;
    }
    void x_170(Smoke::Stack x) {
        // QCPAxis* yAxis
        x[0].s_class = (void*)this->QCustomPlot::yAxis;
    }
    void x_171(Smoke::Stack x) {
        // QCPAxis* yAxis=
        this->QCustomPlot::yAxis = (QCPAxis*)x[1].s_class;
    }
    void x_172(Smoke::Stack x) {
        // QCPAxis* xAxis2
        x[0].s_class = (void*)this->QCustomPlot::xAxis2;
    }
    void x_173(Smoke::Stack x) {
        // QCPAxis* xAxis2=
        this->QCustomPlot::xAxis2 = (QCPAxis*)x[1].s_class;
    }
    void x_174(Smoke::Stack x) {
        // QCPAxis* yAxis2
        x[0].s_class = (void*)this->QCustomPlot::yAxis2;
    }
    void x_175(Smoke::Stack x) {
        // QCPAxis* yAxis2=
        this->QCustomPlot::yAxis2 = (QCPAxis*)x[1].s_class;
    }
    void x_176(Smoke::Stack x) {
        // QCPLegend* legend
        x[0].s_class = (void*)this->QCustomPlot::legend;
    }
    void x_177(Smoke::Stack x) {
        // QCPLegend* legend=
        this->QCustomPlot::legend = (QCPLegend*)x[1].s_class;
    }
    void x_178(Smoke::Stack x) {
        // QRect mViewport
        x[0].s_class = (void*)&this->QCustomPlot::mViewport;
    }
    void x_179(Smoke::Stack x) {
        // QRect mViewport=
        this->QCustomPlot::mViewport = *(const QRect*)x[1].s_class;
    }
    void x_180(Smoke::Stack x) {
        // QCPLayoutGrid* mPlotLayout
        x[0].s_class = (void*)this->QCustomPlot::mPlotLayout;
    }
    void x_181(Smoke::Stack x) {
        // QCPLayoutGrid* mPlotLayout=
        this->QCustomPlot::mPlotLayout = (QCPLayoutGrid*)x[1].s_class;
    }
    void x_182(Smoke::Stack x) {
        // bool mAutoAddPlottableToLegend
        x[0].s_bool = this->QCustomPlot::mAutoAddPlottableToLegend;
    }
    void x_183(Smoke::Stack x) {
        // bool mAutoAddPlottableToLegend=
        this->QCustomPlot::mAutoAddPlottableToLegend = (bool)x[1].s_bool;
    }
    void x_184(Smoke::Stack x) {
        // QList<QCPAbstractPlottable*> mPlottables
        x[0].s_class = (void*)&this->QCustomPlot::mPlottables;
    }
    void x_185(Smoke::Stack x) {
        // QList<QCPAbstractPlottable*> mPlottables=
        this->QCustomPlot::mPlottables = *(const QList<QCPAbstractPlottable*>*)x[1].s_class;
    }
    void x_186(Smoke::Stack x) {
        // QList<QCPGraph*> mGraphs
        x[0].s_class = (void*)&this->QCustomPlot::mGraphs;
    }
    void x_187(Smoke::Stack x) {
        // QList<QCPGraph*> mGraphs=
        this->QCustomPlot::mGraphs = *(const QList<QCPGraph*>*)x[1].s_class;
    }
    void x_188(Smoke::Stack x) {
        // QList<QCPAbstractItem*> mItems
        x[0].s_class = (void*)&this->QCustomPlot::mItems;
    }
    void x_189(Smoke::Stack x) {
        // QList<QCPAbstractItem*> mItems=
        this->QCustomPlot::mItems = *(const QList<QCPAbstractItem*>*)x[1].s_class;
    }
    void x_190(Smoke::Stack x) {
        // QList<QCPLayer*> mLayers
        x[0].s_class = (void*)&this->QCustomPlot::mLayers;
    }
    void x_191(Smoke::Stack x) {
        // QList<QCPLayer*> mLayers=
        this->QCustomPlot::mLayers = *(const QList<QCPLayer*>*)x[1].s_class;
    }
    void x_192(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> mAntialiasedElements
        x[0].s_uint = (uint)this->QCustomPlot::mAntialiasedElements;
    }
    void x_193(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> mAntialiasedElements=
        this->QCustomPlot::mAntialiasedElements = (QFlags<QCP::AntialiasedElement>)x[1].s_uint;
    }
    void x_194(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> mNotAntialiasedElements
        x[0].s_uint = (uint)this->QCustomPlot::mNotAntialiasedElements;
    }
    void x_195(Smoke::Stack x) {
        // QFlags<QCP::AntialiasedElement> mNotAntialiasedElements=
        this->QCustomPlot::mNotAntialiasedElements = (QFlags<QCP::AntialiasedElement>)x[1].s_uint;
    }
    void x_196(Smoke::Stack x) {
        // QFlags<QCP::Interaction> mInteractions
        x[0].s_uint = (uint)this->QCustomPlot::mInteractions;
    }
    void x_197(Smoke::Stack x) {
        // QFlags<QCP::Interaction> mInteractions=
        this->QCustomPlot::mInteractions = (QFlags<QCP::Interaction>)x[1].s_uint;
    }
    void x_198(Smoke::Stack x) {
        // int mSelectionTolerance
        x[0].s_int = this->QCustomPlot::mSelectionTolerance;
    }
    void x_199(Smoke::Stack x) {
        // int mSelectionTolerance=
        this->QCustomPlot::mSelectionTolerance = (int)x[1].s_int;
    }
    void x_200(Smoke::Stack x) {
        // bool mNoAntialiasingOnDrag
        x[0].s_bool = this->QCustomPlot::mNoAntialiasingOnDrag;
    }
    void x_201(Smoke::Stack x) {
        // bool mNoAntialiasingOnDrag=
        this->QCustomPlot::mNoAntialiasingOnDrag = (bool)x[1].s_bool;
    }
    void x_202(Smoke::Stack x) {
        // QBrush mBackgroundBrush
        x[0].s_class = (void*)&this->QCustomPlot::mBackgroundBrush;
    }
    void x_203(Smoke::Stack x) {
        // QBrush mBackgroundBrush=
        this->QCustomPlot::mBackgroundBrush = *(const QBrush*)x[1].s_class;
    }
    void x_204(Smoke::Stack x) {
        // QPixmap mBackgroundPixmap
        x[0].s_class = (void*)&this->QCustomPlot::mBackgroundPixmap;
    }
    void x_205(Smoke::Stack x) {
        // QPixmap mBackgroundPixmap=
        this->QCustomPlot::mBackgroundPixmap = *(const QPixmap*)x[1].s_class;
    }
    void x_206(Smoke::Stack x) {
        // QPixmap mScaledBackgroundPixmap
        x[0].s_class = (void*)&this->QCustomPlot::mScaledBackgroundPixmap;
    }
    void x_207(Smoke::Stack x) {
        // QPixmap mScaledBackgroundPixmap=
        this->QCustomPlot::mScaledBackgroundPixmap = *(const QPixmap*)x[1].s_class;
    }
    void x_208(Smoke::Stack x) {
        // bool mBackgroundScaled
        x[0].s_bool = this->QCustomPlot::mBackgroundScaled;
    }
    void x_209(Smoke::Stack x) {
        // bool mBackgroundScaled=
        this->QCustomPlot::mBackgroundScaled = (bool)x[1].s_bool;
    }
    void x_210(Smoke::Stack x) {
        // Qt::AspectRatioMode mBackgroundScaledMode
        x[0].s_enum = this->QCustomPlot::mBackgroundScaledMode;
    }
    void x_211(Smoke::Stack x) {
        // Qt::AspectRatioMode mBackgroundScaledMode=
        this->QCustomPlot::mBackgroundScaledMode = (Qt::AspectRatioMode)x[1].s_enum;
    }
    void x_212(Smoke::Stack x) {
        // QCPLayer* mCurrentLayer
        x[0].s_class = (void*)this->QCustomPlot::mCurrentLayer;
    }
    void x_213(Smoke::Stack x) {
        // QCPLayer* mCurrentLayer=
        this->QCustomPlot::mCurrentLayer = (QCPLayer*)x[1].s_class;
    }
    void x_214(Smoke::Stack x) {
        // QFlags<QCP::PlottingHint> mPlottingHints
        x[0].s_uint = (uint)this->QCustomPlot::mPlottingHints;
    }
    void x_215(Smoke::Stack x) {
        // QFlags<QCP::PlottingHint> mPlottingHints=
        this->QCustomPlot::mPlottingHints = (QFlags<QCP::PlottingHint>)x[1].s_uint;
    }
    void x_216(Smoke::Stack x) {
        // Qt::KeyboardModifier mMultiSelectModifier
        x[0].s_enum = this->QCustomPlot::mMultiSelectModifier;
    }
    void x_217(Smoke::Stack x) {
        // Qt::KeyboardModifier mMultiSelectModifier=
        this->QCustomPlot::mMultiSelectModifier = (Qt::KeyboardModifier)x[1].s_enum;
    }
    void x_218(Smoke::Stack x) {
        // QPixmap mPaintBuffer
        x[0].s_class = (void*)&this->QCustomPlot::mPaintBuffer;
    }
    void x_219(Smoke::Stack x) {
        // QPixmap mPaintBuffer=
        this->QCustomPlot::mPaintBuffer = *(const QPixmap*)x[1].s_class;
    }
    void x_220(Smoke::Stack x) {
        // QPoint mMousePressPos
        x[0].s_class = (void*)&this->QCustomPlot::mMousePressPos;
    }
    void x_221(Smoke::Stack x) {
        // QPoint mMousePressPos=
        this->QCustomPlot::mMousePressPos = *(const QPoint*)x[1].s_class;
    }
    void x_222(Smoke::Stack x) {
        // QPointer<QCPLayoutElement> mMouseEventElement
        x[0].s_class = (void*)&this->QCustomPlot::mMouseEventElement;
    }
    void x_223(Smoke::Stack x) {
        // QPointer<QCPLayoutElement> mMouseEventElement=
        this->QCustomPlot::mMouseEventElement = *(const QPointer<QCPLayoutElement>*)x[1].s_class;
    }
    void x_224(Smoke::Stack x) {
        // bool mReplotting
        x[0].s_bool = this->QCustomPlot::mReplotting;
    }
    void x_225(Smoke::Stack x) {
        // bool mReplotting=
        this->QCustomPlot::mReplotting = (bool)x[1].s_bool;
    }
    static void x_226(Smoke::Stack x) {
        x[0].s_enum = (long)QCustomPlot::limBelow;
    }
    static void x_227(Smoke::Stack x) {
        x[0].s_enum = (long)QCustomPlot::limAbove;
    }
    static void x_228(Smoke::Stack x) {
        x[0].s_enum = (long)QCustomPlot::rpImmediate;
    }
    static void x_229(Smoke::Stack x) {
        x[0].s_enum = (long)QCustomPlot::rpQueued;
    }
    static void x_230(Smoke::Stack x) {
        x[0].s_enum = (long)QCustomPlot::rpHint;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2413, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCustomPlot::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2414, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCustomPlot::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(2419, (void*)this, x)) return (int)x[0].s_int;
        return this->QCustomPlot::qt_metacall(x1, x2, x3);
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2523, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCustomPlot::minimumSizeHint();
    }
    virtual QSize sizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2524, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCustomPlot::sizeHint();
    }
    virtual void paintEvent(QPaintEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2525, (void*)this, x)) return;
        this->QCustomPlot::paintEvent(x1);
    }
    virtual void resizeEvent(QResizeEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2526, (void*)this, x)) return;
        this->QCustomPlot::resizeEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2527, (void*)this, x)) return;
        this->QCustomPlot::mouseDoubleClickEvent(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2528, (void*)this, x)) return;
        this->QCustomPlot::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2529, (void*)this, x)) return;
        this->QCustomPlot::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2530, (void*)this, x)) return;
        this->QCustomPlot::mouseReleaseEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2531, (void*)this, x)) return;
        this->QCustomPlot::wheelEvent(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2532, (void*)this, x)) return;
        this->QCustomPlot::draw(x1);
    }
    virtual void axisRemoved(QCPAxis* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2533, (void*)this, x)) return;
        this->QCustomPlot::axisRemoved(x1);
    }
    virtual void legendRemoved(QCPLegend* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2534, (void*)this, x)) return;
        this->QCustomPlot::legendRemoved(x1);
    }
    virtual void setVisible(bool x1) {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(2726, (void*)this, x)) return;
        this->QWidget::setVisible(x1);
    }
    virtual int heightForWidth(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(2727, (void*)this, x)) return (int)x[0].s_int;
        return this->QWidget::heightForWidth(x1);
    }
    virtual void keyPressEvent(QKeyEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2730, (void*)this, x)) return;
        this->QWidget::keyPressEvent(x1);
    }
    virtual void keyReleaseEvent(QKeyEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2731, (void*)this, x)) return;
        this->QWidget::keyReleaseEvent(x1);
    }
    virtual void focusInEvent(QFocusEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2732, (void*)this, x)) return;
        this->QWidget::focusInEvent(x1);
    }
    virtual void focusOutEvent(QFocusEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2733, (void*)this, x)) return;
        this->QWidget::focusOutEvent(x1);
    }
    virtual void enterEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2734, (void*)this, x)) return;
        this->QWidget::enterEvent(x1);
    }
    virtual void leaveEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2735, (void*)this, x)) return;
        this->QWidget::leaveEvent(x1);
    }
    virtual void moveEvent(QMoveEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2736, (void*)this, x)) return;
        this->QWidget::moveEvent(x1);
    }
    virtual void closeEvent(QCloseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2737, (void*)this, x)) return;
        this->QWidget::closeEvent(x1);
    }
    virtual void contextMenuEvent(QContextMenuEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2738, (void*)this, x)) return;
        this->QWidget::contextMenuEvent(x1);
    }
    virtual void tabletEvent(QTabletEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2739, (void*)this, x)) return;
        this->QWidget::tabletEvent(x1);
    }
    virtual void actionEvent(QActionEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2740, (void*)this, x)) return;
        this->QWidget::actionEvent(x1);
    }
    virtual void dragEnterEvent(QDragEnterEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2741, (void*)this, x)) return;
        this->QWidget::dragEnterEvent(x1);
    }
    virtual void dragMoveEvent(QDragMoveEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2742, (void*)this, x)) return;
        this->QWidget::dragMoveEvent(x1);
    }
    virtual void dragLeaveEvent(QDragLeaveEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2743, (void*)this, x)) return;
        this->QWidget::dragLeaveEvent(x1);
    }
    virtual void dropEvent(QDropEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2744, (void*)this, x)) return;
        this->QWidget::dropEvent(x1);
    }
    virtual void showEvent(QShowEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2745, (void*)this, x)) return;
        this->QWidget::showEvent(x1);
    }
    virtual void hideEvent(QHideEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2746, (void*)this, x)) return;
        this->QWidget::hideEvent(x1);
    }
    virtual bool x11Event(_XEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2747, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QWidget::x11Event(x1);
    }
    virtual void changeEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2748, (void*)this, x)) return;
        this->QWidget::changeEvent(x1);
    }
    virtual void inputMethodEvent(QInputMethodEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2750, (void*)this, x)) return;
        this->QWidget::inputMethodEvent(x1);
    }
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery x1) const {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(2751, (void*)this, x)) {
            QVariant* xptr = (QVariant*)x[0].s_class;
            QVariant xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QWidget::inputMethodQuery(x1);
    }
    virtual bool focusNextPrevChild(bool x1) {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(2752, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QWidget::focusNextPrevChild(x1);
    }
    virtual void styleChange(QStyle& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(2753, (void*)this, x)) return;
        this->QWidget::styleChange(x1);
    }
    virtual void enabledChange(bool x1) {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(2754, (void*)this, x)) return;
        this->QWidget::enabledChange(x1);
    }
    virtual void paletteChange(const QPalette& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(2755, (void*)this, x)) return;
        this->QWidget::paletteChange(x1);
    }
    virtual void fontChange(const QFont& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(2756, (void*)this, x)) return;
        this->QWidget::fontChange(x1);
    }
    virtual void windowActivationChange(bool x1) {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(2757, (void*)this, x)) return;
        this->QWidget::windowActivationChange(x1);
    }
    virtual void languageChange() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2758, (void*)this, x)) return;
        this->QWidget::languageChange();
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2729, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QWidget::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    virtual int devType() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2725, (void*)this, x)) return (int)x[0].s_int;
        return this->QWidget::devType();
    }
    virtual QPaintEngine* paintEngine() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(2728, (void*)this, x)) return (QPaintEngine*)x[0].s_class;
        return this->QWidget::paintEngine();
    }
    virtual int metric(QPaintDevice::PaintDeviceMetric x1) const {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(2749, (void*)this, x)) return (int)x[0].s_int;
        return this->QWidget::metric(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 115: //QCustomPlot::LayerInsertMode
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCustomPlot::LayerInsertMode;
                    break;
                case Smoke::EnumDelete:
                    delete (QCustomPlot::LayerInsertMode*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCustomPlot::LayerInsertMode*)xdata = (QCustomPlot::LayerInsertMode)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCustomPlot::LayerInsertMode*)xdata;
                    break;
            }
            break;
        case 116: //QCustomPlot::RefreshPriority
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCustomPlot::RefreshPriority;
                    break;
                case Smoke::EnumDelete:
                    delete (QCustomPlot::RefreshPriority*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCustomPlot::RefreshPriority*)xdata = (QCustomPlot::RefreshPriority)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCustomPlot::RefreshPriority*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCustomPlot() { this->_binding->deleted(55, (void*)this); }
};
void xenum_QCustomPlot(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCustomPlot::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCustomPlot(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCustomPlot *xself = (x_QCustomPlot*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCustomPlot::x_3(args);	break;
        case 4: x_QCustomPlot::x_4(args);	break;
        case 5: x_QCustomPlot::x_5(args);	break;
        case 6: x_QCustomPlot::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCustomPlot::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: xself->x_81(args);	break;
        case 82: xself->x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: xself->x_84(args);	break;
        case 85: xself->x_85(args);	break;
        case 86: xself->x_86(args);	break;
        case 87: xself->x_87(args);	break;
        case 88: xself->x_88(args);	break;
        case 89: xself->x_89(args);	break;
        case 90: xself->x_90(args);	break;
        case 91: xself->x_91(args);	break;
        case 92: xself->x_92(args);	break;
        case 93: xself->x_93(args);	break;
        case 94: xself->x_94(args);	break;
        case 95: xself->x_95(args);	break;
        case 96: xself->x_96(args);	break;
        case 97: xself->x_97(args);	break;
        case 98: xself->x_98(args);	break;
        case 99: xself->x_99(args);	break;
        case 100: xself->x_100(args);	break;
        case 101: xself->x_101(args);	break;
        case 102: xself->x_102(args);	break;
        case 103: xself->x_103(args);	break;
        case 104: xself->x_104(args);	break;
        case 105: xself->x_105(args);	break;
        case 106: xself->x_106(args);	break;
        case 107: xself->x_107(args);	break;
        case 108: xself->x_108(args);	break;
        case 109: xself->x_109(args);	break;
        case 110: xself->x_110(args);	break;
        case 111: xself->x_111(args);	break;
        case 112: xself->x_112(args);	break;
        case 113: xself->x_113(args);	break;
        case 114: xself->x_114(args);	break;
        case 115: xself->x_115(args);	break;
        case 116: xself->x_116(args);	break;
        case 117: xself->x_117(args);	break;
        case 118: xself->x_118(args);	break;
        case 119: xself->x_119(args);	break;
        case 120: xself->x_120(args);	break;
        case 121: xself->x_121(args);	break;
        case 122: xself->x_122(args);	break;
        case 123: xself->x_123(args);	break;
        case 124: xself->x_124(args);	break;
        case 125: xself->x_125(args);	break;
        case 126: x_QCustomPlot::x_126(args);	break;
        case 127: x_QCustomPlot::x_127(args);	break;
        case 128: x_QCustomPlot::x_128(args);	break;
        case 129: xself->x_129(args);	break;
        case 130: xself->x_130(args);	break;
        case 131: xself->x_131(args);	break;
        case 132: xself->x_132(args);	break;
        case 133: xself->x_133(args);	break;
        case 134: xself->x_134(args);	break;
        case 135: xself->x_135(args);	break;
        case 136: xself->x_136(args);	break;
        case 137: xself->x_137(args);	break;
        case 138: xself->x_138(args);	break;
        case 139: xself->x_139(args);	break;
        case 140: xself->x_140(args);	break;
        case 141: xself->x_141(args);	break;
        case 142: xself->x_142(args);	break;
        case 143: xself->x_143(args);	break;
        case 144: xself->x_144(args);	break;
        case 145: xself->x_145(args);	break;
        case 146: xself->x_146(args);	break;
        case 147: xself->x_147(args);	break;
        case 148: xself->x_148(args);	break;
        case 149: xself->x_149(args);	break;
        case 150: xself->x_150(args);	break;
        case 151: xself->x_151(args);	break;
        case 152: xself->x_152(args);	break;
        case 153: xself->x_153(args);	break;
        case 154: xself->x_154(args);	break;
        case 155: xself->x_155(args);	break;
        case 156: xself->x_156(args);	break;
        case 157: xself->x_157(args);	break;
        case 158: xself->x_158(args);	break;
        case 159: xself->x_159(args);	break;
        case 160: xself->x_160(args);	break;
        case 161: xself->x_161(args);	break;
        case 162: xself->x_162(args);	break;
        case 163: xself->x_163(args);	break;
        case 164: xself->x_164(args);	break;
        case 165: xself->x_165(args);	break;
        case 166: xself->x_166(args);	break;
        case 167: x_QCustomPlot::x_167(args);	break;
        case 168: xself->x_168(args);	break;
        case 169: xself->x_169(args);	break;
        case 170: xself->x_170(args);	break;
        case 171: xself->x_171(args);	break;
        case 172: xself->x_172(args);	break;
        case 173: xself->x_173(args);	break;
        case 174: xself->x_174(args);	break;
        case 175: xself->x_175(args);	break;
        case 176: xself->x_176(args);	break;
        case 177: xself->x_177(args);	break;
        case 178: xself->x_178(args);	break;
        case 179: xself->x_179(args);	break;
        case 180: xself->x_180(args);	break;
        case 181: xself->x_181(args);	break;
        case 182: xself->x_182(args);	break;
        case 183: xself->x_183(args);	break;
        case 184: xself->x_184(args);	break;
        case 185: xself->x_185(args);	break;
        case 186: xself->x_186(args);	break;
        case 187: xself->x_187(args);	break;
        case 188: xself->x_188(args);	break;
        case 189: xself->x_189(args);	break;
        case 190: xself->x_190(args);	break;
        case 191: xself->x_191(args);	break;
        case 192: xself->x_192(args);	break;
        case 193: xself->x_193(args);	break;
        case 194: xself->x_194(args);	break;
        case 195: xself->x_195(args);	break;
        case 196: xself->x_196(args);	break;
        case 197: xself->x_197(args);	break;
        case 198: xself->x_198(args);	break;
        case 199: xself->x_199(args);	break;
        case 200: xself->x_200(args);	break;
        case 201: xself->x_201(args);	break;
        case 202: xself->x_202(args);	break;
        case 203: xself->x_203(args);	break;
        case 204: xself->x_204(args);	break;
        case 205: xself->x_205(args);	break;
        case 206: xself->x_206(args);	break;
        case 207: xself->x_207(args);	break;
        case 208: xself->x_208(args);	break;
        case 209: xself->x_209(args);	break;
        case 210: xself->x_210(args);	break;
        case 211: xself->x_211(args);	break;
        case 212: xself->x_212(args);	break;
        case 213: xself->x_213(args);	break;
        case 214: xself->x_214(args);	break;
        case 215: xself->x_215(args);	break;
        case 216: xself->x_216(args);	break;
        case 217: xself->x_217(args);	break;
        case 218: xself->x_218(args);	break;
        case 219: xself->x_219(args);	break;
        case 220: xself->x_220(args);	break;
        case 221: xself->x_221(args);	break;
        case 222: xself->x_222(args);	break;
        case 223: xself->x_223(args);	break;
        case 224: xself->x_224(args);	break;
        case 225: xself->x_225(args);	break;
        case 226: x_QCustomPlot::x_226(args);	break;
        case 227: x_QCustomPlot::x_227(args);	break;
        case 228: x_QCustomPlot::x_228(args);	break;
        case 229: x_QCustomPlot::x_229(args);	break;
        case 230: x_QCustomPlot::x_230(args);	break;
        case 231: delete (QCustomPlot*)xself;	break;
    }
}
class x_QGlobalSpace {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // static int strncmp(const char*, const char*, size_t)
        int xret = strncmp((const char*)x[1].s_class,(const char*)x[2].s_class,(size_t)x[3].s_ulong);
        x[0].s_int = xret;
    }
    static void x_2(Smoke::Stack x) {
        // static QTextStream& bom(QTextStream&)
        QTextStream& xret = bom(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_3(Smoke::Stack x) {
        // static QTextStream& forcesign(QTextStream&)
        QTextStream& xret = forcesign(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_4(Smoke::Stack x) {
        // static QTextStream& fixed(QTextStream&)
        QTextStream& xret = fixed(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_5(Smoke::Stack x) {
        // static QTextStream& noshowbase(QTextStream&)
        QTextStream& xret = noshowbase(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_6(Smoke::Stack x) {
        // static QIncompatibleFlag operator|(QCPAxis::SelectablePart, int)
        QIncompatibleFlag xret = operator|((QCPAxis::SelectablePart)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)new QIncompatibleFlag(xret);
    }
    static void x_7(Smoke::Stack x) {
        // static size_t strlen(const char*)
        size_t xret = strlen((const char*)x[1].s_class);
        x[0].s_ulong = xret;
    }
    static void x_8(Smoke::Stack x) {
        // static QIncompatibleFlag operator|(QCP::Interaction, int)
        QIncompatibleFlag xret = operator|((QCP::Interaction)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)new QIncompatibleFlag(xret);
    }
    static void x_9(Smoke::Stack x) {
        // static QTextStream& uppercasedigits(QTextStream&)
        QTextStream& xret = uppercasedigits(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_10(Smoke::Stack x) {
        // static QTextStream& bin(QTextStream&)
        QTextStream& xret = bin(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_11(Smoke::Stack x) {
        // static QTextStream& showbase(QTextStream&)
        QTextStream& xret = showbase(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_12(Smoke::Stack x) {
        // static const QCPRange operator*(double, const QCPRange&)
        const QCPRange xret = operator*((double)x[1].s_double,*(const QCPRange*)x[2].s_class);
        x[0].s_class = (void*)new const QCPRange(xret);
    }
    static void x_13(Smoke::Stack x) {
        // static int memcmp(const void*, const void*, size_t)
        int xret = memcmp((const void*)x[1].s_class,(const void*)x[2].s_class,(size_t)x[3].s_ulong);
        x[0].s_int = xret;
    }
    static void x_14(Smoke::Stack x) {
        // static char* strcat(char*, const char*)
        char* xret = strcat((char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    static void x_15(Smoke::Stack x) {
        // static QTextStream& noforcesign(QTextStream&)
        QTextStream& xret = noforcesign(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_16(Smoke::Stack x) {
        // static const QCPRange operator-(const QCPRange&, double)
        const QCPRange xret = operator-(*(const QCPRange*)x[1].s_class,(double)x[2].s_double);
        x[0].s_class = (void*)new const QCPRange(xret);
    }
    static void x_17(Smoke::Stack x) {
        // static void* memcpy(void*, const void*, size_t)
        void* xret = memcpy((void*)x[1].s_class,(const void*)x[2].s_class,(size_t)x[3].s_ulong);
        x[0].s_class = (void*)xret;
    }
    static void x_18(Smoke::Stack x) {
        // static QFlags<QCPAxis::SelectablePart> operator|(QCPAxis::SelectablePart, QCPAxis::SelectablePart)
        QFlags<QCPAxis::SelectablePart> xret = operator|((QCPAxis::SelectablePart)x[1].s_enum,(QCPAxis::SelectablePart)x[2].s_enum);
        x[0].s_uint = (uint)xret;
    }
    static void x_19(Smoke::Stack x) {
        // static char* strdup(const char*)
        char* xret = strdup((const char*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    static void x_20(Smoke::Stack x) {
        // static QTextStream& lowercasebase(QTextStream&)
        QTextStream& xret = lowercasebase(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_21(Smoke::Stack x) {
        // static QFlags<QCP::MarginSide> operator|(QCP::MarginSide, QFlags<QCP::MarginSide>)
        QFlags<QCP::MarginSide> xret = operator|((QCP::MarginSide)x[1].s_enum,(QFlags<QCP::MarginSide>)x[2].s_uint);
        x[0].s_uint = (uint)xret;
    }
    static void x_22(Smoke::Stack x) {
        // static QFlags<QCP::AntialiasedElement> operator|(QCP::AntialiasedElement, QCP::AntialiasedElement)
        QFlags<QCP::AntialiasedElement> xret = operator|((QCP::AntialiasedElement)x[1].s_enum,(QCP::AntialiasedElement)x[2].s_enum);
        x[0].s_uint = (uint)xret;
    }
    static void x_23(Smoke::Stack x) {
        // static QTextStream& uppercasebase(QTextStream&)
        QTextStream& xret = uppercasebase(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_24(Smoke::Stack x) {
        // static char* strerror(int)
        char* xret = strerror((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    static void x_25(Smoke::Stack x) {
        // static QFlags<QCPAxis::AxisType> operator|(QCPAxis::AxisType, QFlags<QCPAxis::AxisType>)
        QFlags<QCPAxis::AxisType> xret = operator|((QCPAxis::AxisType)x[1].s_enum,(QFlags<QCPAxis::AxisType>)x[2].s_uint);
        x[0].s_uint = (uint)xret;
    }
    static void x_26(Smoke::Stack x) {
        // static QTextStream& scientific(QTextStream&)
        QTextStream& xret = scientific(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_27(Smoke::Stack x) {
        // static QFlags<QCP::AntialiasedElement> operator|(QCP::AntialiasedElement, QFlags<QCP::AntialiasedElement>)
        QFlags<QCP::AntialiasedElement> xret = operator|((QCP::AntialiasedElement)x[1].s_enum,(QFlags<QCP::AntialiasedElement>)x[2].s_uint);
        x[0].s_uint = (uint)xret;
    }
    static void x_28(Smoke::Stack x) {
        // static size_t strcspn(const char*, const char*)
        size_t xret = strcspn((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_ulong = xret;
    }
    static void x_29(Smoke::Stack x) {
        // static QIncompatibleFlag operator|(QCPPainter::PainterMode, int)
        QIncompatibleFlag xret = operator|((QCPPainter::PainterMode)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)new QIncompatibleFlag(xret);
    }
    static void x_30(Smoke::Stack x) {
        // static QTextStream& right(QTextStream&)
        QTextStream& xret = right(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_31(Smoke::Stack x) {
        // static QTextStream& left(QTextStream&)
        QTextStream& xret = left(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_32(Smoke::Stack x) {
        // static QFlags<QCP::PlottingHint> operator|(QCP::PlottingHint, QCP::PlottingHint)
        QFlags<QCP::PlottingHint> xret = operator|((QCP::PlottingHint)x[1].s_enum,(QCP::PlottingHint)x[2].s_enum);
        x[0].s_uint = (uint)xret;
    }
    static void x_33(Smoke::Stack x) {
        // static QTextStream& noforcepoint(QTextStream&)
        QTextStream& xret = noforcepoint(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_34(Smoke::Stack x) {
        // static char* strncpy(char*, const char*, size_t)
        char* xret = strncpy((char*)x[1].s_class,(const char*)x[2].s_class,(size_t)x[3].s_ulong);
        x[0].s_class = (void*)xret;
    }
    static void x_35(Smoke::Stack x) {
        // static QTextStream& lowercasedigits(QTextStream&)
        QTextStream& xret = lowercasedigits(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_36(Smoke::Stack x) {
        // static const QCPRange operator*(const QCPRange&, double)
        const QCPRange xret = operator*(*(const QCPRange*)x[1].s_class,(double)x[2].s_double);
        x[0].s_class = (void*)new const QCPRange(xret);
    }
    static void x_37(Smoke::Stack x) {
        // static QTextStream& flush(QTextStream&)
        QTextStream& xret = flush(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_38(Smoke::Stack x) {
        // static char* strncat(char*, const char*, size_t)
        char* xret = strncat((char*)x[1].s_class,(const char*)x[2].s_class,(size_t)x[3].s_ulong);
        x[0].s_class = (void*)xret;
    }
    static void x_39(Smoke::Stack x) {
        // static QFlags<QCPPainter::PainterMode> operator|(QCPPainter::PainterMode, QFlags<QCPPainter::PainterMode>)
        QFlags<QCPPainter::PainterMode> xret = operator|((QCPPainter::PainterMode)x[1].s_enum,(QFlags<QCPPainter::PainterMode>)x[2].s_uint);
        x[0].s_uint = (uint)xret;
    }
    static void x_40(Smoke::Stack x) {
        // static QIncompatibleFlag operator|(QCP::PlottingHint, int)
        QIncompatibleFlag xret = operator|((QCP::PlottingHint)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)new QIncompatibleFlag(xret);
    }
    static void x_41(Smoke::Stack x) {
        // static int strcmp(const char*, const char*)
        int xret = strcmp((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_int = xret;
    }
    static void x_42(Smoke::Stack x) {
        // static void* memset(void*, int, size_t)
        void* xret = memset((void*)x[1].s_class,(int)x[2].s_int,(size_t)x[3].s_ulong);
        x[0].s_class = (void*)xret;
    }
    static void x_43(Smoke::Stack x) {
        // static QFlags<QCP::Interaction> operator|(QCP::Interaction, QFlags<QCP::Interaction>)
        QFlags<QCP::Interaction> xret = operator|((QCP::Interaction)x[1].s_enum,(QFlags<QCP::Interaction>)x[2].s_uint);
        x[0].s_uint = (uint)xret;
    }
    static void x_44(Smoke::Stack x) {
        // static QFlags<QCP::PlottingHint> operator|(QCP::PlottingHint, QFlags<QCP::PlottingHint>)
        QFlags<QCP::PlottingHint> xret = operator|((QCP::PlottingHint)x[1].s_enum,(QFlags<QCP::PlottingHint>)x[2].s_uint);
        x[0].s_uint = (uint)xret;
    }
    static void x_45(Smoke::Stack x) {
        // static QIncompatibleFlag operator|(QCPLegend::SelectablePart, int)
        QIncompatibleFlag xret = operator|((QCPLegend::SelectablePart)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)new QIncompatibleFlag(xret);
    }
    static void x_46(Smoke::Stack x) {
        // static size_t strspn(const char*, const char*)
        size_t xret = strspn((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_ulong = xret;
    }
    static void x_47(Smoke::Stack x) {
        // static QFlags<QCPLegend::SelectablePart> operator|(QCPLegend::SelectablePart, QCPLegend::SelectablePart)
        QFlags<QCPLegend::SelectablePart> xret = operator|((QCPLegend::SelectablePart)x[1].s_enum,(QCPLegend::SelectablePart)x[2].s_enum);
        x[0].s_uint = (uint)xret;
    }
    static void x_48(Smoke::Stack x) {
        // static QTextStream& ws(QTextStream&)
        QTextStream& xret = ws(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_49(Smoke::Stack x) {
        // static QIncompatibleFlag operator|(QCPAxis::AxisType, int)
        QIncompatibleFlag xret = operator|((QCPAxis::AxisType)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)new QIncompatibleFlag(xret);
    }
    static void x_50(Smoke::Stack x) {
        // static QFlags<QCPPainter::PainterMode> operator|(QCPPainter::PainterMode, QCPPainter::PainterMode)
        QFlags<QCPPainter::PainterMode> xret = operator|((QCPPainter::PainterMode)x[1].s_enum,(QCPPainter::PainterMode)x[2].s_enum);
        x[0].s_uint = (uint)xret;
    }
    static void x_51(Smoke::Stack x) {
        // static void* memccpy(void*, const void*, int, size_t)
        void* xret = memccpy((void*)x[1].s_class,(const void*)x[2].s_class,(int)x[3].s_int,(size_t)x[4].s_ulong);
        x[0].s_class = (void*)xret;
    }
    static void x_52(Smoke::Stack x) {
        // static void* memmove(void*, const void*, size_t)
        void* xret = memmove((void*)x[1].s_class,(const void*)x[2].s_class,(size_t)x[3].s_ulong);
        x[0].s_class = (void*)xret;
    }
    static void x_53(Smoke::Stack x) {
        // static QTextStream& forcepoint(QTextStream&)
        QTextStream& xret = forcepoint(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_54(Smoke::Stack x) {
        // static QTextStream& center(QTextStream&)
        QTextStream& xret = center(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_55(Smoke::Stack x) {
        // static char* strtok(char*, const char*)
        char* xret = strtok((char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    static void x_56(Smoke::Stack x) {
        // static const QCPRange operator+(const QCPRange&, double)
        const QCPRange xret = operator+(*(const QCPRange*)x[1].s_class,(double)x[2].s_double);
        x[0].s_class = (void*)new const QCPRange(xret);
    }
    static void x_57(Smoke::Stack x) {
        // static const QCPRange operator/(const QCPRange&, double)
        const QCPRange xret = operator/(*(const QCPRange*)x[1].s_class,(double)x[2].s_double);
        x[0].s_class = (void*)new const QCPRange(xret);
    }
    static void x_58(Smoke::Stack x) {
        // static QFlags<QCPLegend::SelectablePart> operator|(QCPLegend::SelectablePart, QFlags<QCPLegend::SelectablePart>)
        QFlags<QCPLegend::SelectablePart> xret = operator|((QCPLegend::SelectablePart)x[1].s_enum,(QFlags<QCPLegend::SelectablePart>)x[2].s_uint);
        x[0].s_uint = (uint)xret;
    }
    static void x_59(Smoke::Stack x) {
        // static QTextStream& reset(QTextStream&)
        QTextStream& xret = reset(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_60(Smoke::Stack x) {
        // static char* strcpy(char*, const char*)
        char* xret = strcpy((char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    static void x_61(Smoke::Stack x) {
        // static QFlags<QCPAxis::AxisType> operator|(QCPAxis::AxisType, QCPAxis::AxisType)
        QFlags<QCPAxis::AxisType> xret = operator|((QCPAxis::AxisType)x[1].s_enum,(QCPAxis::AxisType)x[2].s_enum);
        x[0].s_uint = (uint)xret;
    }
    static void x_62(Smoke::Stack x) {
        // static QTextStream& oct(QTextStream&)
        QTextStream& xret = oct(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_63(Smoke::Stack x) {
        // static QIncompatibleFlag operator|(QCP::MarginSide, int)
        QIncompatibleFlag xret = operator|((QCP::MarginSide)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)new QIncompatibleFlag(xret);
    }
    static void x_64(Smoke::Stack x) {
        // static int strcoll(const char*, const char*)
        int xret = strcoll((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_int = xret;
    }
    static void x_65(Smoke::Stack x) {
        // static char* strtok_r(char*, const char*, char**)
        char* xret = strtok_r((char*)x[1].s_class,(const char*)x[2].s_class,(char**)x[3].s_class);
        x[0].s_class = (void*)xret;
    }
    static void x_66(Smoke::Stack x) {
        // static QTextStream& endl(QTextStream&)
        QTextStream& xret = endl(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_67(Smoke::Stack x) {
        // static QFlags<QCP::MarginSide> operator|(QCP::MarginSide, QCP::MarginSide)
        QFlags<QCP::MarginSide> xret = operator|((QCP::MarginSide)x[1].s_enum,(QCP::MarginSide)x[2].s_enum);
        x[0].s_uint = (uint)xret;
    }
    static void x_68(Smoke::Stack x) {
        // static QFlags<QCPAxis::SelectablePart> operator|(QCPAxis::SelectablePart, QFlags<QCPAxis::SelectablePart>)
        QFlags<QCPAxis::SelectablePart> xret = operator|((QCPAxis::SelectablePart)x[1].s_enum,(QFlags<QCPAxis::SelectablePart>)x[2].s_uint);
        x[0].s_uint = (uint)xret;
    }
    static void x_69(Smoke::Stack x) {
        // static QFlags<QCP::Interaction> operator|(QCP::Interaction, QCP::Interaction)
        QFlags<QCP::Interaction> xret = operator|((QCP::Interaction)x[1].s_enum,(QCP::Interaction)x[2].s_enum);
        x[0].s_uint = (uint)xret;
    }
    static void x_70(Smoke::Stack x) {
        // static QTextStream& dec(QTextStream&)
        QTextStream& xret = dec(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_71(Smoke::Stack x) {
        // static const QCPRange operator+(double, const QCPRange&)
        const QCPRange xret = operator+((double)x[1].s_double,*(const QCPRange*)x[2].s_class);
        x[0].s_class = (void*)new const QCPRange(xret);
    }
    static void x_72(Smoke::Stack x) {
        // static QIncompatibleFlag operator|(QCP::AntialiasedElement, int)
        QIncompatibleFlag xret = operator|((QCP::AntialiasedElement)x[1].s_enum,(int)x[2].s_int);
        x[0].s_class = (void*)new QIncompatibleFlag(xret);
    }
    static void x_73(Smoke::Stack x) {
        // static QTextStream& hex(QTextStream&)
        QTextStream& xret = hex(*(QTextStream*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    static void x_74(Smoke::Stack x) {
        // static size_t strxfrm(char*, const char*, size_t)
        size_t xret = strxfrm((char*)x[1].s_class,(const char*)x[2].s_class,(size_t)x[3].s_ulong);
        x[0].s_ulong = xret;
    }
    ~x_QGlobalSpace() { this->_binding->deleted(63, (void*)this); }
};
void xcall_QGlobalSpace(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QGlobalSpace *xself = (x_QGlobalSpace*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QGlobalSpace::x_1(args);	break;
        case 2: x_QGlobalSpace::x_2(args);	break;
        case 3: x_QGlobalSpace::x_3(args);	break;
        case 4: x_QGlobalSpace::x_4(args);	break;
        case 5: x_QGlobalSpace::x_5(args);	break;
        case 6: x_QGlobalSpace::x_6(args);	break;
        case 7: x_QGlobalSpace::x_7(args);	break;
        case 8: x_QGlobalSpace::x_8(args);	break;
        case 9: x_QGlobalSpace::x_9(args);	break;
        case 10: x_QGlobalSpace::x_10(args);	break;
        case 11: x_QGlobalSpace::x_11(args);	break;
        case 12: x_QGlobalSpace::x_12(args);	break;
        case 13: x_QGlobalSpace::x_13(args);	break;
        case 14: x_QGlobalSpace::x_14(args);	break;
        case 15: x_QGlobalSpace::x_15(args);	break;
        case 16: x_QGlobalSpace::x_16(args);	break;
        case 17: x_QGlobalSpace::x_17(args);	break;
        case 18: x_QGlobalSpace::x_18(args);	break;
        case 19: x_QGlobalSpace::x_19(args);	break;
        case 20: x_QGlobalSpace::x_20(args);	break;
        case 21: x_QGlobalSpace::x_21(args);	break;
        case 22: x_QGlobalSpace::x_22(args);	break;
        case 23: x_QGlobalSpace::x_23(args);	break;
        case 24: x_QGlobalSpace::x_24(args);	break;
        case 25: x_QGlobalSpace::x_25(args);	break;
        case 26: x_QGlobalSpace::x_26(args);	break;
        case 27: x_QGlobalSpace::x_27(args);	break;
        case 28: x_QGlobalSpace::x_28(args);	break;
        case 29: x_QGlobalSpace::x_29(args);	break;
        case 30: x_QGlobalSpace::x_30(args);	break;
        case 31: x_QGlobalSpace::x_31(args);	break;
        case 32: x_QGlobalSpace::x_32(args);	break;
        case 33: x_QGlobalSpace::x_33(args);	break;
        case 34: x_QGlobalSpace::x_34(args);	break;
        case 35: x_QGlobalSpace::x_35(args);	break;
        case 36: x_QGlobalSpace::x_36(args);	break;
        case 37: x_QGlobalSpace::x_37(args);	break;
        case 38: x_QGlobalSpace::x_38(args);	break;
        case 39: x_QGlobalSpace::x_39(args);	break;
        case 40: x_QGlobalSpace::x_40(args);	break;
        case 41: x_QGlobalSpace::x_41(args);	break;
        case 42: x_QGlobalSpace::x_42(args);	break;
        case 43: x_QGlobalSpace::x_43(args);	break;
        case 44: x_QGlobalSpace::x_44(args);	break;
        case 45: x_QGlobalSpace::x_45(args);	break;
        case 46: x_QGlobalSpace::x_46(args);	break;
        case 47: x_QGlobalSpace::x_47(args);	break;
        case 48: x_QGlobalSpace::x_48(args);	break;
        case 49: x_QGlobalSpace::x_49(args);	break;
        case 50: x_QGlobalSpace::x_50(args);	break;
        case 51: x_QGlobalSpace::x_51(args);	break;
        case 52: x_QGlobalSpace::x_52(args);	break;
        case 53: x_QGlobalSpace::x_53(args);	break;
        case 54: x_QGlobalSpace::x_54(args);	break;
        case 55: x_QGlobalSpace::x_55(args);	break;
        case 56: x_QGlobalSpace::x_56(args);	break;
        case 57: x_QGlobalSpace::x_57(args);	break;
        case 58: x_QGlobalSpace::x_58(args);	break;
        case 59: x_QGlobalSpace::x_59(args);	break;
        case 60: x_QGlobalSpace::x_60(args);	break;
        case 61: x_QGlobalSpace::x_61(args);	break;
        case 62: x_QGlobalSpace::x_62(args);	break;
        case 63: x_QGlobalSpace::x_63(args);	break;
        case 64: x_QGlobalSpace::x_64(args);	break;
        case 65: x_QGlobalSpace::x_65(args);	break;
        case 66: x_QGlobalSpace::x_66(args);	break;
        case 67: x_QGlobalSpace::x_67(args);	break;
        case 68: x_QGlobalSpace::x_68(args);	break;
        case 69: x_QGlobalSpace::x_69(args);	break;
        case 70: x_QGlobalSpace::x_70(args);	break;
        case 71: x_QGlobalSpace::x_71(args);	break;
        case 72: x_QGlobalSpace::x_72(args);	break;
        case 73: x_QGlobalSpace::x_73(args);	break;
        case 74: x_QGlobalSpace::x_74(args);	break;
    }
}

}
