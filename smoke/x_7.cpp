//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPItemPixmap : public QCPItemPixmap, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemPixmap*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemPixmap*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemPixmap*>(this))) {
            void* xret = this->QCPItemPixmap::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemPixmap::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemPixmap::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemPixmap::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemPixmap::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemPixmap*>(this))) {
            int xret = this->QCPItemPixmap::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemPixmap* QCPItemPixmap(QCustomPlot*)
        x_QCPItemPixmap* xret = new x_QCPItemPixmap((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemPixmap(QCustomPlot* x1) : QCPItemPixmap(x1) {}
    void x_9(Smoke::Stack x) {
        // QPixmap pixmap() const
        QPixmap xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::pixmap();
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_10(Smoke::Stack x) {
        // bool scaled() const
        bool xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::scaled();
        x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) {
        // Qt::AspectRatioMode aspectRatioMode() const
        Qt::AspectRatioMode xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::aspectRatioMode();
        x[0].s_enum = xret;
    }
    void x_12(Smoke::Stack x) {
        // Qt::TransformationMode transformationMode() const
        Qt::TransformationMode xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::transformationMode();
        x[0].s_enum = xret;
    }
    void x_13(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_14(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_15(Smoke::Stack x) {
        // void setPixmap(const QPixmap&)
        this->QCPItemPixmap::setPixmap(*(const QPixmap*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setScaled(bool, Qt::AspectRatioMode, Qt::TransformationMode)
        this->QCPItemPixmap::setScaled((bool)x[1].s_bool,(Qt::AspectRatioMode)x[2].s_enum,(Qt::TransformationMode)x[3].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemPixmap::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemPixmap::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemPixmap*>(this))) {
            double xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemPixmap*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_20(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemPixmap*>(this))) {
            this->QCPItemPixmap::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_21(Smoke::Stack x) {
        // virtual QPointF anchorPixelPoint(int) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemPixmap*>(this))) {
            QPointF xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        } else {
            QPointF xret = ((const x_QCPItemPixmap*)this)->anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        }
    }
    void x_22(Smoke::Stack x) {
        // void updateScaledPixmap(QRect, bool, bool)
        this->QCPItemPixmap::updateScaledPixmap(*(QRect*)x[1].s_class,(bool)x[2].s_bool,(bool)x[3].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // QRect getFinalRect(bool*, bool*) const
        QRect xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::getFinalRect((bool*)x[1].s_class,(bool*)x[2].s_class);
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_24(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    static void x_25(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemPixmap::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_26(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemPixmap::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_27(Smoke::Stack x) {
        // void setScaled(bool)
        this->QCPItemPixmap::setScaled((bool)x[1].s_bool,(Qt::AspectRatioMode)Qt::KeepAspectRatio,(Qt::TransformationMode)Qt::SmoothTransformation);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void setScaled(bool, Qt::AspectRatioMode)
        this->QCPItemPixmap::setScaled((bool)x[1].s_bool,(Qt::AspectRatioMode)x[2].s_enum,(Qt::TransformationMode)Qt::SmoothTransformation);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    void x_30(Smoke::Stack x) {
        // void updateScaledPixmap()
        this->QCPItemPixmap::updateScaledPixmap((QRect)QRect(),(bool)false,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void updateScaledPixmap(QRect)
        this->QCPItemPixmap::updateScaledPixmap(*(QRect*)x[1].s_class,(bool)false,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void updateScaledPixmap(QRect, bool)
        this->QCPItemPixmap::updateScaledPixmap(*(QRect*)x[1].s_class,(bool)x[2].s_bool,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // QRect getFinalRect() const
        QRect xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::getFinalRect((bool*)0,(bool*)0);
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_34(Smoke::Stack x) {
        // QRect getFinalRect(bool*) const
        QRect xret = ((const x_QCPItemPixmap*)this)->QCPItemPixmap::getFinalRect((bool*)x[1].s_class,(bool*)0);
        x[0].s_class = (void*)new QRect(xret);
    }
    static void x_35(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemPixmap::staticMetaObject;
    }
    void x_36(Smoke::Stack x) {
        // QPixmap mPixmap
        x[0].s_class = (void*)&this->QCPItemPixmap::mPixmap;
    }
    void x_37(Smoke::Stack x) {
        // QPixmap mPixmap=
        this->QCPItemPixmap::mPixmap = *(const QPixmap*)x[1].s_class;
    }
    void x_38(Smoke::Stack x) {
        // QPixmap mScaledPixmap
        x[0].s_class = (void*)&this->QCPItemPixmap::mScaledPixmap;
    }
    void x_39(Smoke::Stack x) {
        // QPixmap mScaledPixmap=
        this->QCPItemPixmap::mScaledPixmap = *(const QPixmap*)x[1].s_class;
    }
    void x_40(Smoke::Stack x) {
        // bool mScaled
        x[0].s_bool = this->QCPItemPixmap::mScaled;
    }
    void x_41(Smoke::Stack x) {
        // bool mScaled=
        this->QCPItemPixmap::mScaled = (bool)x[1].s_bool;
    }
    void x_42(Smoke::Stack x) {
        // Qt::AspectRatioMode mAspectRatioMode
        x[0].s_enum = this->QCPItemPixmap::mAspectRatioMode;
    }
    void x_43(Smoke::Stack x) {
        // Qt::AspectRatioMode mAspectRatioMode=
        this->QCPItemPixmap::mAspectRatioMode = (Qt::AspectRatioMode)x[1].s_enum;
    }
    void x_44(Smoke::Stack x) {
        // Qt::TransformationMode mTransformationMode
        x[0].s_enum = this->QCPItemPixmap::mTransformationMode;
    }
    void x_45(Smoke::Stack x) {
        // Qt::TransformationMode mTransformationMode=
        this->QCPItemPixmap::mTransformationMode = (Qt::TransformationMode)x[1].s_enum;
    }
    void x_46(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemPixmap::mPen;
    }
    void x_47(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemPixmap::mPen = *(const QPen*)x[1].s_class;
    }
    void x_48(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemPixmap::mSelectedPen;
    }
    void x_49(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemPixmap::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    static void x_50(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPixmap::aiTop;
    }
    static void x_51(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPixmap::aiTopRight;
    }
    static void x_52(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPixmap::aiRight;
    }
    static void x_53(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPixmap::aiBottom;
    }
    static void x_54(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPixmap::aiBottomLeft;
    }
    static void x_55(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPixmap::aiLeft;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1413, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemPixmap::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1414, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemPixmap::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1419, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemPixmap::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1431, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemPixmap::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1432, (void*)this, x)) return;
        this->QCPItemPixmap::draw(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1433, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPItemPixmap::anchorPixelPoint(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 69: //QCPItemPixmap::AnchorIndex
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPItemPixmap::AnchorIndex;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPItemPixmap::AnchorIndex*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPItemPixmap::AnchorIndex*)xdata = (QCPItemPixmap::AnchorIndex)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPItemPixmap::AnchorIndex*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPItemPixmap() { this->_binding->deleted(30, (void*)this); }
};
void xenum_QCPItemPixmap(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPItemPixmap::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPItemPixmap(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemPixmap *xself = (x_QCPItemPixmap*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemPixmap::x_3(args);	break;
        case 4: x_QCPItemPixmap::x_4(args);	break;
        case 5: x_QCPItemPixmap::x_5(args);	break;
        case 6: x_QCPItemPixmap::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemPixmap::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: x_QCPItemPixmap::x_25(args);	break;
        case 26: x_QCPItemPixmap::x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: x_QCPItemPixmap::x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: x_QCPItemPixmap::x_50(args);	break;
        case 51: x_QCPItemPixmap::x_51(args);	break;
        case 52: x_QCPItemPixmap::x_52(args);	break;
        case 53: x_QCPItemPixmap::x_53(args);	break;
        case 54: x_QCPItemPixmap::x_54(args);	break;
        case 55: x_QCPItemPixmap::x_55(args);	break;
        case 56: delete (QCPItemPixmap*)xself;	break;
    }
}
class x_QCPItemPosition : public QCPItemPosition, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPItemPosition* QCPItemPosition(QCustomPlot*, QCPAbstractItem*, const QString)
        x_QCPItemPosition* xret = new x_QCPItemPosition((QCustomPlot*)x[1].s_class,(QCPAbstractItem*)x[2].s_class,*(const QString*)x[3].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemPosition(QCustomPlot* x1, QCPAbstractItem* x2, const QString x3) : QCPItemPosition(x1, x2, x3) {}
    void x_2(Smoke::Stack x) {
        // QCPItemPosition::PositionType type() const
        QCPItemPosition::PositionType xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::type();
        x[0].s_enum = xret;
    }
    void x_3(Smoke::Stack x) {
        // QCPItemPosition::PositionType typeX() const
        QCPItemPosition::PositionType xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::typeX();
        x[0].s_enum = xret;
    }
    void x_4(Smoke::Stack x) {
        // QCPItemPosition::PositionType typeY() const
        QCPItemPosition::PositionType xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::typeY();
        x[0].s_enum = xret;
    }
    void x_5(Smoke::Stack x) {
        // QCPItemAnchor* parentAnchor() const
        QCPItemAnchor* xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::parentAnchor();
        x[0].s_class = (void*)xret;
    }
    void x_6(Smoke::Stack x) {
        // QCPItemAnchor* parentAnchorX() const
        QCPItemAnchor* xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::parentAnchorX();
        x[0].s_class = (void*)xret;
    }
    void x_7(Smoke::Stack x) {
        // QCPItemAnchor* parentAnchorY() const
        QCPItemAnchor* xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::parentAnchorY();
        x[0].s_class = (void*)xret;
    }
    void x_8(Smoke::Stack x) {
        // double key() const
        double xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::key();
        x[0].s_double = xret;
    }
    void x_9(Smoke::Stack x) {
        // double value() const
        double xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::value();
        x[0].s_double = xret;
    }
    void x_10(Smoke::Stack x) {
        // QPointF coords() const
        QPointF xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::coords();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_11(Smoke::Stack x) {
        // QCPAxis* keyAxis() const
        QCPAxis* xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::keyAxis();
        x[0].s_class = (void*)xret;
    }
    void x_12(Smoke::Stack x) {
        // QCPAxis* valueAxis() const
        QCPAxis* xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::valueAxis();
        x[0].s_class = (void*)xret;
    }
    void x_13(Smoke::Stack x) {
        // QCPAxisRect* axisRect() const
        QCPAxisRect* xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::axisRect();
        x[0].s_class = (void*)xret;
    }
    void x_14(Smoke::Stack x) {
        // virtual QPointF pixelPoint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemPosition*>(this))) {
            QPointF xret = ((const x_QCPItemPosition*)this)->QCPItemPosition::pixelPoint();
            x[0].s_class = (void*)new QPointF(xret);
        } else {
            QPointF xret = ((const x_QCPItemPosition*)this)->pixelPoint();
            x[0].s_class = (void*)new QPointF(xret);
        }
    }
    void x_15(Smoke::Stack x) {
        // void setType(QCPItemPosition::PositionType)
        this->QCPItemPosition::setType((QCPItemPosition::PositionType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setTypeX(QCPItemPosition::PositionType)
        this->QCPItemPosition::setTypeX((QCPItemPosition::PositionType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setTypeY(QCPItemPosition::PositionType)
        this->QCPItemPosition::setTypeY((QCPItemPosition::PositionType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // bool setParentAnchor(QCPItemAnchor*, bool)
        bool xret = this->QCPItemPosition::setParentAnchor((QCPItemAnchor*)x[1].s_class,(bool)x[2].s_bool);
        x[0].s_bool = xret;
    }
    void x_19(Smoke::Stack x) {
        // bool setParentAnchorX(QCPItemAnchor*, bool)
        bool xret = this->QCPItemPosition::setParentAnchorX((QCPItemAnchor*)x[1].s_class,(bool)x[2].s_bool);
        x[0].s_bool = xret;
    }
    void x_20(Smoke::Stack x) {
        // bool setParentAnchorY(QCPItemAnchor*, bool)
        bool xret = this->QCPItemPosition::setParentAnchorY((QCPItemAnchor*)x[1].s_class,(bool)x[2].s_bool);
        x[0].s_bool = xret;
    }
    void x_21(Smoke::Stack x) {
        // void setCoords(double, double)
        this->QCPItemPosition::setCoords((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setCoords(const QPointF&)
        this->QCPItemPosition::setCoords(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setAxes(QCPAxis*, QCPAxis*)
        this->QCPItemPosition::setAxes((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setAxisRect(QCPAxisRect*)
        this->QCPItemPosition::setAxisRect((QCPAxisRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setPixelPoint(const QPointF&)
        this->QCPItemPosition::setPixelPoint(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // virtual QCPItemPosition* toQCPItemPosition()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemPosition*>(this))) {
            QCPItemPosition* xret = this->QCPItemPosition::toQCPItemPosition();
            x[0].s_class = (void*)xret;
        } else {
            QCPItemPosition* xret = this->toQCPItemPosition();
            x[0].s_class = (void*)xret;
        }
    }
    void x_27(Smoke::Stack x) {
        // bool setParentAnchor(QCPItemAnchor*)
        bool xret = this->QCPItemPosition::setParentAnchor((QCPItemAnchor*)x[1].s_class,(bool)false);
        x[0].s_bool = xret;
    }
    void x_28(Smoke::Stack x) {
        // bool setParentAnchorX(QCPItemAnchor*)
        bool xret = this->QCPItemPosition::setParentAnchorX((QCPItemAnchor*)x[1].s_class,(bool)false);
        x[0].s_bool = xret;
    }
    void x_29(Smoke::Stack x) {
        // bool setParentAnchorY(QCPItemAnchor*)
        bool xret = this->QCPItemPosition::setParentAnchorY((QCPItemAnchor*)x[1].s_class,(bool)false);
        x[0].s_bool = xret;
    }
    void x_30(Smoke::Stack x) {
        // QCPItemPosition::PositionType mPositionTypeX
        x[0].s_enum = this->QCPItemPosition::mPositionTypeX;
    }
    void x_31(Smoke::Stack x) {
        // QCPItemPosition::PositionType mPositionTypeX=
        this->QCPItemPosition::mPositionTypeX = (QCPItemPosition::PositionType)x[1].s_enum;
    }
    void x_32(Smoke::Stack x) {
        // QCPItemPosition::PositionType mPositionTypeY
        x[0].s_enum = this->QCPItemPosition::mPositionTypeY;
    }
    void x_33(Smoke::Stack x) {
        // QCPItemPosition::PositionType mPositionTypeY=
        this->QCPItemPosition::mPositionTypeY = (QCPItemPosition::PositionType)x[1].s_enum;
    }
    void x_34(Smoke::Stack x) {
        // QPointer<QCPAxis> mKeyAxis
        x[0].s_class = (void*)&this->QCPItemPosition::mKeyAxis;
    }
    void x_35(Smoke::Stack x) {
        // QPointer<QCPAxis> mKeyAxis=
        this->QCPItemPosition::mKeyAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    void x_36(Smoke::Stack x) {
        // QPointer<QCPAxis> mValueAxis
        x[0].s_class = (void*)&this->QCPItemPosition::mValueAxis;
    }
    void x_37(Smoke::Stack x) {
        // QPointer<QCPAxis> mValueAxis=
        this->QCPItemPosition::mValueAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    void x_38(Smoke::Stack x) {
        // QPointer<QCPAxisRect> mAxisRect
        x[0].s_class = (void*)&this->QCPItemPosition::mAxisRect;
    }
    void x_39(Smoke::Stack x) {
        // QPointer<QCPAxisRect> mAxisRect=
        this->QCPItemPosition::mAxisRect = *(const QPointer<QCPAxisRect>*)x[1].s_class;
    }
    void x_40(Smoke::Stack x) {
        // double mKey
        x[0].s_double = this->QCPItemPosition::mKey;
    }
    void x_41(Smoke::Stack x) {
        // double mKey=
        this->QCPItemPosition::mKey = (double)x[1].s_double;
    }
    void x_42(Smoke::Stack x) {
        // double mValue
        x[0].s_double = this->QCPItemPosition::mValue;
    }
    void x_43(Smoke::Stack x) {
        // double mValue=
        this->QCPItemPosition::mValue = (double)x[1].s_double;
    }
    void x_44(Smoke::Stack x) {
        // QCPItemAnchor* mParentAnchorX
        x[0].s_class = (void*)this->QCPItemPosition::mParentAnchorX;
    }
    void x_45(Smoke::Stack x) {
        // QCPItemAnchor* mParentAnchorX=
        this->QCPItemPosition::mParentAnchorX = (QCPItemAnchor*)x[1].s_class;
    }
    void x_46(Smoke::Stack x) {
        // QCPItemAnchor* mParentAnchorY
        x[0].s_class = (void*)this->QCPItemPosition::mParentAnchorY;
    }
    void x_47(Smoke::Stack x) {
        // QCPItemAnchor* mParentAnchorY=
        this->QCPItemPosition::mParentAnchorY = (QCPItemAnchor*)x[1].s_class;
    }
    static void x_48(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPosition::ptAbsolute;
    }
    static void x_49(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPosition::ptViewportRatio;
    }
    static void x_50(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPosition::ptAxisRectRatio;
    }
    static void x_51(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemPosition::ptPlotCoords;
    }
    virtual QPointF pixelPoint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1482, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPItemPosition::pixelPoint();
    }
    virtual QCPItemPosition* toQCPItemPosition() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1494, (void*)this, x)) return (QCPItemPosition*)x[0].s_class;
        return this->QCPItemPosition::toQCPItemPosition();
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 71: //QCPItemPosition::PositionType
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPItemPosition::PositionType;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPItemPosition::PositionType*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPItemPosition::PositionType*)xdata = (QCPItemPosition::PositionType)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPItemPosition::PositionType*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPItemPosition() { this->_binding->deleted(31, (void*)this); }
};
void xenum_QCPItemPosition(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPItemPosition::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPItemPosition(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemPosition *xself = (x_QCPItemPosition*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPItemPosition::x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: x_QCPItemPosition::x_48(args);	break;
        case 49: x_QCPItemPosition::x_49(args);	break;
        case 50: x_QCPItemPosition::x_50(args);	break;
        case 51: x_QCPItemPosition::x_51(args);	break;
        case 52: delete (QCPItemPosition*)xself;	break;
    }
}
class x_QCPItemRect : public QCPItemRect, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemRect*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemRect*)this)->QCPItemRect::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemRect*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemRect*>(this))) {
            void* xret = this->QCPItemRect::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemRect::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemRect::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemRect::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemRect::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemRect*>(this))) {
            int xret = this->QCPItemRect::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemRect* QCPItemRect(QCustomPlot*)
        x_QCPItemRect* xret = new x_QCPItemRect((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemRect(QCustomPlot* x1) : QCPItemRect(x1) {}
    void x_9(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemRect*)this)->QCPItemRect::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_10(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemRect*)this)->QCPItemRect::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_11(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QCPItemRect*)this)->QCPItemRect::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_12(Smoke::Stack x) {
        // QBrush selectedBrush() const
        QBrush xret = ((const x_QCPItemRect*)this)->QCPItemRect::selectedBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_13(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemRect::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemRect::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QCPItemRect::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setSelectedBrush(const QBrush&)
        this->QCPItemRect::setSelectedBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemRect*>(this))) {
            double xret = ((const x_QCPItemRect*)this)->QCPItemRect::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemRect*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_18(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemRect*>(this))) {
            this->QCPItemRect::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_19(Smoke::Stack x) {
        // virtual QPointF anchorPixelPoint(int) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemRect*>(this))) {
            QPointF xret = ((const x_QCPItemRect*)this)->QCPItemRect::anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        } else {
            QPointF xret = ((const x_QCPItemRect*)this)->anchorPixelPoint((int)x[1].s_int);
            x[0].s_class = (void*)new QPointF(xret);
        }
    }
    void x_20(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemRect*)this)->QCPItemRect::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_21(Smoke::Stack x) {
        // QBrush mainBrush() const
        QBrush xret = ((const x_QCPItemRect*)this)->QCPItemRect::mainBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    static void x_22(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemRect::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_23(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemRect::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_24(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemRect*)this)->QCPItemRect::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_25(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemRect::staticMetaObject;
    }
    void x_26(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemRect::mPen;
    }
    void x_27(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemRect::mPen = *(const QPen*)x[1].s_class;
    }
    void x_28(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemRect::mSelectedPen;
    }
    void x_29(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemRect::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    void x_30(Smoke::Stack x) {
        // QBrush mBrush
        x[0].s_class = (void*)&this->QCPItemRect::mBrush;
    }
    void x_31(Smoke::Stack x) {
        // QBrush mBrush=
        this->QCPItemRect::mBrush = *(const QBrush*)x[1].s_class;
    }
    void x_32(Smoke::Stack x) {
        // QBrush mSelectedBrush
        x[0].s_class = (void*)&this->QCPItemRect::mSelectedBrush;
    }
    void x_33(Smoke::Stack x) {
        // QBrush mSelectedBrush=
        this->QCPItemRect::mSelectedBrush = *(const QBrush*)x[1].s_class;
    }
    static void x_34(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemRect::aiTop;
    }
    static void x_35(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemRect::aiTopRight;
    }
    static void x_36(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemRect::aiRight;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemRect::aiBottom;
    }
    static void x_38(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemRect::aiBottomLeft;
    }
    static void x_39(Smoke::Stack x) {
        x[0].s_enum = (long)QCPItemRect::aiLeft;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1521, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemRect::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1522, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemRect::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1527, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemRect::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1537, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemRect::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1538, (void*)this, x)) return;
        this->QCPItemRect::draw(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1539, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPItemRect::anchorPixelPoint(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 73: //QCPItemRect::AnchorIndex
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPItemRect::AnchorIndex;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPItemRect::AnchorIndex*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPItemRect::AnchorIndex*)xdata = (QCPItemRect::AnchorIndex)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPItemRect::AnchorIndex*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPItemRect() { this->_binding->deleted(32, (void*)this); }
};
void xenum_QCPItemRect(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPItemRect::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPItemRect(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemRect *xself = (x_QCPItemRect*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemRect::x_3(args);	break;
        case 4: x_QCPItemRect::x_4(args);	break;
        case 5: x_QCPItemRect::x_5(args);	break;
        case 6: x_QCPItemRect::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemRect::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: x_QCPItemRect::x_22(args);	break;
        case 23: x_QCPItemRect::x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: x_QCPItemRect::x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: x_QCPItemRect::x_34(args);	break;
        case 35: x_QCPItemRect::x_35(args);	break;
        case 36: x_QCPItemRect::x_36(args);	break;
        case 37: x_QCPItemRect::x_37(args);	break;
        case 38: x_QCPItemRect::x_38(args);	break;
        case 39: x_QCPItemRect::x_39(args);	break;
        case 40: delete (QCPItemRect*)xself;	break;
    }
}
class x_QCPItemStraightLine : public QCPItemStraightLine, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemStraightLine*>(this))) {
            const QMetaObject* xret = ((const x_QCPItemStraightLine*)this)->QCPItemStraightLine::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPItemStraightLine*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemStraightLine*>(this))) {
            void* xret = this->QCPItemStraightLine::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPItemStraightLine::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPItemStraightLine::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPItemStraightLine::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPItemStraightLine::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemStraightLine*>(this))) {
            int xret = this->QCPItemStraightLine::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPItemStraightLine* QCPItemStraightLine(QCustomPlot*)
        x_QCPItemStraightLine* xret = new x_QCPItemStraightLine((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemStraightLine(QCustomPlot* x1) : QCPItemStraightLine(x1) {}
    void x_9(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPItemStraightLine*)this)->QCPItemStraightLine::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_10(Smoke::Stack x) {
        // QPen selectedPen() const
        QPen xret = ((const x_QCPItemStraightLine*)this)->QCPItemStraightLine::selectedPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_11(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPItemStraightLine::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void setSelectedPen(const QPen&)
        this->QCPItemStraightLine::setSelectedPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemStraightLine*>(this))) {
            double xret = ((const x_QCPItemStraightLine*)this)->QCPItemStraightLine::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPItemStraightLine*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_14(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemStraightLine*>(this))) {
            this->QCPItemStraightLine::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_15(Smoke::Stack x) {
        // double distToStraightLine(const QVector2D&, const QVector2D&, const QVector2D&) const
        double xret = ((const x_QCPItemStraightLine*)this)->QCPItemStraightLine::distToStraightLine(*(const QVector2D*)x[1].s_class,*(const QVector2D*)x[2].s_class,*(const QVector2D*)x[3].s_class);
        x[0].s_double = xret;
    }
    void x_16(Smoke::Stack x) {
        // QLineF getRectClippedStraightLine(const QVector2D&, const QVector2D&, const QRect&) const
        QLineF xret = ((const x_QCPItemStraightLine*)this)->QCPItemStraightLine::getRectClippedStraightLine(*(const QVector2D*)x[1].s_class,*(const QVector2D*)x[2].s_class,*(const QRect*)x[3].s_class);
        x[0].s_class = (void*)new QLineF(xret);
    }
    void x_17(Smoke::Stack x) {
        // QPen mainPen() const
        QPen xret = ((const x_QCPItemStraightLine*)this)->QCPItemStraightLine::mainPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    static void x_18(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPItemStraightLine::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_19(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPItemStraightLine::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_20(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPItemStraightLine*)this)->QCPItemStraightLine::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_21(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPItemStraightLine::staticMetaObject;
    }
    void x_22(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPItemStraightLine::mPen;
    }
    void x_23(Smoke::Stack x) {
        // QPen mPen=
        this->QCPItemStraightLine::mPen = *(const QPen*)x[1].s_class;
    }
    void x_24(Smoke::Stack x) {
        // QPen mSelectedPen
        x[0].s_class = (void*)&this->QCPItemStraightLine::mSelectedPen;
    }
    void x_25(Smoke::Stack x) {
        // QPen mSelectedPen=
        this->QCPItemStraightLine::mSelectedPen = *(const QPen*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1561, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPItemStraightLine::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1562, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPItemStraightLine::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1567, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPItemStraightLine::qt_metacall(x1, x2, x3);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1573, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPItemStraightLine::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1574, (void*)this, x)) return;
        this->QCPItemStraightLine::draw(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(25, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractItem::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(26, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::clipRect();
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(27, (void*)this, x)) return;
        this->QCPAbstractItem::applyDefaultAntialiasingHint(x1);
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(29, (void*)this, x)) return;
        this->QCPAbstractItem::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QCPAbstractItem::deselectEvent(x1);
    }
    virtual QPointF anchorPixelPoint(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(31, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractItem::anchorPixelPoint(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPItemStraightLine() { this->_binding->deleted(33, (void*)this); }
};
void xcall_QCPItemStraightLine(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemStraightLine *xself = (x_QCPItemStraightLine*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPItemStraightLine::x_3(args);	break;
        case 4: x_QCPItemStraightLine::x_4(args);	break;
        case 5: x_QCPItemStraightLine::x_5(args);	break;
        case 6: x_QCPItemStraightLine::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPItemStraightLine::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: x_QCPItemStraightLine::x_18(args);	break;
        case 19: x_QCPItemStraightLine::x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: x_QCPItemStraightLine::x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: delete (QCPItemStraightLine*)xself;	break;
    }
}

}
