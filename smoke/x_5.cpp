//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPFinancialData : public QCPFinancialData {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPFinancialData* QCPFinancialData()
        x_QCPFinancialData* xret = new x_QCPFinancialData();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPFinancialData() : QCPFinancialData() {}
    static void x_2(Smoke::Stack x) {
        // QCPFinancialData* QCPFinancialData(double, double, double, double, double)
        x_QCPFinancialData* xret = new x_QCPFinancialData((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPFinancialData(double x1, double x2, double x3, double x4, double x5) : QCPFinancialData(x1, x2, x3, x4, x5) {}
    static void x_3(Smoke::Stack x) {
        // QCPFinancialData* QCPFinancialData(const QCPFinancialData&)
        x_QCPFinancialData* xret = new x_QCPFinancialData(*(const QCPFinancialData*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPFinancialData(const QCPFinancialData& x1) : QCPFinancialData(x1) {}
    void x_4(Smoke::Stack x) {
        // double key
        x[0].s_double = this->QCPFinancialData::key;
    }
    void x_5(Smoke::Stack x) {
        // double key=
        this->QCPFinancialData::key = (double)x[1].s_double;
    }
    void x_6(Smoke::Stack x) {
        // double open
        x[0].s_double = this->QCPFinancialData::open;
    }
    void x_7(Smoke::Stack x) {
        // double open=
        this->QCPFinancialData::open = (double)x[1].s_double;
    }
    void x_8(Smoke::Stack x) {
        // double high
        x[0].s_double = this->QCPFinancialData::high;
    }
    void x_9(Smoke::Stack x) {
        // double high=
        this->QCPFinancialData::high = (double)x[1].s_double;
    }
    void x_10(Smoke::Stack x) {
        // double low
        x[0].s_double = this->QCPFinancialData::low;
    }
    void x_11(Smoke::Stack x) {
        // double low=
        this->QCPFinancialData::low = (double)x[1].s_double;
    }
    void x_12(Smoke::Stack x) {
        // double close
        x[0].s_double = this->QCPFinancialData::close;
    }
    void x_13(Smoke::Stack x) {
        // double close=
        this->QCPFinancialData::close = (double)x[1].s_double;
    }
    ~x_QCPFinancialData() { this->_binding->deleted(22, (void*)this); }
};
void xcall_QCPFinancialData(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPFinancialData *xself = (x_QCPFinancialData*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPFinancialData::x_1(args);	break;
        case 2: x_QCPFinancialData::x_2(args);	break;
        case 3: x_QCPFinancialData::x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: delete (QCPFinancialData*)xself;	break;
    }
}
class x_QCPGraph : public QCPGraph, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            const QMetaObject* xret = ((const x_QCPGraph*)this)->QCPGraph::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPGraph*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            void* xret = this->QCPGraph::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPGraph::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPGraph::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPGraph::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPGraph::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            int xret = this->QCPGraph::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPGraph* QCPGraph(QCPAxis*, QCPAxis*)
        x_QCPGraph* xret = new x_QCPGraph((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPGraph(QCPAxis* x1, QCPAxis* x2) : QCPGraph(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QMap<double,QCPData>* data() const
        QMap<double,QCPData>* xret = ((const x_QCPGraph*)this)->QCPGraph::data();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QCPGraph::LineStyle lineStyle() const
        QCPGraph::LineStyle xret = ((const x_QCPGraph*)this)->QCPGraph::lineStyle();
        x[0].s_enum = xret;
    }
    void x_11(Smoke::Stack x) {
        // QCPScatterStyle scatterStyle() const
        QCPScatterStyle xret = ((const x_QCPGraph*)this)->QCPGraph::scatterStyle();
        x[0].s_class = (void*)new QCPScatterStyle(xret);
    }
    void x_12(Smoke::Stack x) {
        // QCPGraph::ErrorType errorType() const
        QCPGraph::ErrorType xret = ((const x_QCPGraph*)this)->QCPGraph::errorType();
        x[0].s_enum = xret;
    }
    void x_13(Smoke::Stack x) {
        // QPen errorPen() const
        QPen xret = ((const x_QCPGraph*)this)->QCPGraph::errorPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_14(Smoke::Stack x) {
        // double errorBarSize() const
        double xret = ((const x_QCPGraph*)this)->QCPGraph::errorBarSize();
        x[0].s_double = xret;
    }
    void x_15(Smoke::Stack x) {
        // bool errorBarSkipSymbol() const
        bool xret = ((const x_QCPGraph*)this)->QCPGraph::errorBarSkipSymbol();
        x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) {
        // QCPGraph* channelFillGraph() const
        QCPGraph* xret = ((const x_QCPGraph*)this)->QCPGraph::channelFillGraph();
        x[0].s_class = (void*)xret;
    }
    void x_17(Smoke::Stack x) {
        // bool adaptiveSampling() const
        bool xret = ((const x_QCPGraph*)this)->QCPGraph::adaptiveSampling();
        x[0].s_bool = xret;
    }
    void x_18(Smoke::Stack x) {
        // void setData(QMap<double,QCPData>*, bool)
        this->QCPGraph::setData((QMap<double,QCPData>*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setData(const QVector<double>&, const QVector<double>&)
        this->QCPGraph::setData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setDataKeyError(const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPGraph::setDataKeyError(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setDataKeyError(const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPGraph::setDataKeyError(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class,*(const QVector<double>*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setDataValueError(const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPGraph::setDataValueError(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setDataValueError(const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPGraph::setDataValueError(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class,*(const QVector<double>*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setDataBothError(const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPGraph::setDataBothError(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class,*(const QVector<double>*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setDataBothError(const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&, const QVector<double>&)
        this->QCPGraph::setDataBothError(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class,*(const QVector<double>*)x[3].s_class,*(const QVector<double>*)x[4].s_class,*(const QVector<double>*)x[5].s_class,*(const QVector<double>*)x[6].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setLineStyle(QCPGraph::LineStyle)
        this->QCPGraph::setLineStyle((QCPGraph::LineStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setScatterStyle(const QCPScatterStyle&)
        this->QCPGraph::setScatterStyle(*(const QCPScatterStyle*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void setErrorType(QCPGraph::ErrorType)
        this->QCPGraph::setErrorType((QCPGraph::ErrorType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void setErrorPen(const QPen&)
        this->QCPGraph::setErrorPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void setErrorBarSize(double)
        this->QCPGraph::setErrorBarSize((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void setErrorBarSkipSymbol(bool)
        this->QCPGraph::setErrorBarSkipSymbol((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void setChannelFillGraph(QCPGraph*)
        this->QCPGraph::setChannelFillGraph((QCPGraph*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // void setAdaptiveSampling(bool)
        this->QCPGraph::setAdaptiveSampling((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // void addData(const QMap<double,QCPData>&)
        this->QCPGraph::addData(*(const QMap<double,QCPData>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
        // void addData(const QCPData&)
        this->QCPGraph::addData(*(const QCPData*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
        // void addData(double, double)
        this->QCPGraph::addData((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
        // void addData(const QVector<double>&, const QVector<double>&)
        this->QCPGraph::addData(*(const QVector<double>*)x[1].s_class,*(const QVector<double>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_38(Smoke::Stack x) {
        // void removeDataBefore(double)
        this->QCPGraph::removeDataBefore((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_39(Smoke::Stack x) {
        // void removeDataAfter(double)
        this->QCPGraph::removeDataAfter((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_40(Smoke::Stack x) {
        // void removeData(double, double)
        this->QCPGraph::removeData((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_41(Smoke::Stack x) {
        // void removeData(double)
        this->QCPGraph::removeData((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_42(Smoke::Stack x) {
        // virtual void clearData()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            this->QCPGraph::clearData();
            (void)x; // noop (for compiler warning)
        } else {
            this->clearData();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_43(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            double xret = ((const x_QCPGraph*)this)->QCPGraph::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPGraph*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_44(Smoke::Stack x) {
        // void rescaleAxes(bool) const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleAxes((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_45(Smoke::Stack x) {
        // void rescaleKeyAxis(bool) const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleKeyAxis((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_46(Smoke::Stack x) {
        // void rescaleValueAxis(bool) const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleValueAxis((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_47(Smoke::Stack x) {
        // void rescaleAxes(bool, bool) const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleAxes((bool)x[1].s_bool,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_48(Smoke::Stack x) {
        // void rescaleKeyAxis(bool, bool) const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleKeyAxis((bool)x[1].s_bool,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_49(Smoke::Stack x) {
        // void rescaleValueAxis(bool, bool) const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleValueAxis((bool)x[1].s_bool,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_50(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            this->QCPGraph::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_51(Smoke::Stack x) {
        // virtual void drawLegendIcon(QCPPainter*, const QRectF&) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            ((const x_QCPGraph*)this)->QCPGraph::drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPGraph*)this)->drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_52(Smoke::Stack x) {
        // virtual QCPRange getKeyRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            QCPRange xret = ((const x_QCPGraph*)this)->QCPGraph::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPGraph*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_53(Smoke::Stack x) {
        // virtual QCPRange getValueRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            QCPRange xret = ((const x_QCPGraph*)this)->QCPGraph::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPGraph*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_54(Smoke::Stack x) {
        // virtual QCPRange getKeyRange(bool&, QCPAbstractPlottable::SignDomain, bool) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            QCPRange xret = ((const x_QCPGraph*)this)->QCPGraph::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum,(bool)x[3].s_bool);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPGraph*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum,(bool)x[3].s_bool);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_55(Smoke::Stack x) {
        // virtual QCPRange getValueRange(bool&, QCPAbstractPlottable::SignDomain, bool) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            QCPRange xret = ((const x_QCPGraph*)this)->QCPGraph::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum,(bool)x[3].s_bool);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPGraph*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum,(bool)x[3].s_bool);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_56(Smoke::Stack x) {
        // virtual void drawFill(QCPPainter*, QVector<QPointF>*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            ((const x_QCPGraph*)this)->QCPGraph::drawFill((QCPPainter*)x[1].s_class,(QVector<QPointF>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPGraph*)this)->drawFill((QCPPainter*)x[1].s_class,(QVector<QPointF>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_57(Smoke::Stack x) {
        // virtual void drawScatterPlot(QCPPainter*, QVector<QCPData>*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            ((const x_QCPGraph*)this)->QCPGraph::drawScatterPlot((QCPPainter*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPGraph*)this)->drawScatterPlot((QCPPainter*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_58(Smoke::Stack x) {
        // virtual void drawLinePlot(QCPPainter*, QVector<QPointF>*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            ((const x_QCPGraph*)this)->QCPGraph::drawLinePlot((QCPPainter*)x[1].s_class,(QVector<QPointF>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPGraph*)this)->drawLinePlot((QCPPainter*)x[1].s_class,(QVector<QPointF>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_59(Smoke::Stack x) {
        // virtual void drawImpulsePlot(QCPPainter*, QVector<QPointF>*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGraph*>(this))) {
            ((const x_QCPGraph*)this)->QCPGraph::drawImpulsePlot((QCPPainter*)x[1].s_class,(QVector<QPointF>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPGraph*)this)->drawImpulsePlot((QCPPainter*)x[1].s_class,(QVector<QPointF>*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_60(Smoke::Stack x) {
        // void getPreparedData(QVector<QCPData>*, QVector<QCPData>*) const
        ((const x_QCPGraph*)this)->QCPGraph::getPreparedData((QVector<QCPData>*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_61(Smoke::Stack x) {
        // void getPlotData(QVector<QPointF>*, QVector<QCPData>*) const
        ((const x_QCPGraph*)this)->QCPGraph::getPlotData((QVector<QPointF>*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_62(Smoke::Stack x) {
        // void getScatterPlotData(QVector<QCPData>*) const
        ((const x_QCPGraph*)this)->QCPGraph::getScatterPlotData((QVector<QCPData>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_63(Smoke::Stack x) {
        // void getLinePlotData(QVector<QPointF>*, QVector<QCPData>*) const
        ((const x_QCPGraph*)this)->QCPGraph::getLinePlotData((QVector<QPointF>*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_64(Smoke::Stack x) {
        // void getStepLeftPlotData(QVector<QPointF>*, QVector<QCPData>*) const
        ((const x_QCPGraph*)this)->QCPGraph::getStepLeftPlotData((QVector<QPointF>*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_65(Smoke::Stack x) {
        // void getStepRightPlotData(QVector<QPointF>*, QVector<QCPData>*) const
        ((const x_QCPGraph*)this)->QCPGraph::getStepRightPlotData((QVector<QPointF>*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_66(Smoke::Stack x) {
        // void getStepCenterPlotData(QVector<QPointF>*, QVector<QCPData>*) const
        ((const x_QCPGraph*)this)->QCPGraph::getStepCenterPlotData((QVector<QPointF>*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_67(Smoke::Stack x) {
        // void getImpulsePlotData(QVector<QPointF>*, QVector<QCPData>*) const
        ((const x_QCPGraph*)this)->QCPGraph::getImpulsePlotData((QVector<QPointF>*)x[1].s_class,(QVector<QCPData>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_68(Smoke::Stack x) {
        // void drawError(QCPPainter*, double, double, const QCPData&) const
        ((const x_QCPGraph*)this)->QCPGraph::drawError((QCPPainter*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double,*(const QCPData*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_69(Smoke::Stack x) {
        // void getVisibleDataBounds(QCPDataMap::const_iterator&, QCPDataMap::const_iterator&) const
        ((const x_QCPGraph*)this)->QCPGraph::getVisibleDataBounds(*(QCPDataMap::const_iterator*)x[1].s_class,*(QCPDataMap::const_iterator*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_70(Smoke::Stack x) {
        // int countDataInBounds(const QCPDataMap::const_iterator&, const QCPDataMap::const_iterator&, int) const
        int xret = ((const x_QCPGraph*)this)->QCPGraph::countDataInBounds(*(const QCPDataMap::const_iterator*)x[1].s_class,*(const QCPDataMap::const_iterator*)x[2].s_class,(int)x[3].s_int);
        x[0].s_int = xret;
    }
    void x_71(Smoke::Stack x) {
        // void addFillBasePoints(QVector<QPointF>*) const
        ((const x_QCPGraph*)this)->QCPGraph::addFillBasePoints((QVector<QPointF>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_72(Smoke::Stack x) {
        // void removeFillBasePoints(QVector<QPointF>*) const
        ((const x_QCPGraph*)this)->QCPGraph::removeFillBasePoints((QVector<QPointF>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_73(Smoke::Stack x) {
        // QPointF lowerFillBasePoint(double) const
        QPointF xret = ((const x_QCPGraph*)this)->QCPGraph::lowerFillBasePoint((double)x[1].s_double);
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_74(Smoke::Stack x) {
        // QPointF upperFillBasePoint(double) const
        QPointF xret = ((const x_QCPGraph*)this)->QCPGraph::upperFillBasePoint((double)x[1].s_double);
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_75(Smoke::Stack x) {
        // const QPolygonF getChannelFillPolygon(const QVector<QPointF>*) const
        const QPolygonF xret = ((const x_QCPGraph*)this)->QCPGraph::getChannelFillPolygon((const QVector<QPointF>*)x[1].s_class);
        x[0].s_class = (void*)new const QPolygonF(xret);
    }
    void x_76(Smoke::Stack x) {
        // int findIndexBelowX(const QVector<QPointF>*, double) const
        int xret = ((const x_QCPGraph*)this)->QCPGraph::findIndexBelowX((const QVector<QPointF>*)x[1].s_class,(double)x[2].s_double);
        x[0].s_int = xret;
    }
    void x_77(Smoke::Stack x) {
        // int findIndexAboveX(const QVector<QPointF>*, double) const
        int xret = ((const x_QCPGraph*)this)->QCPGraph::findIndexAboveX((const QVector<QPointF>*)x[1].s_class,(double)x[2].s_double);
        x[0].s_int = xret;
    }
    void x_78(Smoke::Stack x) {
        // int findIndexBelowY(const QVector<QPointF>*, double) const
        int xret = ((const x_QCPGraph*)this)->QCPGraph::findIndexBelowY((const QVector<QPointF>*)x[1].s_class,(double)x[2].s_double);
        x[0].s_int = xret;
    }
    void x_79(Smoke::Stack x) {
        // int findIndexAboveY(const QVector<QPointF>*, double) const
        int xret = ((const x_QCPGraph*)this)->QCPGraph::findIndexAboveY((const QVector<QPointF>*)x[1].s_class,(double)x[2].s_double);
        x[0].s_int = xret;
    }
    void x_80(Smoke::Stack x) {
        // double pointDistance(const QPointF&) const
        double xret = ((const x_QCPGraph*)this)->QCPGraph::pointDistance(*(const QPointF*)x[1].s_class);
        x[0].s_double = xret;
    }
    static void x_81(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPGraph::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_82(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPGraph::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_83(Smoke::Stack x) {
        // void setData(QMap<double,QCPData>*)
        this->QCPGraph::setData((QMap<double,QCPData>*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_84(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPGraph*)this)->QCPGraph::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    void x_85(Smoke::Stack x) {
        // void rescaleAxes() const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleAxes((bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_86(Smoke::Stack x) {
        // void rescaleKeyAxis() const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleKeyAxis((bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_87(Smoke::Stack x) {
        // void rescaleValueAxis() const
        ((const x_QCPGraph*)this)->QCPGraph::rescaleValueAxis((bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_88(Smoke::Stack x) {
        // QCPRange getKeyRange(bool&) const
        QCPRange xret = ((const x_QCPGraph*)this)->QCPGraph::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_89(Smoke::Stack x) {
        // QCPRange getValueRange(bool&) const
        QCPRange xret = ((const x_QCPGraph*)this)->QCPGraph::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    static void x_90(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPGraph::staticMetaObject;
    }
    void x_91(Smoke::Stack x) {
        // QMap<double,QCPData>* mData
        x[0].s_class = (void*)this->QCPGraph::mData;
    }
    void x_92(Smoke::Stack x) {
        // QMap<double,QCPData>* mData=
        this->QCPGraph::mData = (QMap<double,QCPData>*)x[1].s_class;
    }
    void x_93(Smoke::Stack x) {
        // QPen mErrorPen
        x[0].s_class = (void*)&this->QCPGraph::mErrorPen;
    }
    void x_94(Smoke::Stack x) {
        // QPen mErrorPen=
        this->QCPGraph::mErrorPen = *(const QPen*)x[1].s_class;
    }
    void x_95(Smoke::Stack x) {
        // QCPGraph::LineStyle mLineStyle
        x[0].s_enum = this->QCPGraph::mLineStyle;
    }
    void x_96(Smoke::Stack x) {
        // QCPGraph::LineStyle mLineStyle=
        this->QCPGraph::mLineStyle = (QCPGraph::LineStyle)x[1].s_enum;
    }
    void x_97(Smoke::Stack x) {
        // QCPScatterStyle mScatterStyle
        x[0].s_class = (void*)&this->QCPGraph::mScatterStyle;
    }
    void x_98(Smoke::Stack x) {
        // QCPScatterStyle mScatterStyle=
        this->QCPGraph::mScatterStyle = *(const QCPScatterStyle*)x[1].s_class;
    }
    void x_99(Smoke::Stack x) {
        // QCPGraph::ErrorType mErrorType
        x[0].s_enum = this->QCPGraph::mErrorType;
    }
    void x_100(Smoke::Stack x) {
        // QCPGraph::ErrorType mErrorType=
        this->QCPGraph::mErrorType = (QCPGraph::ErrorType)x[1].s_enum;
    }
    void x_101(Smoke::Stack x) {
        // double mErrorBarSize
        x[0].s_double = this->QCPGraph::mErrorBarSize;
    }
    void x_102(Smoke::Stack x) {
        // double mErrorBarSize=
        this->QCPGraph::mErrorBarSize = (double)x[1].s_double;
    }
    void x_103(Smoke::Stack x) {
        // bool mErrorBarSkipSymbol
        x[0].s_bool = this->QCPGraph::mErrorBarSkipSymbol;
    }
    void x_104(Smoke::Stack x) {
        // bool mErrorBarSkipSymbol=
        this->QCPGraph::mErrorBarSkipSymbol = (bool)x[1].s_bool;
    }
    void x_105(Smoke::Stack x) {
        // QPointer<QCPGraph> mChannelFillGraph
        x[0].s_class = (void*)&this->QCPGraph::mChannelFillGraph;
    }
    void x_106(Smoke::Stack x) {
        // QPointer<QCPGraph> mChannelFillGraph=
        this->QCPGraph::mChannelFillGraph = *(const QPointer<QCPGraph>*)x[1].s_class;
    }
    void x_107(Smoke::Stack x) {
        // bool mAdaptiveSampling
        x[0].s_bool = this->QCPGraph::mAdaptiveSampling;
    }
    void x_108(Smoke::Stack x) {
        // bool mAdaptiveSampling=
        this->QCPGraph::mAdaptiveSampling = (bool)x[1].s_bool;
    }
    static void x_109(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::lsNone;
    }
    static void x_110(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::lsLine;
    }
    static void x_111(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::lsStepLeft;
    }
    static void x_112(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::lsStepRight;
    }
    static void x_113(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::lsStepCenter;
    }
    static void x_114(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::lsImpulse;
    }
    static void x_115(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::etNone;
    }
    static void x_116(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::etKey;
    }
    static void x_117(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::etValue;
    }
    static void x_118(Smoke::Stack x) {
        x[0].s_enum = (long)QCPGraph::etBoth;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1084, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPGraph::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1085, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPGraph::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1090, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPGraph::qt_metacall(x1, x2, x3);
    }
    virtual void clearData() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1125, (void*)this, x)) return;
        this->QCPGraph::clearData();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1126, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPGraph::selectTest(x1, x2, x3);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1133, (void*)this, x)) return;
        this->QCPGraph::draw(x1);
    }
    virtual void drawLegendIcon(QCPPainter* x1, const QRectF& x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        if (this->_binding->callMethod(1134, (void*)this, x)) return;
        this->QCPGraph::drawLegendIcon(x1, x2);
    }
    virtual QCPRange getKeyRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(1135, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPGraph::getKeyRange(x1, x2);
    }
    virtual QCPRange getValueRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(1136, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPGraph::getValueRange(x1, x2);
    }
    virtual QCPRange getKeyRange(bool& x1, QCPAbstractPlottable::SignDomain x2, bool x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        x[3].s_bool = x3;
        if (this->_binding->callMethod(1137, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPGraph::getKeyRange(x1, x2, x3);
    }
    virtual QCPRange getValueRange(bool& x1, QCPAbstractPlottable::SignDomain x2, bool x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        x[3].s_bool = x3;
        if (this->_binding->callMethod(1138, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPGraph::getValueRange(x1, x2, x3);
    }
    virtual void drawFill(QCPPainter* x1, QVector<QPointF>* x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(1139, (void*)this, x)) return;
        this->QCPGraph::drawFill(x1, x2);
    }
    virtual void drawScatterPlot(QCPPainter* x1, QVector<QCPData>* x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(1140, (void*)this, x)) return;
        this->QCPGraph::drawScatterPlot(x1, x2);
    }
    virtual void drawLinePlot(QCPPainter* x1, QVector<QPointF>* x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(1141, (void*)this, x)) return;
        this->QCPGraph::drawLinePlot(x1, x2);
    }
    virtual void drawImpulsePlot(QCPPainter* x1, QVector<QPointF>* x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(1142, (void*)this, x)) return;
        this->QCPGraph::drawImpulsePlot(x1, x2);
    }
    virtual bool addToLegend() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(136, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::addToLegend();
    }
    virtual bool removeFromLegend() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(137, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::removeFromLegend();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(143, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractPlottable::clipRect();
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(145, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractPlottable::selectionCategory();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(147, (void*)this, x)) return;
        this->QCPAbstractPlottable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(148, (void*)this, x)) return;
        this->QCPAbstractPlottable::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(146, (void*)this, x)) return;
        this->QCPAbstractPlottable::applyDefaultAntialiasingHint(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 58: //QCPGraph::LineStyle
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPGraph::LineStyle;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPGraph::LineStyle*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPGraph::LineStyle*)xdata = (QCPGraph::LineStyle)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPGraph::LineStyle*)xdata;
                    break;
            }
            break;
        case 57: //QCPGraph::ErrorType
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPGraph::ErrorType;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPGraph::ErrorType*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPGraph::ErrorType*)xdata = (QCPGraph::ErrorType)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPGraph::ErrorType*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPGraph() { this->_binding->deleted(23, (void*)this); }
};
void xenum_QCPGraph(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPGraph::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPGraph(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPGraph *xself = (x_QCPGraph*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPGraph::x_3(args);	break;
        case 4: x_QCPGraph::x_4(args);	break;
        case 5: x_QCPGraph::x_5(args);	break;
        case 6: x_QCPGraph::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPGraph::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: x_QCPGraph::x_81(args);	break;
        case 82: x_QCPGraph::x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: xself->x_84(args);	break;
        case 85: xself->x_85(args);	break;
        case 86: xself->x_86(args);	break;
        case 87: xself->x_87(args);	break;
        case 88: xself->x_88(args);	break;
        case 89: xself->x_89(args);	break;
        case 90: x_QCPGraph::x_90(args);	break;
        case 91: xself->x_91(args);	break;
        case 92: xself->x_92(args);	break;
        case 93: xself->x_93(args);	break;
        case 94: xself->x_94(args);	break;
        case 95: xself->x_95(args);	break;
        case 96: xself->x_96(args);	break;
        case 97: xself->x_97(args);	break;
        case 98: xself->x_98(args);	break;
        case 99: xself->x_99(args);	break;
        case 100: xself->x_100(args);	break;
        case 101: xself->x_101(args);	break;
        case 102: xself->x_102(args);	break;
        case 103: xself->x_103(args);	break;
        case 104: xself->x_104(args);	break;
        case 105: xself->x_105(args);	break;
        case 106: xself->x_106(args);	break;
        case 107: xself->x_107(args);	break;
        case 108: xself->x_108(args);	break;
        case 109: x_QCPGraph::x_109(args);	break;
        case 110: x_QCPGraph::x_110(args);	break;
        case 111: x_QCPGraph::x_111(args);	break;
        case 112: x_QCPGraph::x_112(args);	break;
        case 113: x_QCPGraph::x_113(args);	break;
        case 114: x_QCPGraph::x_114(args);	break;
        case 115: x_QCPGraph::x_115(args);	break;
        case 116: x_QCPGraph::x_116(args);	break;
        case 117: x_QCPGraph::x_117(args);	break;
        case 118: x_QCPGraph::x_118(args);	break;
        case 119: delete (QCPGraph*)xself;	break;
    }
}
class x_QCPGrid : public QCPGrid, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGrid*>(this))) {
            const QMetaObject* xret = ((const x_QCPGrid*)this)->QCPGrid::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPGrid*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGrid*>(this))) {
            void* xret = this->QCPGrid::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPGrid::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPGrid::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPGrid::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPGrid::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGrid*>(this))) {
            int xret = this->QCPGrid::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPGrid* QCPGrid(QCPAxis*)
        x_QCPGrid* xret = new x_QCPGrid((QCPAxis*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPGrid(QCPAxis* x1) : QCPGrid(x1) {}
    void x_9(Smoke::Stack x) {
        // bool subGridVisible() const
        bool xret = ((const x_QCPGrid*)this)->QCPGrid::subGridVisible();
        x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
        // bool antialiasedSubGrid() const
        bool xret = ((const x_QCPGrid*)this)->QCPGrid::antialiasedSubGrid();
        x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) {
        // bool antialiasedZeroLine() const
        bool xret = ((const x_QCPGrid*)this)->QCPGrid::antialiasedZeroLine();
        x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QCPGrid*)this)->QCPGrid::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_13(Smoke::Stack x) {
        // QPen subGridPen() const
        QPen xret = ((const x_QCPGrid*)this)->QCPGrid::subGridPen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_14(Smoke::Stack x) {
        // QPen zeroLinePen() const
        QPen xret = ((const x_QCPGrid*)this)->QCPGrid::zeroLinePen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_15(Smoke::Stack x) {
        // void setSubGridVisible(bool)
        this->QCPGrid::setSubGridVisible((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setAntialiasedSubGrid(bool)
        this->QCPGrid::setAntialiasedSubGrid((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setAntialiasedZeroLine(bool)
        this->QCPGrid::setAntialiasedZeroLine((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QCPGrid::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setSubGridPen(const QPen&)
        this->QCPGrid::setSubGridPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setZeroLinePen(const QPen&)
        this->QCPGrid::setZeroLinePen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGrid*>(this))) {
            ((const x_QCPGrid*)this)->QCPGrid::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPGrid*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_22(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPGrid*>(this))) {
            this->QCPGrid::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_23(Smoke::Stack x) {
        // void drawGridLines(QCPPainter*) const
        ((const x_QCPGrid*)this)->QCPGrid::drawGridLines((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void drawSubGridLines(QCPPainter*) const
        ((const x_QCPGrid*)this)->QCPGrid::drawSubGridLines((QCPPainter*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_25(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPGrid::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_26(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPGrid::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_27(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPGrid::staticMetaObject;
    }
    void x_28(Smoke::Stack x) {
        // bool mSubGridVisible
        x[0].s_bool = this->QCPGrid::mSubGridVisible;
    }
    void x_29(Smoke::Stack x) {
        // bool mSubGridVisible=
        this->QCPGrid::mSubGridVisible = (bool)x[1].s_bool;
    }
    void x_30(Smoke::Stack x) {
        // bool mAntialiasedSubGrid
        x[0].s_bool = this->QCPGrid::mAntialiasedSubGrid;
    }
    void x_31(Smoke::Stack x) {
        // bool mAntialiasedSubGrid=
        this->QCPGrid::mAntialiasedSubGrid = (bool)x[1].s_bool;
    }
    void x_32(Smoke::Stack x) {
        // bool mAntialiasedZeroLine
        x[0].s_bool = this->QCPGrid::mAntialiasedZeroLine;
    }
    void x_33(Smoke::Stack x) {
        // bool mAntialiasedZeroLine=
        this->QCPGrid::mAntialiasedZeroLine = (bool)x[1].s_bool;
    }
    void x_34(Smoke::Stack x) {
        // QPen mPen
        x[0].s_class = (void*)&this->QCPGrid::mPen;
    }
    void x_35(Smoke::Stack x) {
        // QPen mPen=
        this->QCPGrid::mPen = *(const QPen*)x[1].s_class;
    }
    void x_36(Smoke::Stack x) {
        // QPen mSubGridPen
        x[0].s_class = (void*)&this->QCPGrid::mSubGridPen;
    }
    void x_37(Smoke::Stack x) {
        // QPen mSubGridPen=
        this->QCPGrid::mSubGridPen = *(const QPen*)x[1].s_class;
    }
    void x_38(Smoke::Stack x) {
        // QPen mZeroLinePen
        x[0].s_class = (void*)&this->QCPGrid::mZeroLinePen;
    }
    void x_39(Smoke::Stack x) {
        // QPen mZeroLinePen=
        this->QCPGrid::mZeroLinePen = *(const QPen*)x[1].s_class;
    }
    void x_40(Smoke::Stack x) {
        // QCPAxis* mParentAxis
        x[0].s_class = (void*)this->QCPGrid::mParentAxis;
    }
    void x_41(Smoke::Stack x) {
        // QCPAxis* mParentAxis=
        this->QCPGrid::mParentAxis = (QCPAxis*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1203, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPGrid::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1204, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPGrid::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1209, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPGrid::qt_metacall(x1, x2, x3);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1223, (void*)this, x)) return;
        this->QCPGrid::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1224, (void*)this, x)) return;
        this->QCPGrid::draw(x1);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1773, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLayerable::selectTest(x1, x2, x3);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(1781, (void*)this, x)) return;
        this->QCPLayerable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1782, (void*)this, x)) return;
        this->QCPLayerable::deselectEvent(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPGrid() { this->_binding->deleted(24, (void*)this); }
};
void xcall_QCPGrid(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPGrid *xself = (x_QCPGrid*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPGrid::x_3(args);	break;
        case 4: x_QCPGrid::x_4(args);	break;
        case 5: x_QCPGrid::x_5(args);	break;
        case 6: x_QCPGrid::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPGrid::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: x_QCPGrid::x_25(args);	break;
        case 26: x_QCPGrid::x_26(args);	break;
        case 27: x_QCPGrid::x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: delete (QCPGrid*)xself;	break;
    }
}
class x_QCPItemAnchor : public QCPItemAnchor, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPItemAnchor* QCPItemAnchor(QCustomPlot*, QCPAbstractItem*, const QString, int)
        x_QCPItemAnchor* xret = new x_QCPItemAnchor((QCustomPlot*)x[1].s_class,(QCPAbstractItem*)x[2].s_class,*(const QString*)x[3].s_class,(int)x[4].s_int);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPItemAnchor(QCustomPlot* x1, QCPAbstractItem* x2, const QString x3, int x4) : QCPItemAnchor(x1, x2, x3, x4) {}
    void x_2(Smoke::Stack x) {
        // QString name() const
        QString xret = ((const x_QCPItemAnchor*)this)->QCPItemAnchor::name();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_3(Smoke::Stack x) {
        // virtual QPointF pixelPoint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemAnchor*>(this))) {
            QPointF xret = ((const x_QCPItemAnchor*)this)->QCPItemAnchor::pixelPoint();
            x[0].s_class = (void*)new QPointF(xret);
        } else {
            QPointF xret = ((const x_QCPItemAnchor*)this)->pixelPoint();
            x[0].s_class = (void*)new QPointF(xret);
        }
    }
    void x_4(Smoke::Stack x) {
        // virtual QCPItemPosition* toQCPItemPosition()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPItemAnchor*>(this))) {
            QCPItemPosition* xret = this->QCPItemAnchor::toQCPItemPosition();
            x[0].s_class = (void*)xret;
        } else {
            QCPItemPosition* xret = this->toQCPItemPosition();
            x[0].s_class = (void*)xret;
        }
    }
    void x_5(Smoke::Stack x) {
        // void addChildX(QCPItemPosition*)
        this->QCPItemAnchor::addChildX((QCPItemPosition*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_6(Smoke::Stack x) {
        // void removeChildX(QCPItemPosition*)
        this->QCPItemAnchor::removeChildX((QCPItemPosition*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) {
        // void addChildY(QCPItemPosition*)
        this->QCPItemAnchor::addChildY((QCPItemPosition*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) {
        // void removeChildY(QCPItemPosition*)
        this->QCPItemAnchor::removeChildY((QCPItemPosition*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_9(Smoke::Stack x) {
        // QCPItemAnchor* QCPItemAnchor(QCustomPlot*, QCPAbstractItem*, const QString)
        x_QCPItemAnchor* xret = new x_QCPItemAnchor((QCustomPlot*)x[1].s_class,(QCPAbstractItem*)x[2].s_class,*(const QString*)x[3].s_class,(int)-1);
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QString mName
        x[0].s_class = (void*)&this->QCPItemAnchor::mName;
    }
    void x_11(Smoke::Stack x) {
        // QString mName=
        this->QCPItemAnchor::mName = *(const QString*)x[1].s_class;
    }
    void x_12(Smoke::Stack x) {
        // QCustomPlot* mParentPlot
        x[0].s_class = (void*)this->QCPItemAnchor::mParentPlot;
    }
    void x_13(Smoke::Stack x) {
        // QCustomPlot* mParentPlot=
        this->QCPItemAnchor::mParentPlot = (QCustomPlot*)x[1].s_class;
    }
    void x_14(Smoke::Stack x) {
        // QCPAbstractItem* mParentItem
        x[0].s_class = (void*)this->QCPItemAnchor::mParentItem;
    }
    void x_15(Smoke::Stack x) {
        // QCPAbstractItem* mParentItem=
        this->QCPItemAnchor::mParentItem = (QCPAbstractItem*)x[1].s_class;
    }
    void x_16(Smoke::Stack x) {
        // int mAnchorId
        x[0].s_int = this->QCPItemAnchor::mAnchorId;
    }
    void x_17(Smoke::Stack x) {
        // int mAnchorId=
        this->QCPItemAnchor::mAnchorId = (int)x[1].s_int;
    }
    void x_18(Smoke::Stack x) {
        // QSet<QCPItemPosition*> mChildrenX
        x[0].s_class = (void*)&this->QCPItemAnchor::mChildrenX;
    }
    void x_19(Smoke::Stack x) {
        // QSet<QCPItemPosition*> mChildrenX=
        this->QCPItemAnchor::mChildrenX = *(const QSet<QCPItemPosition*>*)x[1].s_class;
    }
    void x_20(Smoke::Stack x) {
        // QSet<QCPItemPosition*> mChildrenY
        x[0].s_class = (void*)&this->QCPItemAnchor::mChildrenY;
    }
    void x_21(Smoke::Stack x) {
        // QSet<QCPItemPosition*> mChildrenY=
        this->QCPItemAnchor::mChildrenY = *(const QSet<QCPItemPosition*>*)x[1].s_class;
    }
    virtual QPointF pixelPoint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1247, (void*)this, x)) {
            QPointF* xptr = (QPointF*)x[0].s_class;
            QPointF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPItemAnchor::pixelPoint();
    }
    virtual QCPItemPosition* toQCPItemPosition() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1248, (void*)this, x)) return (QCPItemPosition*)x[0].s_class;
        return this->QCPItemAnchor::toQCPItemPosition();
    }
    ~x_QCPItemAnchor() { this->_binding->deleted(25, (void*)this); }
};
void xcall_QCPItemAnchor(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPItemAnchor *xself = (x_QCPItemAnchor*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPItemAnchor::x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: x_QCPItemAnchor::x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: delete (QCPItemAnchor*)xself;	break;
    }
}

}
