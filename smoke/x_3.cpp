//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPColorGradient : public QCPColorGradient {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPColorGradient* QCPColorGradient(QCPColorGradient::GradientPreset)
        x_QCPColorGradient* xret = new x_QCPColorGradient((QCPColorGradient::GradientPreset)x[1].s_enum);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPColorGradient(QCPColorGradient::GradientPreset x1) : QCPColorGradient(x1) {}
    void x_2(Smoke::Stack x) {
        // bool operator==(const QCPColorGradient&) const
        bool xret = ((const x_QCPColorGradient*)this)->QCPColorGradient::operator==(*(const QCPColorGradient*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_3(Smoke::Stack x) {
        // bool operator!=(const QCPColorGradient&) const
        bool xret = ((const x_QCPColorGradient*)this)->QCPColorGradient::operator!=(*(const QCPColorGradient*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
        // int levelCount() const
        int xret = ((const x_QCPColorGradient*)this)->QCPColorGradient::levelCount();
        x[0].s_int = xret;
    }
    void x_5(Smoke::Stack x) {
        // QMap<double,QColor> colorStops() const
        QMap<double,QColor> xret = ((const x_QCPColorGradient*)this)->QCPColorGradient::colorStops();
        x[0].s_class = (void*)new QMap<double,QColor>(xret);
    }
    void x_6(Smoke::Stack x) {
        // QCPColorGradient::ColorInterpolation colorInterpolation() const
        QCPColorGradient::ColorInterpolation xret = ((const x_QCPColorGradient*)this)->QCPColorGradient::colorInterpolation();
        x[0].s_enum = xret;
    }
    void x_7(Smoke::Stack x) {
        // bool periodic() const
        bool xret = ((const x_QCPColorGradient*)this)->QCPColorGradient::periodic();
        x[0].s_bool = xret;
    }
    void x_8(Smoke::Stack x) {
        // void setLevelCount(int)
        this->QCPColorGradient::setLevelCount((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) {
        // void setColorStops(const QMap<double,QColor>&)
        this->QCPColorGradient::setColorStops(*(const QMap<double,QColor>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // void setColorStopAt(double, const QColor&)
        this->QCPColorGradient::setColorStopAt((double)x[1].s_double,*(const QColor*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
        // void setColorInterpolation(QCPColorGradient::ColorInterpolation)
        this->QCPColorGradient::setColorInterpolation((QCPColorGradient::ColorInterpolation)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void setPeriodic(bool)
        this->QCPColorGradient::setPeriodic((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // void colorize(const double*, const QCPRange&, unsigned int*, int, int, bool)
        this->QCPColorGradient::colorize((const double*)x[1].s_class,*(const QCPRange*)x[2].s_class,(unsigned int*)x[3].s_class,(int)x[4].s_int,(int)x[5].s_int,(bool)x[6].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // unsigned int color(double, const QCPRange&, bool)
        unsigned int xret = this->QCPColorGradient::color((double)x[1].s_double,*(const QCPRange*)x[2].s_class,(bool)x[3].s_bool);
        x[0].s_uint = xret;
    }
    void x_15(Smoke::Stack x) {
        // void loadPreset(QCPColorGradient::GradientPreset)
        this->QCPColorGradient::loadPreset((QCPColorGradient::GradientPreset)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void clearColorStops()
        this->QCPColorGradient::clearColorStops();
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // QCPColorGradient inverted() const
        QCPColorGradient xret = ((const x_QCPColorGradient*)this)->QCPColorGradient::inverted();
        x[0].s_class = (void*)new QCPColorGradient(xret);
    }
    void x_18(Smoke::Stack x) {
        // void updateColorBuffer()
        this->QCPColorGradient::updateColorBuffer();
        (void)x; // noop (for compiler warning)
    }
    static void x_19(Smoke::Stack x) {
        // QCPColorGradient* QCPColorGradient(const QCPColorGradient&)
        x_QCPColorGradient* xret = new x_QCPColorGradient(*(const QCPColorGradient*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPColorGradient(const QCPColorGradient& x1) : QCPColorGradient(x1) {}
    static void x_20(Smoke::Stack x) {
        // QCPColorGradient* QCPColorGradient()
        x_QCPColorGradient* xret = new x_QCPColorGradient((QCPColorGradient::GradientPreset)QCPColorGradient::gpCold);
        x[0].s_class = (void*)xret;
    }
    void x_21(Smoke::Stack x) {
        // void colorize(const double*, const QCPRange&, unsigned int*, int)
        this->QCPColorGradient::colorize((const double*)x[1].s_class,*(const QCPRange*)x[2].s_class,(unsigned int*)x[3].s_class,(int)x[4].s_int,(int)1,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void colorize(const double*, const QCPRange&, unsigned int*, int, int)
        this->QCPColorGradient::colorize((const double*)x[1].s_class,*(const QCPRange*)x[2].s_class,(unsigned int*)x[3].s_class,(int)x[4].s_int,(int)x[5].s_int,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // unsigned int color(double, const QCPRange&)
        unsigned int xret = this->QCPColorGradient::color((double)x[1].s_double,*(const QCPRange*)x[2].s_class,(bool)false);
        x[0].s_uint = xret;
    }
    static void x_24(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPColorGradient::staticMetaObject;
    }
    void x_25(Smoke::Stack x) {
        // int mLevelCount
        x[0].s_int = this->QCPColorGradient::mLevelCount;
    }
    void x_26(Smoke::Stack x) {
        // int mLevelCount=
        this->QCPColorGradient::mLevelCount = (int)x[1].s_int;
    }
    void x_27(Smoke::Stack x) {
        // QMap<double,QColor> mColorStops
        x[0].s_class = (void*)&this->QCPColorGradient::mColorStops;
    }
    void x_28(Smoke::Stack x) {
        // QMap<double,QColor> mColorStops=
        this->QCPColorGradient::mColorStops = *(const QMap<double,QColor>*)x[1].s_class;
    }
    void x_29(Smoke::Stack x) {
        // QCPColorGradient::ColorInterpolation mColorInterpolation
        x[0].s_enum = this->QCPColorGradient::mColorInterpolation;
    }
    void x_30(Smoke::Stack x) {
        // QCPColorGradient::ColorInterpolation mColorInterpolation=
        this->QCPColorGradient::mColorInterpolation = (QCPColorGradient::ColorInterpolation)x[1].s_enum;
    }
    void x_31(Smoke::Stack x) {
        // bool mPeriodic
        x[0].s_bool = this->QCPColorGradient::mPeriodic;
    }
    void x_32(Smoke::Stack x) {
        // bool mPeriodic=
        this->QCPColorGradient::mPeriodic = (bool)x[1].s_bool;
    }
    void x_33(Smoke::Stack x) {
        // QVector<unsigned int> mColorBuffer
        x[0].s_class = (void*)&this->QCPColorGradient::mColorBuffer;
    }
    void x_34(Smoke::Stack x) {
        // QVector<unsigned int> mColorBuffer=
        this->QCPColorGradient::mColorBuffer = *(const QVector<unsigned int>*)x[1].s_class;
    }
    void x_35(Smoke::Stack x) {
        // bool mColorBufferInvalidated
        x[0].s_bool = this->QCPColorGradient::mColorBufferInvalidated;
    }
    void x_36(Smoke::Stack x) {
        // bool mColorBufferInvalidated=
        this->QCPColorGradient::mColorBufferInvalidated = (bool)x[1].s_bool;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::ciRGB;
    }
    static void x_38(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::ciHSV;
    }
    static void x_39(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpGrayscale;
    }
    static void x_40(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpHot;
    }
    static void x_41(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpCold;
    }
    static void x_42(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpNight;
    }
    static void x_43(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpCandy;
    }
    static void x_44(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpGeography;
    }
    static void x_45(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpIon;
    }
    static void x_46(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpThermal;
    }
    static void x_47(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpPolar;
    }
    static void x_48(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpSpectrum;
    }
    static void x_49(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpJet;
    }
    static void x_50(Smoke::Stack x) {
        x[0].s_enum = (long)QCPColorGradient::gpHues;
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 35: //QCPColorGradient::ColorInterpolation
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPColorGradient::ColorInterpolation;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPColorGradient::ColorInterpolation*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPColorGradient::ColorInterpolation*)xdata = (QCPColorGradient::ColorInterpolation)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPColorGradient::ColorInterpolation*)xdata;
                    break;
            }
            break;
        case 36: //QCPColorGradient::GradientPreset
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPColorGradient::GradientPreset;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPColorGradient::GradientPreset*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPColorGradient::GradientPreset*)xdata = (QCPColorGradient::GradientPreset)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPColorGradient::GradientPreset*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPColorGradient() { this->_binding->deleted(13, (void*)this); }
};
void xenum_QCPColorGradient(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPColorGradient::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPColorGradient(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPColorGradient *xself = (x_QCPColorGradient*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPColorGradient::x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: x_QCPColorGradient::x_19(args);	break;
        case 20: x_QCPColorGradient::x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: x_QCPColorGradient::x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: x_QCPColorGradient::x_37(args);	break;
        case 38: x_QCPColorGradient::x_38(args);	break;
        case 39: x_QCPColorGradient::x_39(args);	break;
        case 40: x_QCPColorGradient::x_40(args);	break;
        case 41: x_QCPColorGradient::x_41(args);	break;
        case 42: x_QCPColorGradient::x_42(args);	break;
        case 43: x_QCPColorGradient::x_43(args);	break;
        case 44: x_QCPColorGradient::x_44(args);	break;
        case 45: x_QCPColorGradient::x_45(args);	break;
        case 46: x_QCPColorGradient::x_46(args);	break;
        case 47: x_QCPColorGradient::x_47(args);	break;
        case 48: x_QCPColorGradient::x_48(args);	break;
        case 49: x_QCPColorGradient::x_49(args);	break;
        case 50: x_QCPColorGradient::x_50(args);	break;
        case 51: delete (QCPColorGradient*)xself;	break;
    }
}
class x_QCPColorMap : public QCPColorMap, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            const QMetaObject* xret = ((const x_QCPColorMap*)this)->QCPColorMap::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPColorMap*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            void* xret = this->QCPColorMap::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPColorMap::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPColorMap::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPColorMap::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPColorMap::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            int xret = this->QCPColorMap::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPColorMap* QCPColorMap(QCPAxis*, QCPAxis*)
        x_QCPColorMap* xret = new x_QCPColorMap((QCPAxis*)x[1].s_class,(QCPAxis*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPColorMap(QCPAxis* x1, QCPAxis* x2) : QCPColorMap(x1, x2) {}
    void x_9(Smoke::Stack x) {
        // QCPColorMapData* data() const
        QCPColorMapData* xret = ((const x_QCPColorMap*)this)->QCPColorMap::data();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QCPRange dataRange() const
        QCPRange xret = ((const x_QCPColorMap*)this)->QCPColorMap::dataRange();
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_11(Smoke::Stack x) {
        // QCPAxis::ScaleType dataScaleType() const
        QCPAxis::ScaleType xret = ((const x_QCPColorMap*)this)->QCPColorMap::dataScaleType();
        x[0].s_enum = xret;
    }
    void x_12(Smoke::Stack x) {
        // bool interpolate() const
        bool xret = ((const x_QCPColorMap*)this)->QCPColorMap::interpolate();
        x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) {
        // bool tightBoundary() const
        bool xret = ((const x_QCPColorMap*)this)->QCPColorMap::tightBoundary();
        x[0].s_bool = xret;
    }
    void x_14(Smoke::Stack x) {
        // QCPColorGradient gradient() const
        QCPColorGradient xret = ((const x_QCPColorMap*)this)->QCPColorMap::gradient();
        x[0].s_class = (void*)new QCPColorGradient(xret);
    }
    void x_15(Smoke::Stack x) {
        // QCPColorScale* colorScale() const
        QCPColorScale* xret = ((const x_QCPColorMap*)this)->QCPColorMap::colorScale();
        x[0].s_class = (void*)xret;
    }
    void x_16(Smoke::Stack x) {
        // void setData(QCPColorMapData*, bool)
        this->QCPColorMap::setData((QCPColorMapData*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setDataRange(const QCPRange&)
        this->QCPColorMap::setDataRange(*(const QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setDataScaleType(QCPAxis::ScaleType)
        this->QCPColorMap::setDataScaleType((QCPAxis::ScaleType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setGradient(const QCPColorGradient&)
        this->QCPColorMap::setGradient(*(const QCPColorGradient*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setInterpolate(bool)
        this->QCPColorMap::setInterpolate((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setTightBoundary(bool)
        this->QCPColorMap::setTightBoundary((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setColorScale(QCPColorScale*)
        this->QCPColorMap::setColorScale((QCPColorScale*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void rescaleDataRange(bool)
        this->QCPColorMap::rescaleDataRange((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void updateLegendIcon(Qt::TransformationMode, const QSize&)
        this->QCPColorMap::updateLegendIcon((Qt::TransformationMode)x[1].s_enum,*(const QSize*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // virtual void clearData()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            this->QCPColorMap::clearData();
            (void)x; // noop (for compiler warning)
        } else {
            this->clearData();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_26(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            double xret = ((const x_QCPColorMap*)this)->QCPColorMap::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPColorMap*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_27(Smoke::Stack x) {
        // void dataRangeChanged(QCPRange)
        this->QCPColorMap::dataRangeChanged(*(QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void dataScaleTypeChanged(QCPAxis::ScaleType)
        this->QCPColorMap::dataScaleTypeChanged((QCPAxis::ScaleType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void gradientChanged(QCPColorGradient)
        this->QCPColorMap::gradientChanged(*(QCPColorGradient*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // virtual void updateMapImage()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            this->QCPColorMap::updateMapImage();
            (void)x; // noop (for compiler warning)
        } else {
            this->updateMapImage();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_31(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            this->QCPColorMap::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_32(Smoke::Stack x) {
        // virtual void drawLegendIcon(QCPPainter*, const QRectF&) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            ((const x_QCPColorMap*)this)->QCPColorMap::drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPColorMap*)this)->drawLegendIcon((QCPPainter*)x[1].s_class,*(const QRectF*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_33(Smoke::Stack x) {
        // virtual QCPRange getKeyRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            QCPRange xret = ((const x_QCPColorMap*)this)->QCPColorMap::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPColorMap*)this)->getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    void x_34(Smoke::Stack x) {
        // virtual QCPRange getValueRange(bool&, QCPAbstractPlottable::SignDomain) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorMap*>(this))) {
            QCPRange xret = ((const x_QCPColorMap*)this)->QCPColorMap::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        } else {
            QCPRange xret = ((const x_QCPColorMap*)this)->getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)x[2].s_enum);
            x[0].s_class = (void*)new QCPRange(xret);
        }
    }
    static void x_35(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPColorMap::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_36(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPColorMap::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_37(Smoke::Stack x) {
        // void setData(QCPColorMapData*)
        this->QCPColorMap::setData((QCPColorMapData*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_38(Smoke::Stack x) {
        // void rescaleDataRange()
        this->QCPColorMap::rescaleDataRange((bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_39(Smoke::Stack x) {
        // void updateLegendIcon()
        this->QCPColorMap::updateLegendIcon((Qt::TransformationMode)Qt::SmoothTransformation,(const QSize&)QSize(32,18));
        (void)x; // noop (for compiler warning)
    }
    void x_40(Smoke::Stack x) {
        // void updateLegendIcon(Qt::TransformationMode)
        this->QCPColorMap::updateLegendIcon((Qt::TransformationMode)x[1].s_enum,(const QSize&)QSize(32,18));
        (void)x; // noop (for compiler warning)
    }
    void x_41(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPColorMap*)this)->QCPColorMap::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    void x_42(Smoke::Stack x) {
        // QCPRange getKeyRange(bool&) const
        QCPRange xret = ((const x_QCPColorMap*)this)->QCPColorMap::getKeyRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_43(Smoke::Stack x) {
        // QCPRange getValueRange(bool&) const
        QCPRange xret = ((const x_QCPColorMap*)this)->QCPColorMap::getValueRange(*(bool*)x[1].s_class,(QCPAbstractPlottable::SignDomain)sdBoth);
        x[0].s_class = (void*)new QCPRange(xret);
    }
    static void x_44(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPColorMap::staticMetaObject;
    }
    void x_45(Smoke::Stack x) {
        // QCPRange mDataRange
        x[0].s_class = (void*)&this->QCPColorMap::mDataRange;
    }
    void x_46(Smoke::Stack x) {
        // QCPRange mDataRange=
        this->QCPColorMap::mDataRange = *(const QCPRange*)x[1].s_class;
    }
    void x_47(Smoke::Stack x) {
        // QCPAxis::ScaleType mDataScaleType
        x[0].s_enum = this->QCPColorMap::mDataScaleType;
    }
    void x_48(Smoke::Stack x) {
        // QCPAxis::ScaleType mDataScaleType=
        this->QCPColorMap::mDataScaleType = (QCPAxis::ScaleType)x[1].s_enum;
    }
    void x_49(Smoke::Stack x) {
        // QCPColorMapData* mMapData
        x[0].s_class = (void*)this->QCPColorMap::mMapData;
    }
    void x_50(Smoke::Stack x) {
        // QCPColorMapData* mMapData=
        this->QCPColorMap::mMapData = (QCPColorMapData*)x[1].s_class;
    }
    void x_51(Smoke::Stack x) {
        // QCPColorGradient mGradient
        x[0].s_class = (void*)&this->QCPColorMap::mGradient;
    }
    void x_52(Smoke::Stack x) {
        // QCPColorGradient mGradient=
        this->QCPColorMap::mGradient = *(const QCPColorGradient*)x[1].s_class;
    }
    void x_53(Smoke::Stack x) {
        // bool mInterpolate
        x[0].s_bool = this->QCPColorMap::mInterpolate;
    }
    void x_54(Smoke::Stack x) {
        // bool mInterpolate=
        this->QCPColorMap::mInterpolate = (bool)x[1].s_bool;
    }
    void x_55(Smoke::Stack x) {
        // bool mTightBoundary
        x[0].s_bool = this->QCPColorMap::mTightBoundary;
    }
    void x_56(Smoke::Stack x) {
        // bool mTightBoundary=
        this->QCPColorMap::mTightBoundary = (bool)x[1].s_bool;
    }
    void x_57(Smoke::Stack x) {
        // QPointer<QCPColorScale> mColorScale
        x[0].s_class = (void*)&this->QCPColorMap::mColorScale;
    }
    void x_58(Smoke::Stack x) {
        // QPointer<QCPColorScale> mColorScale=
        this->QCPColorMap::mColorScale = *(const QPointer<QCPColorScale>*)x[1].s_class;
    }
    void x_59(Smoke::Stack x) {
        // QImage mMapImage
        x[0].s_class = (void*)&this->QCPColorMap::mMapImage;
    }
    void x_60(Smoke::Stack x) {
        // QImage mMapImage=
        this->QCPColorMap::mMapImage = *(const QImage*)x[1].s_class;
    }
    void x_61(Smoke::Stack x) {
        // QPixmap mLegendIcon
        x[0].s_class = (void*)&this->QCPColorMap::mLegendIcon;
    }
    void x_62(Smoke::Stack x) {
        // QPixmap mLegendIcon=
        this->QCPColorMap::mLegendIcon = *(const QPixmap*)x[1].s_class;
    }
    void x_63(Smoke::Stack x) {
        // bool mMapImageInvalidated
        x[0].s_bool = this->QCPColorMap::mMapImageInvalidated;
    }
    void x_64(Smoke::Stack x) {
        // bool mMapImageInvalidated=
        this->QCPColorMap::mMapImageInvalidated = (bool)x[1].s_bool;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(756, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPColorMap::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(757, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPColorMap::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(762, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPColorMap::qt_metacall(x1, x2, x3);
    }
    virtual void clearData() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(780, (void*)this, x)) return;
        this->QCPColorMap::clearData();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(781, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPColorMap::selectTest(x1, x2, x3);
    }
    virtual void updateMapImage() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(785, (void*)this, x)) return;
        this->QCPColorMap::updateMapImage();
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(786, (void*)this, x)) return;
        this->QCPColorMap::draw(x1);
    }
    virtual void drawLegendIcon(QCPPainter* x1, const QRectF& x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        if (this->_binding->callMethod(787, (void*)this, x)) return;
        this->QCPColorMap::drawLegendIcon(x1, x2);
    }
    virtual QCPRange getKeyRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(788, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPColorMap::getKeyRange(x1, x2);
    }
    virtual QCPRange getValueRange(bool& x1, QCPAbstractPlottable::SignDomain x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(789, (void*)this, x)) {
            QCPRange* xptr = (QCPRange*)x[0].s_class;
            QCPRange xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPColorMap::getValueRange(x1, x2);
    }
    virtual bool addToLegend() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(136, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::addToLegend();
    }
    virtual bool removeFromLegend() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(137, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPAbstractPlottable::removeFromLegend();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(143, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPAbstractPlottable::clipRect();
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(145, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPAbstractPlottable::selectionCategory();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(147, (void*)this, x)) return;
        this->QCPAbstractPlottable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(148, (void*)this, x)) return;
        this->QCPAbstractPlottable::deselectEvent(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1776, (void*)this, x)) return;
        this->QCPLayerable::parentPlotInitialized(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(146, (void*)this, x)) return;
        this->QCPAbstractPlottable::applyDefaultAntialiasingHint(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPColorMap() { this->_binding->deleted(14, (void*)this); }
};
void xcall_QCPColorMap(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPColorMap *xself = (x_QCPColorMap*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPColorMap::x_3(args);	break;
        case 4: x_QCPColorMap::x_4(args);	break;
        case 5: x_QCPColorMap::x_5(args);	break;
        case 6: x_QCPColorMap::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPColorMap::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: x_QCPColorMap::x_35(args);	break;
        case 36: x_QCPColorMap::x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: x_QCPColorMap::x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: delete (QCPColorMap*)xself;	break;
    }
}
class x_QCPColorMapData : public QCPColorMapData {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QCPColorMapData* QCPColorMapData(int, int, const QCPRange&, const QCPRange&)
        x_QCPColorMapData* xret = new x_QCPColorMapData((int)x[1].s_int,(int)x[2].s_int,*(const QCPRange*)x[3].s_class,*(const QCPRange*)x[4].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPColorMapData(int x1, int x2, const QCPRange& x3, const QCPRange& x4) : QCPColorMapData(x1, x2, x3, x4) {}
    static void x_2(Smoke::Stack x) {
        // QCPColorMapData* QCPColorMapData(const QCPColorMapData&)
        x_QCPColorMapData* xret = new x_QCPColorMapData(*(const QCPColorMapData*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPColorMapData(const QCPColorMapData& x1) : QCPColorMapData(x1) {}
    void x_3(Smoke::Stack x) {
        // QCPColorMapData& operator=(const QCPColorMapData&)
        QCPColorMapData& xret = this->QCPColorMapData::operator=(*(const QCPColorMapData*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_4(Smoke::Stack x) {
        // int keySize() const
        int xret = ((const x_QCPColorMapData*)this)->QCPColorMapData::keySize();
        x[0].s_int = xret;
    }
    void x_5(Smoke::Stack x) {
        // int valueSize() const
        int xret = ((const x_QCPColorMapData*)this)->QCPColorMapData::valueSize();
        x[0].s_int = xret;
    }
    void x_6(Smoke::Stack x) {
        // QCPRange keyRange() const
        QCPRange xret = ((const x_QCPColorMapData*)this)->QCPColorMapData::keyRange();
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_7(Smoke::Stack x) {
        // QCPRange valueRange() const
        QCPRange xret = ((const x_QCPColorMapData*)this)->QCPColorMapData::valueRange();
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_8(Smoke::Stack x) {
        // QCPRange dataBounds() const
        QCPRange xret = ((const x_QCPColorMapData*)this)->QCPColorMapData::dataBounds();
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_9(Smoke::Stack x) {
        // double data(double, double)
        double xret = this->QCPColorMapData::data((double)x[1].s_double,(double)x[2].s_double);
        x[0].s_double = xret;
    }
    void x_10(Smoke::Stack x) {
        // double cell(int, int)
        double xret = this->QCPColorMapData::cell((int)x[1].s_int,(int)x[2].s_int);
        x[0].s_double = xret;
    }
    void x_11(Smoke::Stack x) {
        // void setSize(int, int)
        this->QCPColorMapData::setSize((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void setKeySize(int)
        this->QCPColorMapData::setKeySize((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // void setValueSize(int)
        this->QCPColorMapData::setValueSize((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setRange(const QCPRange&, const QCPRange&)
        this->QCPColorMapData::setRange(*(const QCPRange*)x[1].s_class,*(const QCPRange*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setKeyRange(const QCPRange&)
        this->QCPColorMapData::setKeyRange(*(const QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setValueRange(const QCPRange&)
        this->QCPColorMapData::setValueRange(*(const QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setData(double, double, double)
        this->QCPColorMapData::setData((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setCell(int, int, double)
        this->QCPColorMapData::setCell((int)x[1].s_int,(int)x[2].s_int,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void recalculateDataBounds()
        this->QCPColorMapData::recalculateDataBounds();
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void clear()
        this->QCPColorMapData::clear();
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void fill(double)
        this->QCPColorMapData::fill((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // bool isEmpty() const
        bool xret = ((const x_QCPColorMapData*)this)->QCPColorMapData::isEmpty();
        x[0].s_bool = xret;
    }
    void x_23(Smoke::Stack x) {
        // void coordToCell(double, double, int*, int*) const
        ((const x_QCPColorMapData*)this)->QCPColorMapData::coordToCell((double)x[1].s_double,(double)x[2].s_double,(int*)x[3].s_class,(int*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void cellToCoord(int, int, double*, double*) const
        ((const x_QCPColorMapData*)this)->QCPColorMapData::cellToCoord((int)x[1].s_int,(int)x[2].s_int,(double*)x[3].s_class,(double*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // int mKeySize
        x[0].s_int = this->QCPColorMapData::mKeySize;
    }
    void x_26(Smoke::Stack x) {
        // int mKeySize=
        this->QCPColorMapData::mKeySize = (int)x[1].s_int;
    }
    void x_27(Smoke::Stack x) {
        // int mValueSize
        x[0].s_int = this->QCPColorMapData::mValueSize;
    }
    void x_28(Smoke::Stack x) {
        // int mValueSize=
        this->QCPColorMapData::mValueSize = (int)x[1].s_int;
    }
    void x_29(Smoke::Stack x) {
        // QCPRange mKeyRange
        x[0].s_class = (void*)&this->QCPColorMapData::mKeyRange;
    }
    void x_30(Smoke::Stack x) {
        // QCPRange mKeyRange=
        this->QCPColorMapData::mKeyRange = *(const QCPRange*)x[1].s_class;
    }
    void x_31(Smoke::Stack x) {
        // QCPRange mValueRange
        x[0].s_class = (void*)&this->QCPColorMapData::mValueRange;
    }
    void x_32(Smoke::Stack x) {
        // QCPRange mValueRange=
        this->QCPColorMapData::mValueRange = *(const QCPRange*)x[1].s_class;
    }
    void x_33(Smoke::Stack x) {
        // bool mIsEmpty
        x[0].s_bool = this->QCPColorMapData::mIsEmpty;
    }
    void x_34(Smoke::Stack x) {
        // bool mIsEmpty=
        this->QCPColorMapData::mIsEmpty = (bool)x[1].s_bool;
    }
    void x_35(Smoke::Stack x) {
        // double* mData
        x[0].s_class = (void*)this->QCPColorMapData::mData;
    }
    void x_36(Smoke::Stack x) {
        // double* mData=
        this->QCPColorMapData::mData = (double*)x[1].s_class;
    }
    void x_37(Smoke::Stack x) {
        // QCPRange mDataBounds
        x[0].s_class = (void*)&this->QCPColorMapData::mDataBounds;
    }
    void x_38(Smoke::Stack x) {
        // QCPRange mDataBounds=
        this->QCPColorMapData::mDataBounds = *(const QCPRange*)x[1].s_class;
    }
    void x_39(Smoke::Stack x) {
        // bool mDataModified
        x[0].s_bool = this->QCPColorMapData::mDataModified;
    }
    void x_40(Smoke::Stack x) {
        // bool mDataModified=
        this->QCPColorMapData::mDataModified = (bool)x[1].s_bool;
    }
    ~x_QCPColorMapData() { this->_binding->deleted(15, (void*)this); }
};
void xcall_QCPColorMapData(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPColorMapData *xself = (x_QCPColorMapData*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QCPColorMapData::x_1(args);	break;
        case 2: x_QCPColorMapData::x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: delete (QCPColorMapData*)xself;	break;
    }
}
class x_QCPColorScale : public QCPColorScale, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            const QMetaObject* xret = ((const x_QCPColorScale*)this)->QCPColorScale::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPColorScale*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            void* xret = this->QCPColorScale::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPColorScale::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPColorScale::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPColorScale::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPColorScale::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            int xret = this->QCPColorScale::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPColorScale* QCPColorScale(QCustomPlot*)
        x_QCPColorScale* xret = new x_QCPColorScale((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPColorScale(QCustomPlot* x1) : QCPColorScale(x1) {}
    void x_9(Smoke::Stack x) {
        // QCPAxis* axis() const
        QCPAxis* xret = ((const x_QCPColorScale*)this)->QCPColorScale::axis();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QCPAxis::AxisType type() const
        QCPAxis::AxisType xret = ((const x_QCPColorScale*)this)->QCPColorScale::type();
        x[0].s_enum = xret;
    }
    void x_11(Smoke::Stack x) {
        // QCPRange dataRange() const
        QCPRange xret = ((const x_QCPColorScale*)this)->QCPColorScale::dataRange();
        x[0].s_class = (void*)new QCPRange(xret);
    }
    void x_12(Smoke::Stack x) {
        // QCPAxis::ScaleType dataScaleType() const
        QCPAxis::ScaleType xret = ((const x_QCPColorScale*)this)->QCPColorScale::dataScaleType();
        x[0].s_enum = xret;
    }
    void x_13(Smoke::Stack x) {
        // QCPColorGradient gradient() const
        QCPColorGradient xret = ((const x_QCPColorScale*)this)->QCPColorScale::gradient();
        x[0].s_class = (void*)new QCPColorGradient(xret);
    }
    void x_14(Smoke::Stack x) {
        // QString label() const
        QString xret = ((const x_QCPColorScale*)this)->QCPColorScale::label();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_15(Smoke::Stack x) {
        // int barWidth() const
        int xret = ((const x_QCPColorScale*)this)->QCPColorScale::barWidth();
        x[0].s_int = xret;
    }
    void x_16(Smoke::Stack x) {
        // bool rangeDrag() const
        bool xret = ((const x_QCPColorScale*)this)->QCPColorScale::rangeDrag();
        x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
        // bool rangeZoom() const
        bool xret = ((const x_QCPColorScale*)this)->QCPColorScale::rangeZoom();
        x[0].s_bool = xret;
    }
    void x_18(Smoke::Stack x) {
        // void setType(QCPAxis::AxisType)
        this->QCPColorScale::setType((QCPAxis::AxisType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setDataRange(const QCPRange&)
        this->QCPColorScale::setDataRange(*(const QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setDataScaleType(QCPAxis::ScaleType)
        this->QCPColorScale::setDataScaleType((QCPAxis::ScaleType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setGradient(const QCPColorGradient&)
        this->QCPColorScale::setGradient(*(const QCPColorGradient*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setLabel(const QString&)
        this->QCPColorScale::setLabel(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setBarWidth(int)
        this->QCPColorScale::setBarWidth((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setRangeDrag(bool)
        this->QCPColorScale::setRangeDrag((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setRangeZoom(bool)
        this->QCPColorScale::setRangeZoom((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // QList<QCPColorMap*> colorMaps() const
        QList<QCPColorMap*> xret = ((const x_QCPColorScale*)this)->QCPColorScale::colorMaps();
        x[0].s_class = (void*)new QList<QCPColorMap*>(xret);
    }
    void x_27(Smoke::Stack x) {
        // void rescaleDataRange(bool)
        this->QCPColorScale::rescaleDataRange((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // virtual void update(QCPLayoutElement::UpdatePhase)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            this->QCPColorScale::update((QCPLayoutElement::UpdatePhase)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->update((QCPLayoutElement::UpdatePhase)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_29(Smoke::Stack x) {
        // void dataRangeChanged(QCPRange)
        this->QCPColorScale::dataRangeChanged(*(QCPRange*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void dataScaleTypeChanged(QCPAxis::ScaleType)
        this->QCPColorScale::dataScaleTypeChanged((QCPAxis::ScaleType)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void gradientChanged(QCPColorGradient)
        this->QCPColorScale::gradientChanged(*(QCPColorGradient*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            ((const x_QCPColorScale*)this)->QCPColorScale::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPColorScale*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_33(Smoke::Stack x) {
        // virtual void mousePressEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            this->QCPColorScale::mousePressEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mousePressEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_34(Smoke::Stack x) {
        // virtual void mouseMoveEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            this->QCPColorScale::mouseMoveEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseMoveEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_35(Smoke::Stack x) {
        // virtual void mouseReleaseEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            this->QCPColorScale::mouseReleaseEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseReleaseEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_36(Smoke::Stack x) {
        // virtual void wheelEvent(QWheelEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPColorScale*>(this))) {
            this->QCPColorScale::wheelEvent((QWheelEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->wheelEvent((QWheelEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    static void x_37(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPColorScale::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_38(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPColorScale::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_39(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPColorScale::staticMetaObject;
    }
    void x_40(Smoke::Stack x) {
        // QCPAxis::AxisType mType
        x[0].s_enum = this->QCPColorScale::mType;
    }
    void x_41(Smoke::Stack x) {
        // QCPAxis::AxisType mType=
        this->QCPColorScale::mType = (QCPAxis::AxisType)x[1].s_enum;
    }
    void x_42(Smoke::Stack x) {
        // QCPRange mDataRange
        x[0].s_class = (void*)&this->QCPColorScale::mDataRange;
    }
    void x_43(Smoke::Stack x) {
        // QCPRange mDataRange=
        this->QCPColorScale::mDataRange = *(const QCPRange*)x[1].s_class;
    }
    void x_44(Smoke::Stack x) {
        // QCPAxis::ScaleType mDataScaleType
        x[0].s_enum = this->QCPColorScale::mDataScaleType;
    }
    void x_45(Smoke::Stack x) {
        // QCPAxis::ScaleType mDataScaleType=
        this->QCPColorScale::mDataScaleType = (QCPAxis::ScaleType)x[1].s_enum;
    }
    void x_46(Smoke::Stack x) {
        // QCPColorGradient mGradient
        x[0].s_class = (void*)&this->QCPColorScale::mGradient;
    }
    void x_47(Smoke::Stack x) {
        // QCPColorGradient mGradient=
        this->QCPColorScale::mGradient = *(const QCPColorGradient*)x[1].s_class;
    }
    void x_48(Smoke::Stack x) {
        // int mBarWidth
        x[0].s_int = this->QCPColorScale::mBarWidth;
    }
    void x_49(Smoke::Stack x) {
        // int mBarWidth=
        this->QCPColorScale::mBarWidth = (int)x[1].s_int;
    }
    void x_50(Smoke::Stack x) {
        // QPointer<QCPColorScaleAxisRectPrivate> mAxisRect
        x[0].s_class = (void*)&this->QCPColorScale::mAxisRect;
    }
    void x_51(Smoke::Stack x) {
        // QPointer<QCPColorScaleAxisRectPrivate> mAxisRect=
        this->QCPColorScale::mAxisRect = *(const QPointer<QCPColorScaleAxisRectPrivate>*)x[1].s_class;
    }
    void x_52(Smoke::Stack x) {
        // QPointer<QCPAxis> mColorAxis
        x[0].s_class = (void*)&this->QCPColorScale::mColorAxis;
    }
    void x_53(Smoke::Stack x) {
        // QPointer<QCPAxis> mColorAxis=
        this->QCPColorScale::mColorAxis = *(const QPointer<QCPAxis>*)x[1].s_class;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(862, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPColorScale::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(863, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPColorScale::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(868, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPColorScale::qt_metacall(x1, x2, x3);
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(889, (void*)this, x)) return;
        this->QCPColorScale::update(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(893, (void*)this, x)) return;
        this->QCPColorScale::applyDefaultAntialiasingHint(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(894, (void*)this, x)) return;
        this->QCPColorScale::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(895, (void*)this, x)) return;
        this->QCPColorScale::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(896, (void*)this, x)) return;
        this->QCPColorScale::mouseReleaseEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(897, (void*)this, x)) return;
        this->QCPColorScale::wheelEvent(x1);
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1859, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1860, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::maximumSizeHint();
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1861, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::elements(x1);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1862, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLayoutElement::selectTest(x1, x2, x3);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1870, (void*)this, x)) return;
        this->QCPLayoutElement::draw(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(1781, (void*)this, x)) return;
        this->QCPLayerable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1782, (void*)this, x)) return;
        this->QCPLayerable::deselectEvent(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPColorScale() { this->_binding->deleted(16, (void*)this); }
};
void xcall_QCPColorScale(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPColorScale *xself = (x_QCPColorScale*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPColorScale::x_3(args);	break;
        case 4: x_QCPColorScale::x_4(args);	break;
        case 5: x_QCPColorScale::x_5(args);	break;
        case 6: x_QCPColorScale::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPColorScale::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: x_QCPColorScale::x_37(args);	break;
        case 38: x_QCPColorScale::x_38(args);	break;
        case 39: x_QCPColorScale::x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: delete (QCPColorScale*)xself;	break;
    }
}

}
