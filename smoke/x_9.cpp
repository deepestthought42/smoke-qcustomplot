//Auto-generated by smokegen. DO NOT EDIT.
#include <qcustomplot.h>
#include <typeinfo>

#include <smoke.h>
#include <qcustomplot_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqcustomplot {

class x_QCPLayout : public QCPLayout, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayout*>(this))) {
            const QMetaObject* xret = ((const x_QCPLayout*)this)->QCPLayout::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPLayout*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayout*>(this))) {
            void* xret = this->QCPLayout::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPLayout::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPLayout::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPLayout::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPLayout::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayout*>(this))) {
            int xret = this->QCPLayout::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPLayout* QCPLayout()
        x_QCPLayout* xret = new x_QCPLayout();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLayout() : QCPLayout() {}
    void x_9(Smoke::Stack x) {
        // virtual void update(QCPLayoutElement::UpdatePhase)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayout*>(this))) {
            this->QCPLayout::update((QCPLayoutElement::UpdatePhase)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->update((QCPLayoutElement::UpdatePhase)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_10(Smoke::Stack x) {
        // virtual QList<QCPLayoutElement*> elements(bool) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayout*>(this))) {
            QList<QCPLayoutElement*> xret = ((const x_QCPLayout*)this)->QCPLayout::elements((bool)x[1].s_bool);
            x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
        } else {
            QList<QCPLayoutElement*> xret = ((const x_QCPLayout*)this)->elements((bool)x[1].s_bool);
            x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
        }
    }
    void x_11(Smoke::Stack x) {
        // virtual int elementCount() const = 0
        int xret = ((const x_QCPLayout*)this)->elementCount();
        x[0].s_int = xret;
    }
    void x_12(Smoke::Stack x) {
        // virtual QCPLayoutElement* elementAt(int) const = 0
        QCPLayoutElement* xret = ((const x_QCPLayout*)this)->elementAt((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_13(Smoke::Stack x) {
        // virtual QCPLayoutElement* takeAt(int) = 0
        QCPLayoutElement* xret = this->takeAt((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_14(Smoke::Stack x) {
        // virtual bool take(QCPLayoutElement*) = 0
        bool xret = this->take((QCPLayoutElement*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_15(Smoke::Stack x) {
        // virtual void simplify()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayout*>(this))) {
            this->QCPLayout::simplify();
            (void)x; // noop (for compiler warning)
        } else {
            this->simplify();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_16(Smoke::Stack x) {
        // bool removeAt(int)
        bool xret = this->QCPLayout::removeAt((int)x[1].s_int);
        x[0].s_bool = xret;
    }
    void x_17(Smoke::Stack x) {
        // bool remove(QCPLayoutElement*)
        bool xret = this->QCPLayout::remove((QCPLayoutElement*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_18(Smoke::Stack x) {
        // void clear()
        this->QCPLayout::clear();
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // virtual void updateLayout()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayout*>(this))) {
            this->QCPLayout::updateLayout();
            (void)x; // noop (for compiler warning)
        } else {
            this->updateLayout();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_20(Smoke::Stack x) {
        // void sizeConstraintsChanged() const
        ((const x_QCPLayout*)this)->QCPLayout::sizeConstraintsChanged();
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void adoptElement(QCPLayoutElement*)
        this->QCPLayout::adoptElement((QCPLayoutElement*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void releaseElement(QCPLayoutElement*)
        this->QCPLayout::releaseElement((QCPLayoutElement*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // QVector<int> getSectionSizes(QVector<int>, QVector<int>, QVector<double>, int) const
        QVector<int> xret = ((const x_QCPLayout*)this)->QCPLayout::getSectionSizes(*(QVector<int>*)x[1].s_class,*(QVector<int>*)x[2].s_class,*(QVector<double>*)x[3].s_class,(int)x[4].s_int);
        x[0].s_class = (void*)new QVector<int>(xret);
    }
    static void x_24(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPLayout::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_25(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPLayout::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_26(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPLayout::staticMetaObject;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1804, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPLayout::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1805, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPLayout::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1810, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayout::qt_metacall(x1, x2, x3);
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1812, (void*)this, x)) return;
        this->QCPLayout::update(x1);
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1813, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayout::elements(x1);
    }
    virtual int elementCount() const {
        Smoke::StackItem x[1];
        this->_binding->callMethod(1814, (void*)this, x, true /*pure virtual*/);
        return (int)x[0].s_int;
    }
    virtual QCPLayoutElement* elementAt(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        this->_binding->callMethod(1815, (void*)this, x, true /*pure virtual*/);
        return (QCPLayoutElement*)x[0].s_class;
    }
    virtual QCPLayoutElement* takeAt(int x1) {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        this->_binding->callMethod(1816, (void*)this, x, true /*pure virtual*/);
        return (QCPLayoutElement*)x[0].s_class;
    }
    virtual bool take(QCPLayoutElement* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        this->_binding->callMethod(1817, (void*)this, x, true /*pure virtual*/);
        return (bool)x[0].s_bool;
    }
    virtual void simplify() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1818, (void*)this, x)) return;
        this->QCPLayout::simplify();
    }
    virtual void updateLayout() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1822, (void*)this, x)) return;
        this->QCPLayout::updateLayout();
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1859, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1860, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::maximumSizeHint();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1862, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLayoutElement::selectTest(x1, x2, x3);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1864, (void*)this, x)) return;
        this->QCPLayoutElement::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1865, (void*)this, x)) return;
        this->QCPLayoutElement::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1866, (void*)this, x)) return;
        this->QCPLayoutElement::mouseReleaseEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1868, (void*)this, x)) return;
        this->QCPLayoutElement::wheelEvent(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1869, (void*)this, x)) return;
        this->QCPLayoutElement::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1870, (void*)this, x)) return;
        this->QCPLayoutElement::draw(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(1781, (void*)this, x)) return;
        this->QCPLayerable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1782, (void*)this, x)) return;
        this->QCPLayerable::deselectEvent(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPLayout() { this->_binding->deleted(38, (void*)this); }
};
void xcall_QCPLayout(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPLayout *xself = (x_QCPLayout*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPLayout::x_3(args);	break;
        case 4: x_QCPLayout::x_4(args);	break;
        case 5: x_QCPLayout::x_5(args);	break;
        case 6: x_QCPLayout::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPLayout::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: x_QCPLayout::x_24(args);	break;
        case 25: x_QCPLayout::x_25(args);	break;
        case 26: x_QCPLayout::x_26(args);	break;
        case 27: delete (QCPLayout*)xself;	break;
    }
}
class x_QCPLayoutElement : public QCPLayoutElement, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            const QMetaObject* xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPLayoutElement*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            void* xret = this->QCPLayoutElement::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPLayoutElement::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPLayoutElement::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPLayoutElement::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPLayoutElement::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            int xret = this->QCPLayoutElement::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPLayoutElement* QCPLayoutElement(QCustomPlot*)
        x_QCPLayoutElement* xret = new x_QCPLayoutElement((QCustomPlot*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLayoutElement(QCustomPlot* x1) : QCPLayoutElement(x1) {}
    void x_9(Smoke::Stack x) {
        // QCPLayout* layout() const
        QCPLayout* xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::layout();
        x[0].s_class = (void*)xret;
    }
    void x_10(Smoke::Stack x) {
        // QRect rect() const
        QRect xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::rect();
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_11(Smoke::Stack x) {
        // QRect outerRect() const
        QRect xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::outerRect();
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_12(Smoke::Stack x) {
        // QMargins margins() const
        QMargins xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::margins();
        x[0].s_class = (void*)new QMargins(xret);
    }
    void x_13(Smoke::Stack x) {
        // QMargins minimumMargins() const
        QMargins xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::minimumMargins();
        x[0].s_class = (void*)new QMargins(xret);
    }
    void x_14(Smoke::Stack x) {
        // QFlags<QCP::MarginSide> autoMargins() const
        QFlags<QCP::MarginSide> xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::autoMargins();
        x[0].s_uint = (uint)xret;
    }
    void x_15(Smoke::Stack x) {
        // QSize minimumSize() const
        QSize xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::minimumSize();
        x[0].s_class = (void*)new QSize(xret);
    }
    void x_16(Smoke::Stack x) {
        // QSize maximumSize() const
        QSize xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::maximumSize();
        x[0].s_class = (void*)new QSize(xret);
    }
    void x_17(Smoke::Stack x) {
        // QCPMarginGroup* marginGroup(QCP::MarginSide) const
        QCPMarginGroup* xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::marginGroup((QCP::MarginSide)x[1].s_enum);
        x[0].s_class = (void*)xret;
    }
    void x_18(Smoke::Stack x) {
        // QHash<QCP::MarginSide,QCPMarginGroup*> marginGroups() const
        QHash<QCP::MarginSide,QCPMarginGroup*> xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::marginGroups();
        x[0].s_class = (void*)new QHash<QCP::MarginSide,QCPMarginGroup*>(xret);
    }
    void x_19(Smoke::Stack x) {
        // void setOuterRect(const QRect&)
        this->QCPLayoutElement::setOuterRect(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setMargins(const QMargins&)
        this->QCPLayoutElement::setMargins(*(const QMargins*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setMinimumMargins(const QMargins&)
        this->QCPLayoutElement::setMinimumMargins(*(const QMargins*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setAutoMargins(QFlags<QCP::MarginSide>)
        this->QCPLayoutElement::setAutoMargins((QFlags<QCP::MarginSide>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void setMinimumSize(const QSize&)
        this->QCPLayoutElement::setMinimumSize(*(const QSize*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void setMinimumSize(int, int)
        this->QCPLayoutElement::setMinimumSize((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setMaximumSize(const QSize&)
        this->QCPLayoutElement::setMaximumSize(*(const QSize*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setMaximumSize(int, int)
        this->QCPLayoutElement::setMaximumSize((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setMarginGroup(QFlags<QCP::MarginSide>, QCPMarginGroup*)
        this->QCPLayoutElement::setMarginGroup((QFlags<QCP::MarginSide>)x[1].s_uint,(QCPMarginGroup*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // virtual void update(QCPLayoutElement::UpdatePhase)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            this->QCPLayoutElement::update((QCPLayoutElement::UpdatePhase)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->update((QCPLayoutElement::UpdatePhase)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_29(Smoke::Stack x) {
        // virtual QSize minimumSizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            QSize xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCPLayoutElement*)this)->minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_30(Smoke::Stack x) {
        // virtual QSize maximumSizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            QSize xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::maximumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCPLayoutElement*)this)->maximumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_31(Smoke::Stack x) {
        // virtual QList<QCPLayoutElement*> elements(bool) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            QList<QCPLayoutElement*> xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::elements((bool)x[1].s_bool);
            x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
        } else {
            QList<QCPLayoutElement*> xret = ((const x_QCPLayoutElement*)this)->elements((bool)x[1].s_bool);
            x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
        }
    }
    void x_32(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            double xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPLayoutElement*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_33(Smoke::Stack x) {
        // virtual int calculateAutoMargin(QCP::MarginSide)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            int xret = this->QCPLayoutElement::calculateAutoMargin((QCP::MarginSide)x[1].s_enum);
            x[0].s_int = xret;
        } else {
            int xret = this->calculateAutoMargin((QCP::MarginSide)x[1].s_enum);
            x[0].s_int = xret;
        }
    }
    void x_34(Smoke::Stack x) {
        // virtual void mousePressEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            this->QCPLayoutElement::mousePressEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mousePressEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_35(Smoke::Stack x) {
        // virtual void mouseMoveEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            this->QCPLayoutElement::mouseMoveEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseMoveEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_36(Smoke::Stack x) {
        // virtual void mouseReleaseEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            this->QCPLayoutElement::mouseReleaseEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseReleaseEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_37(Smoke::Stack x) {
        // virtual void mouseDoubleClickEvent(QMouseEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            this->QCPLayoutElement::mouseDoubleClickEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->mouseDoubleClickEvent((QMouseEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_38(Smoke::Stack x) {
        // virtual void wheelEvent(QWheelEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            this->QCPLayoutElement::wheelEvent((QWheelEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->wheelEvent((QWheelEvent*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_39(Smoke::Stack x) {
        // virtual void applyDefaultAntialiasingHint(QCPPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            ((const x_QCPLayoutElement*)this)->QCPLayoutElement::applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QCPLayoutElement*)this)->applyDefaultAntialiasingHint((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_40(Smoke::Stack x) {
        // virtual void draw(QCPPainter*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            this->QCPLayoutElement::draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QCPPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_41(Smoke::Stack x) {
        // virtual void parentPlotInitialized(QCustomPlot*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutElement*>(this))) {
            this->QCPLayoutElement::parentPlotInitialized((QCustomPlot*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->parentPlotInitialized((QCustomPlot*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    static void x_42(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPLayoutElement::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_43(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPLayoutElement::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_44(Smoke::Stack x) {
        // QCPLayoutElement* QCPLayoutElement()
        x_QCPLayoutElement* xret = new x_QCPLayoutElement((QCustomPlot*)0);
        x[0].s_class = (void*)xret;
    }
    void x_45(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPLayoutElement*)this)->QCPLayoutElement::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_46(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPLayoutElement::staticMetaObject;
    }
    void x_47(Smoke::Stack x) {
        // QCPLayout* mParentLayout
        x[0].s_class = (void*)this->QCPLayoutElement::mParentLayout;
    }
    void x_48(Smoke::Stack x) {
        // QCPLayout* mParentLayout=
        this->QCPLayoutElement::mParentLayout = (QCPLayout*)x[1].s_class;
    }
    void x_49(Smoke::Stack x) {
        // QSize mMinimumSize
        x[0].s_class = (void*)&this->QCPLayoutElement::mMinimumSize;
    }
    void x_50(Smoke::Stack x) {
        // QSize mMinimumSize=
        this->QCPLayoutElement::mMinimumSize = *(const QSize*)x[1].s_class;
    }
    void x_51(Smoke::Stack x) {
        // QSize mMaximumSize
        x[0].s_class = (void*)&this->QCPLayoutElement::mMaximumSize;
    }
    void x_52(Smoke::Stack x) {
        // QSize mMaximumSize=
        this->QCPLayoutElement::mMaximumSize = *(const QSize*)x[1].s_class;
    }
    void x_53(Smoke::Stack x) {
        // QRect mRect
        x[0].s_class = (void*)&this->QCPLayoutElement::mRect;
    }
    void x_54(Smoke::Stack x) {
        // QRect mRect=
        this->QCPLayoutElement::mRect = *(const QRect*)x[1].s_class;
    }
    void x_55(Smoke::Stack x) {
        // QRect mOuterRect
        x[0].s_class = (void*)&this->QCPLayoutElement::mOuterRect;
    }
    void x_56(Smoke::Stack x) {
        // QRect mOuterRect=
        this->QCPLayoutElement::mOuterRect = *(const QRect*)x[1].s_class;
    }
    void x_57(Smoke::Stack x) {
        // QMargins mMargins
        x[0].s_class = (void*)&this->QCPLayoutElement::mMargins;
    }
    void x_58(Smoke::Stack x) {
        // QMargins mMargins=
        this->QCPLayoutElement::mMargins = *(const QMargins*)x[1].s_class;
    }
    void x_59(Smoke::Stack x) {
        // QMargins mMinimumMargins
        x[0].s_class = (void*)&this->QCPLayoutElement::mMinimumMargins;
    }
    void x_60(Smoke::Stack x) {
        // QMargins mMinimumMargins=
        this->QCPLayoutElement::mMinimumMargins = *(const QMargins*)x[1].s_class;
    }
    void x_61(Smoke::Stack x) {
        // QFlags<QCP::MarginSide> mAutoMargins
        x[0].s_uint = (uint)this->QCPLayoutElement::mAutoMargins;
    }
    void x_62(Smoke::Stack x) {
        // QFlags<QCP::MarginSide> mAutoMargins=
        this->QCPLayoutElement::mAutoMargins = (QFlags<QCP::MarginSide>)x[1].s_uint;
    }
    void x_63(Smoke::Stack x) {
        // QHash<QCP::MarginSide,QCPMarginGroup*> mMarginGroups
        x[0].s_class = (void*)&this->QCPLayoutElement::mMarginGroups;
    }
    void x_64(Smoke::Stack x) {
        // QHash<QCP::MarginSide,QCPMarginGroup*> mMarginGroups=
        this->QCPLayoutElement::mMarginGroups = *(const QHash<QCP::MarginSide,QCPMarginGroup*>*)x[1].s_class;
    }
    static void x_65(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLayoutElement::upPreparation;
    }
    static void x_66(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLayoutElement::upMargins;
    }
    static void x_67(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLayoutElement::upLayout;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1831, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPLayoutElement::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1832, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPLayoutElement::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1837, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::qt_metacall(x1, x2, x3);
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1858, (void*)this, x)) return;
        this->QCPLayoutElement::update(x1);
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1859, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1860, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::maximumSizeHint();
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1861, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::elements(x1);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1862, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLayoutElement::selectTest(x1, x2, x3);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1864, (void*)this, x)) return;
        this->QCPLayoutElement::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1865, (void*)this, x)) return;
        this->QCPLayoutElement::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1866, (void*)this, x)) return;
        this->QCPLayoutElement::mouseReleaseEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1868, (void*)this, x)) return;
        this->QCPLayoutElement::wheelEvent(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1869, (void*)this, x)) return;
        this->QCPLayoutElement::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1870, (void*)this, x)) return;
        this->QCPLayoutElement::draw(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(1781, (void*)this, x)) return;
        this->QCPLayerable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1782, (void*)this, x)) return;
        this->QCPLayerable::deselectEvent(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 85: //QCPLayoutElement::UpdatePhase
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPLayoutElement::UpdatePhase;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPLayoutElement::UpdatePhase*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPLayoutElement::UpdatePhase*)xdata = (QCPLayoutElement::UpdatePhase)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPLayoutElement::UpdatePhase*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPLayoutElement() { this->_binding->deleted(39, (void*)this); }
};
void xenum_QCPLayoutElement(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPLayoutElement::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPLayoutElement(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPLayoutElement *xself = (x_QCPLayoutElement*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPLayoutElement::x_3(args);	break;
        case 4: x_QCPLayoutElement::x_4(args);	break;
        case 5: x_QCPLayoutElement::x_5(args);	break;
        case 6: x_QCPLayoutElement::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPLayoutElement::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: x_QCPLayoutElement::x_42(args);	break;
        case 43: x_QCPLayoutElement::x_43(args);	break;
        case 44: x_QCPLayoutElement::x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: x_QCPLayoutElement::x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: x_QCPLayoutElement::x_65(args);	break;
        case 66: x_QCPLayoutElement::x_66(args);	break;
        case 67: x_QCPLayoutElement::x_67(args);	break;
        case 68: delete (QCPLayoutElement*)xself;	break;
    }
}
class x_QCPLayoutGrid : public QCPLayoutGrid, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            const QMetaObject* xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPLayoutGrid*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            void* xret = this->QCPLayoutGrid::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPLayoutGrid::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPLayoutGrid::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPLayoutGrid::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPLayoutGrid::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            int xret = this->QCPLayoutGrid::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPLayoutGrid* QCPLayoutGrid()
        x_QCPLayoutGrid* xret = new x_QCPLayoutGrid();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLayoutGrid() : QCPLayoutGrid() {}
    void x_9(Smoke::Stack x) {
        // int rowCount() const
        int xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::rowCount();
        x[0].s_int = xret;
    }
    void x_10(Smoke::Stack x) {
        // int columnCount() const
        int xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::columnCount();
        x[0].s_int = xret;
    }
    void x_11(Smoke::Stack x) {
        // QList<double> columnStretchFactors() const
        QList<double> xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::columnStretchFactors();
        x[0].s_class = (void*)new QList<double>(xret);
    }
    void x_12(Smoke::Stack x) {
        // QList<double> rowStretchFactors() const
        QList<double> xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::rowStretchFactors();
        x[0].s_class = (void*)new QList<double>(xret);
    }
    void x_13(Smoke::Stack x) {
        // int columnSpacing() const
        int xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::columnSpacing();
        x[0].s_int = xret;
    }
    void x_14(Smoke::Stack x) {
        // int rowSpacing() const
        int xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::rowSpacing();
        x[0].s_int = xret;
    }
    void x_15(Smoke::Stack x) {
        // void setColumnStretchFactor(int, double)
        this->QCPLayoutGrid::setColumnStretchFactor((int)x[1].s_int,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setColumnStretchFactors(const QList<double>&)
        this->QCPLayoutGrid::setColumnStretchFactors(*(const QList<double>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setRowStretchFactor(int, double)
        this->QCPLayoutGrid::setRowStretchFactor((int)x[1].s_int,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void setRowStretchFactors(const QList<double>&)
        this->QCPLayoutGrid::setRowStretchFactors(*(const QList<double>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setColumnSpacing(int)
        this->QCPLayoutGrid::setColumnSpacing((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setRowSpacing(int)
        this->QCPLayoutGrid::setRowSpacing((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // virtual void updateLayout()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            this->QCPLayoutGrid::updateLayout();
            (void)x; // noop (for compiler warning)
        } else {
            this->updateLayout();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_22(Smoke::Stack x) {
        // virtual int elementCount() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            int xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::elementCount();
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QCPLayoutGrid*)this)->elementCount();
            x[0].s_int = xret;
        }
    }
    void x_23(Smoke::Stack x) {
        // virtual QCPLayoutElement* elementAt(int) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            QCPLayoutElement* xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::elementAt((int)x[1].s_int);
            x[0].s_class = (void*)xret;
        } else {
            QCPLayoutElement* xret = ((const x_QCPLayoutGrid*)this)->elementAt((int)x[1].s_int);
            x[0].s_class = (void*)xret;
        }
    }
    void x_24(Smoke::Stack x) {
        // virtual QCPLayoutElement* takeAt(int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            QCPLayoutElement* xret = this->QCPLayoutGrid::takeAt((int)x[1].s_int);
            x[0].s_class = (void*)xret;
        } else {
            QCPLayoutElement* xret = this->takeAt((int)x[1].s_int);
            x[0].s_class = (void*)xret;
        }
    }
    void x_25(Smoke::Stack x) {
        // virtual bool take(QCPLayoutElement*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            bool xret = this->QCPLayoutGrid::take((QCPLayoutElement*)x[1].s_class);
            x[0].s_bool = xret;
        } else {
            bool xret = this->take((QCPLayoutElement*)x[1].s_class);
            x[0].s_bool = xret;
        }
    }
    void x_26(Smoke::Stack x) {
        // virtual QList<QCPLayoutElement*> elements(bool) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            QList<QCPLayoutElement*> xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::elements((bool)x[1].s_bool);
            x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
        } else {
            QList<QCPLayoutElement*> xret = ((const x_QCPLayoutGrid*)this)->elements((bool)x[1].s_bool);
            x[0].s_class = (void*)new QList<QCPLayoutElement*>(xret);
        }
    }
    void x_27(Smoke::Stack x) {
        // virtual void simplify()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            this->QCPLayoutGrid::simplify();
            (void)x; // noop (for compiler warning)
        } else {
            this->simplify();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_28(Smoke::Stack x) {
        // virtual QSize minimumSizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            QSize xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCPLayoutGrid*)this)->minimumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_29(Smoke::Stack x) {
        // virtual QSize maximumSizeHint() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutGrid*>(this))) {
            QSize xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::maximumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        } else {
            QSize xret = ((const x_QCPLayoutGrid*)this)->maximumSizeHint();
            x[0].s_class = (void*)new QSize(xret);
        }
    }
    void x_30(Smoke::Stack x) {
        // QCPLayoutElement* element(int, int) const
        QCPLayoutElement* xret = ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::element((int)x[1].s_int,(int)x[2].s_int);
        x[0].s_class = (void*)xret;
    }
    void x_31(Smoke::Stack x) {
        // bool addElement(int, int, QCPLayoutElement*)
        bool xret = this->QCPLayoutGrid::addElement((int)x[1].s_int,(int)x[2].s_int,(QCPLayoutElement*)x[3].s_class);
        x[0].s_bool = xret;
    }
    void x_32(Smoke::Stack x) {
        // bool hasElement(int, int)
        bool xret = this->QCPLayoutGrid::hasElement((int)x[1].s_int,(int)x[2].s_int);
        x[0].s_bool = xret;
    }
    void x_33(Smoke::Stack x) {
        // void expandTo(int, int)
        this->QCPLayoutGrid::expandTo((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // void insertRow(int)
        this->QCPLayoutGrid::insertRow((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
        // void insertColumn(int)
        this->QCPLayoutGrid::insertColumn((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
        // void getMinimumRowColSizes(QVector<int>*, QVector<int>*) const
        ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::getMinimumRowColSizes((QVector<int>*)x[1].s_class,(QVector<int>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
        // void getMaximumRowColSizes(QVector<int>*, QVector<int>*) const
        ((const x_QCPLayoutGrid*)this)->QCPLayoutGrid::getMaximumRowColSizes((QVector<int>*)x[1].s_class,(QVector<int>*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_38(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPLayoutGrid::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_39(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPLayoutGrid::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_40(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPLayoutGrid::staticMetaObject;
    }
    void x_41(Smoke::Stack x) {
        // QList<QList<QCPLayoutElement*> > mElements
        x[0].s_class = (void*)&this->QCPLayoutGrid::mElements;
    }
    void x_42(Smoke::Stack x) {
        // QList<QList<QCPLayoutElement*> > mElements=
        this->QCPLayoutGrid::mElements = *(const QList<QList<QCPLayoutElement*> >*)x[1].s_class;
    }
    void x_43(Smoke::Stack x) {
        // QList<double> mColumnStretchFactors
        x[0].s_class = (void*)&this->QCPLayoutGrid::mColumnStretchFactors;
    }
    void x_44(Smoke::Stack x) {
        // QList<double> mColumnStretchFactors=
        this->QCPLayoutGrid::mColumnStretchFactors = *(const QList<double>*)x[1].s_class;
    }
    void x_45(Smoke::Stack x) {
        // QList<double> mRowStretchFactors
        x[0].s_class = (void*)&this->QCPLayoutGrid::mRowStretchFactors;
    }
    void x_46(Smoke::Stack x) {
        // QList<double> mRowStretchFactors=
        this->QCPLayoutGrid::mRowStretchFactors = *(const QList<double>*)x[1].s_class;
    }
    void x_47(Smoke::Stack x) {
        // int mColumnSpacing
        x[0].s_int = this->QCPLayoutGrid::mColumnSpacing;
    }
    void x_48(Smoke::Stack x) {
        // int mColumnSpacing=
        this->QCPLayoutGrid::mColumnSpacing = (int)x[1].s_int;
    }
    void x_49(Smoke::Stack x) {
        // int mRowSpacing
        x[0].s_int = this->QCPLayoutGrid::mRowSpacing;
    }
    void x_50(Smoke::Stack x) {
        // int mRowSpacing=
        this->QCPLayoutGrid::mRowSpacing = (int)x[1].s_int;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1899, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPLayoutGrid::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1900, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPLayoutGrid::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1905, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutGrid::qt_metacall(x1, x2, x3);
    }
    virtual void updateLayout() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1919, (void*)this, x)) return;
        this->QCPLayoutGrid::updateLayout();
    }
    virtual int elementCount() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1920, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutGrid::elementCount();
    }
    virtual QCPLayoutElement* elementAt(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1921, (void*)this, x)) return (QCPLayoutElement*)x[0].s_class;
        return this->QCPLayoutGrid::elementAt(x1);
    }
    virtual QCPLayoutElement* takeAt(int x1) {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1922, (void*)this, x)) return (QCPLayoutElement*)x[0].s_class;
        return this->QCPLayoutGrid::takeAt(x1);
    }
    virtual bool take(QCPLayoutElement* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1923, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPLayoutGrid::take(x1);
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1924, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutGrid::elements(x1);
    }
    virtual void simplify() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1925, (void*)this, x)) return;
        this->QCPLayoutGrid::simplify();
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1926, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutGrid::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1927, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutGrid::maximumSizeHint();
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1812, (void*)this, x)) return;
        this->QCPLayout::update(x1);
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1862, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLayoutElement::selectTest(x1, x2, x3);
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1864, (void*)this, x)) return;
        this->QCPLayoutElement::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1865, (void*)this, x)) return;
        this->QCPLayoutElement::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1866, (void*)this, x)) return;
        this->QCPLayoutElement::mouseReleaseEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1868, (void*)this, x)) return;
        this->QCPLayoutElement::wheelEvent(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1869, (void*)this, x)) return;
        this->QCPLayoutElement::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1870, (void*)this, x)) return;
        this->QCPLayoutElement::draw(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(1781, (void*)this, x)) return;
        this->QCPLayerable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1782, (void*)this, x)) return;
        this->QCPLayerable::deselectEvent(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QCPLayoutGrid() { this->_binding->deleted(40, (void*)this); }
};
void xcall_QCPLayoutGrid(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPLayoutGrid *xself = (x_QCPLayoutGrid*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPLayoutGrid::x_3(args);	break;
        case 4: x_QCPLayoutGrid::x_4(args);	break;
        case 5: x_QCPLayoutGrid::x_5(args);	break;
        case 6: x_QCPLayoutGrid::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPLayoutGrid::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: x_QCPLayoutGrid::x_38(args);	break;
        case 39: x_QCPLayoutGrid::x_39(args);	break;
        case 40: x_QCPLayoutGrid::x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: delete (QCPLayoutGrid*)xself;	break;
    }
}
class x_QCPLayoutInset : public QCPLayoutInset, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            const QMetaObject* xret = ((const x_QCPLayoutInset*)this)->QCPLayoutInset::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QCPLayoutInset*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            void* xret = this->QCPLayoutInset::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QCPLayoutInset::tr((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QCPLayoutInset::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QCPLayoutInset::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QCPLayoutInset::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            int xret = this->QCPLayoutInset::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_8(Smoke::Stack x) {
        // QCPLayoutInset* QCPLayoutInset()
        x_QCPLayoutInset* xret = new x_QCPLayoutInset();
        x[0].s_class = (void*)xret;
    }
    explicit x_QCPLayoutInset() : QCPLayoutInset() {}
    void x_9(Smoke::Stack x) {
        // QCPLayoutInset::InsetPlacement insetPlacement(int) const
        QCPLayoutInset::InsetPlacement xret = ((const x_QCPLayoutInset*)this)->QCPLayoutInset::insetPlacement((int)x[1].s_int);
        x[0].s_enum = xret;
    }
    void x_10(Smoke::Stack x) {
        // QFlags<Qt::AlignmentFlag> insetAlignment(int) const
        QFlags<Qt::AlignmentFlag> xret = ((const x_QCPLayoutInset*)this)->QCPLayoutInset::insetAlignment((int)x[1].s_int);
        x[0].s_uint = (uint)xret;
    }
    void x_11(Smoke::Stack x) {
        // QRectF insetRect(int) const
        QRectF xret = ((const x_QCPLayoutInset*)this)->QCPLayoutInset::insetRect((int)x[1].s_int);
        x[0].s_class = (void*)new QRectF(xret);
    }
    void x_12(Smoke::Stack x) {
        // void setInsetPlacement(int, QCPLayoutInset::InsetPlacement)
        this->QCPLayoutInset::setInsetPlacement((int)x[1].s_int,(QCPLayoutInset::InsetPlacement)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // void setInsetAlignment(int, QFlags<Qt::AlignmentFlag>)
        this->QCPLayoutInset::setInsetAlignment((int)x[1].s_int,(QFlags<Qt::AlignmentFlag>)x[2].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setInsetRect(int, const QRectF&)
        this->QCPLayoutInset::setInsetRect((int)x[1].s_int,*(const QRectF*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // virtual void updateLayout()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            this->QCPLayoutInset::updateLayout();
            (void)x; // noop (for compiler warning)
        } else {
            this->updateLayout();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_16(Smoke::Stack x) {
        // virtual int elementCount() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            int xret = ((const x_QCPLayoutInset*)this)->QCPLayoutInset::elementCount();
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QCPLayoutInset*)this)->elementCount();
            x[0].s_int = xret;
        }
    }
    void x_17(Smoke::Stack x) {
        // virtual QCPLayoutElement* elementAt(int) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            QCPLayoutElement* xret = ((const x_QCPLayoutInset*)this)->QCPLayoutInset::elementAt((int)x[1].s_int);
            x[0].s_class = (void*)xret;
        } else {
            QCPLayoutElement* xret = ((const x_QCPLayoutInset*)this)->elementAt((int)x[1].s_int);
            x[0].s_class = (void*)xret;
        }
    }
    void x_18(Smoke::Stack x) {
        // virtual QCPLayoutElement* takeAt(int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            QCPLayoutElement* xret = this->QCPLayoutInset::takeAt((int)x[1].s_int);
            x[0].s_class = (void*)xret;
        } else {
            QCPLayoutElement* xret = this->takeAt((int)x[1].s_int);
            x[0].s_class = (void*)xret;
        }
    }
    void x_19(Smoke::Stack x) {
        // virtual bool take(QCPLayoutElement*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            bool xret = this->QCPLayoutInset::take((QCPLayoutElement*)x[1].s_class);
            x[0].s_bool = xret;
        } else {
            bool xret = this->take((QCPLayoutElement*)x[1].s_class);
            x[0].s_bool = xret;
        }
    }
    void x_20(Smoke::Stack x) {
        // virtual void simplify()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            this->QCPLayoutInset::simplify();
            (void)x; // noop (for compiler warning)
        } else {
            this->simplify();
            (void)x; // noop (for compiler warning)
        }
    }
    void x_21(Smoke::Stack x) {
        // virtual double selectTest(const QPointF&, bool, QVariant*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QCPLayoutInset*>(this))) {
            double xret = ((const x_QCPLayoutInset*)this)->QCPLayoutInset::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        } else {
            double xret = ((const x_QCPLayoutInset*)this)->selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)x[3].s_class);
            x[0].s_double = xret;
        }
    }
    void x_22(Smoke::Stack x) {
        // void addElement(QCPLayoutElement*, QFlags<Qt::AlignmentFlag>)
        this->QCPLayoutInset::addElement((QCPLayoutElement*)x[1].s_class,(QFlags<Qt::AlignmentFlag>)x[2].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void addElement(QCPLayoutElement*, const QRectF&)
        this->QCPLayoutInset::addElement((QCPLayoutElement*)x[1].s_class,*(const QRectF*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_24(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QCPLayoutInset::tr((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_25(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QCPLayoutInset::trUtf8((const char*)x[1].s_class,(const char*)0);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_26(Smoke::Stack x) {
        // double selectTest(const QPointF&, bool) const
        double xret = ((const x_QCPLayoutInset*)this)->QCPLayoutInset::selectTest(*(const QPointF*)x[1].s_class,(bool)x[2].s_bool,(QVariant*)0);
        x[0].s_double = xret;
    }
    static void x_27(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QCPLayoutInset::staticMetaObject;
    }
    void x_28(Smoke::Stack x) {
        // QList<QCPLayoutElement*> mElements
        x[0].s_class = (void*)&this->QCPLayoutInset::mElements;
    }
    void x_29(Smoke::Stack x) {
        // QList<QCPLayoutElement*> mElements=
        this->QCPLayoutInset::mElements = *(const QList<QCPLayoutElement*>*)x[1].s_class;
    }
    void x_30(Smoke::Stack x) {
        // QList<QCPLayoutInset::InsetPlacement> mInsetPlacement
        x[0].s_class = (void*)&this->QCPLayoutInset::mInsetPlacement;
    }
    void x_31(Smoke::Stack x) {
        // QList<QCPLayoutInset::InsetPlacement> mInsetPlacement=
        this->QCPLayoutInset::mInsetPlacement = *(const QList<QCPLayoutInset::InsetPlacement>*)x[1].s_class;
    }
    void x_32(Smoke::Stack x) {
        // QList<QFlags<Qt::AlignmentFlag> > mInsetAlignment
        x[0].s_class = (void*)&this->QCPLayoutInset::mInsetAlignment;
    }
    void x_33(Smoke::Stack x) {
        // QList<QFlags<Qt::AlignmentFlag> > mInsetAlignment=
        this->QCPLayoutInset::mInsetAlignment = *(const QList<QFlags<Qt::AlignmentFlag> >*)x[1].s_class;
    }
    void x_34(Smoke::Stack x) {
        // QList<QRectF> mInsetRect
        x[0].s_class = (void*)&this->QCPLayoutInset::mInsetRect;
    }
    void x_35(Smoke::Stack x) {
        // QList<QRectF> mInsetRect=
        this->QCPLayoutInset::mInsetRect = *(const QList<QRectF>*)x[1].s_class;
    }
    static void x_36(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLayoutInset::ipFree;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QCPLayoutInset::ipBorderAligned;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1950, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QCPLayoutInset::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1951, (void*)this, x)) return (void*)x[0].s_class;
        return this->QCPLayoutInset::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1956, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutInset::qt_metacall(x1, x2, x3);
    }
    virtual void updateLayout() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1964, (void*)this, x)) return;
        this->QCPLayoutInset::updateLayout();
    }
    virtual int elementCount() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1965, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutInset::elementCount();
    }
    virtual QCPLayoutElement* elementAt(int x1) const {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1966, (void*)this, x)) return (QCPLayoutElement*)x[0].s_class;
        return this->QCPLayoutInset::elementAt(x1);
    }
    virtual QCPLayoutElement* takeAt(int x1) {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(1967, (void*)this, x)) return (QCPLayoutElement*)x[0].s_class;
        return this->QCPLayoutInset::takeAt(x1);
    }
    virtual bool take(QCPLayoutElement* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1968, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QCPLayoutInset::take(x1);
    }
    virtual void simplify() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1969, (void*)this, x)) return;
        this->QCPLayoutInset::simplify();
    }
    virtual double selectTest(const QPointF& x1, bool x2, QVariant* x3) const {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(1970, (void*)this, x)) return (double)x[0].s_double;
        return this->QCPLayoutInset::selectTest(x1, x2, x3);
    }
    virtual void update(QCPLayoutElement::UpdatePhase x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1812, (void*)this, x)) return;
        this->QCPLayout::update(x1);
    }
    virtual QList<QCPLayoutElement*> elements(bool x1) const {
        Smoke::StackItem x[2];
        x[1].s_bool = x1;
        if (this->_binding->callMethod(1813, (void*)this, x)) {
            QList<QCPLayoutElement*>* xptr = (QList<QCPLayoutElement*>*)x[0].s_class;
            QList<QCPLayoutElement*> xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayout::elements(x1);
    }
    virtual QSize minimumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1859, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::minimumSizeHint();
    }
    virtual QSize maximumSizeHint() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1860, (void*)this, x)) {
            QSize* xptr = (QSize*)x[0].s_class;
            QSize xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayoutElement::maximumSizeHint();
    }
    virtual int calculateAutoMargin(QCP::MarginSide x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(1863, (void*)this, x)) return (int)x[0].s_int;
        return this->QCPLayoutElement::calculateAutoMargin(x1);
    }
    virtual void mousePressEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1864, (void*)this, x)) return;
        this->QCPLayoutElement::mousePressEvent(x1);
    }
    virtual void mouseMoveEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1865, (void*)this, x)) return;
        this->QCPLayoutElement::mouseMoveEvent(x1);
    }
    virtual void mouseReleaseEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1866, (void*)this, x)) return;
        this->QCPLayoutElement::mouseReleaseEvent(x1);
    }
    virtual void mouseDoubleClickEvent(QMouseEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1867, (void*)this, x)) return;
        this->QCPLayoutElement::mouseDoubleClickEvent(x1);
    }
    virtual void wheelEvent(QWheelEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1868, (void*)this, x)) return;
        this->QCPLayoutElement::wheelEvent(x1);
    }
    virtual void applyDefaultAntialiasingHint(QCPPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1869, (void*)this, x)) return;
        this->QCPLayoutElement::applyDefaultAntialiasingHint(x1);
    }
    virtual void draw(QCPPainter* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1870, (void*)this, x)) return;
        this->QCPLayoutElement::draw(x1);
    }
    virtual void parentPlotInitialized(QCustomPlot* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1871, (void*)this, x)) return;
        this->QCPLayoutElement::parentPlotInitialized(x1);
    }
    virtual QCP::Interaction selectionCategory() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1777, (void*)this, x)) return (QCP::Interaction)x[0].s_enum;
        return this->QCPLayerable::selectionCategory();
    }
    virtual QRect clipRect() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(1778, (void*)this, x)) {
            QRect* xptr = (QRect*)x[0].s_class;
            QRect xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QCPLayerable::clipRect();
    }
    virtual void selectEvent(QMouseEvent* x1, bool x2, const QVariant& x3, bool* x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)x1;
        x[2].s_bool = x2;
        x[3].s_class = (void*)&x3;
        x[4].s_class = (void*)x4;
        if (this->_binding->callMethod(1781, (void*)this, x)) return;
        this->QCPLayerable::selectEvent(x1, x2, x3, x4);
    }
    virtual void deselectEvent(bool* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(1782, (void*)this, x)) return;
        this->QCPLayerable::deselectEvent(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2718, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(2719, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2720, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2721, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2722, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2723, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(2724, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 88: //QCPLayoutInset::InsetPlacement
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QCPLayoutInset::InsetPlacement;
                    break;
                case Smoke::EnumDelete:
                    delete (QCPLayoutInset::InsetPlacement*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QCPLayoutInset::InsetPlacement*)xdata = (QCPLayoutInset::InsetPlacement)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QCPLayoutInset::InsetPlacement*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QCPLayoutInset() { this->_binding->deleted(41, (void*)this); }
};
void xenum_QCPLayoutInset(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QCPLayoutInset::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QCPLayoutInset(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QCPLayoutInset *xself = (x_QCPLayoutInset*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QCPLayoutInset::x_3(args);	break;
        case 4: x_QCPLayoutInset::x_4(args);	break;
        case 5: x_QCPLayoutInset::x_5(args);	break;
        case 6: x_QCPLayoutInset::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: x_QCPLayoutInset::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: x_QCPLayoutInset::x_24(args);	break;
        case 25: x_QCPLayoutInset::x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: x_QCPLayoutInset::x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: x_QCPLayoutInset::x_36(args);	break;
        case 37: x_QCPLayoutInset::x_37(args);	break;
        case 38: delete (QCPLayoutInset*)xself;	break;
    }
}

}
